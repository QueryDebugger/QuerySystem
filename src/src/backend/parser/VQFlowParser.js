// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';
import VQFlowParserListener from './VQFlowParserListener.js';
import VQFlowParserVisitor from './VQFlowParserVisitor.js';

const serializedATN = [4,1,794,1834,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,1,0,1,0,3,0,291,8,0,1,0,1,0,1,0,3,0,296,8,0,1,0,
3,0,299,8,0,1,0,3,0,302,8,0,1,1,1,1,1,1,3,1,307,8,1,1,1,1,1,1,1,1,2,1,2,
1,2,1,2,1,2,3,2,317,8,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,328,8,3,
1,3,3,3,331,8,3,1,3,3,3,334,8,3,1,3,1,3,3,3,338,8,3,1,3,3,3,341,8,3,1,3,
1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,4,7,353,8,7,11,7,12,7,354,1,7,1,7,3,
7,359,8,7,1,8,1,8,3,8,363,8,8,1,9,1,9,1,9,1,9,5,9,369,8,9,10,9,12,9,372,
9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,3,11,385,8,11,
1,11,3,11,388,8,11,1,12,1,12,1,13,1,13,1,13,5,13,395,8,13,10,13,12,13,398,
9,13,1,14,1,14,1,14,1,14,1,15,1,15,4,15,406,8,15,11,15,12,15,407,1,15,1,
15,1,16,1,16,1,16,1,16,4,16,416,8,16,11,16,12,16,417,1,17,1,17,1,18,1,18,
3,18,424,8,18,1,19,1,19,1,19,3,19,429,8,19,1,19,1,19,1,20,1,20,1,20,1,20,
3,20,437,8,20,1,20,1,20,3,20,441,8,20,3,20,443,8,20,1,20,1,20,3,20,447,8,
20,1,20,1,20,3,20,451,8,20,5,20,453,8,20,10,20,12,20,456,9,20,1,21,3,21,
459,8,21,1,21,1,21,3,21,463,8,21,1,21,3,21,466,8,21,1,21,1,21,3,21,470,8,
21,1,21,3,21,473,8,21,3,21,475,8,21,1,22,1,22,3,22,479,8,22,1,22,1,22,5,
22,483,8,22,10,22,12,22,486,9,22,1,23,1,23,1,23,3,23,491,8,23,3,23,493,8,
23,1,24,1,24,1,24,1,24,3,24,499,8,24,1,24,3,24,502,8,24,1,24,1,24,3,24,506,
8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,517,8,24,10,24,12,
24,520,9,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,528,8,25,1,25,1,25,1,25,1,
25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,540,8,25,10,25,12,25,543,9,25,1,26,
1,26,1,27,1,27,1,28,1,28,3,28,551,8,28,1,28,1,28,1,28,5,28,556,8,28,10,28,
12,28,559,9,28,1,29,1,29,3,29,563,8,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,
1,31,1,31,3,31,574,8,31,1,32,1,32,3,32,578,8,32,1,33,1,33,1,34,1,34,3,34,
584,8,34,1,35,1,35,1,35,3,35,589,8,35,1,35,3,35,592,8,35,1,35,3,35,595,8,
35,1,35,3,35,598,8,35,1,36,1,36,1,36,1,36,3,36,604,8,36,1,37,1,37,1,37,1,
37,3,37,610,8,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,3,40,621,8,
40,1,41,1,41,1,41,5,41,626,8,41,10,41,12,41,629,9,41,1,42,1,42,1,42,1,42,
3,42,635,8,42,1,42,1,42,1,42,3,42,640,8,42,1,42,5,42,643,8,42,10,42,12,42,
646,9,42,1,43,1,43,5,43,650,8,43,10,43,12,43,653,9,43,1,44,1,44,1,44,1,44,
1,44,1,44,3,44,661,8,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,669,8,44,1,44,
1,44,1,44,3,44,674,8,44,1,45,1,45,3,45,678,8,45,1,45,1,45,1,45,1,45,3,45,
684,8,45,1,45,3,45,687,8,45,1,46,3,46,690,8,46,1,46,1,46,3,46,694,8,46,1,
47,1,47,3,47,698,8,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,706,8,48,1,49,1,
49,3,49,710,8,49,1,50,1,50,1,50,3,50,715,8,50,1,50,1,50,1,51,1,51,1,51,1,
51,1,52,1,52,1,52,5,52,726,8,52,10,52,12,52,729,9,52,1,53,1,53,3,53,733,
8,53,1,53,3,53,736,8,53,1,53,1,53,1,53,3,53,741,8,53,1,53,3,53,744,8,53,
3,53,746,8,53,1,54,1,54,1,54,1,54,5,54,752,8,54,10,54,12,54,755,9,54,1,54,
1,54,1,55,1,55,1,56,3,56,762,8,56,1,56,1,56,1,57,1,57,1,57,3,57,769,8,57,
1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,3,60,779,8,60,1,60,1,60,1,60,3,60,
784,8,60,1,60,1,60,1,60,1,60,3,60,790,8,60,1,61,1,61,1,61,1,61,1,61,1,61,
3,61,798,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,809,8,61,
1,61,1,61,3,61,813,8,61,1,62,1,62,1,63,1,63,1,63,3,63,820,8,63,3,63,822,
8,63,1,64,1,64,1,64,1,64,1,64,3,64,829,8,64,1,64,1,64,1,64,1,64,1,64,1,64,
1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,844,8,64,1,64,1,64,1,64,1,64,1,64,
3,64,851,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
3,64,865,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,877,
8,64,1,64,1,64,1,64,1,64,3,64,883,8,64,1,64,1,64,1,64,4,64,888,8,64,11,64,
12,64,889,1,64,3,64,893,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,927,8,64,1,64,1,64,1,64,
1,64,1,64,1,64,5,64,935,8,64,10,64,12,64,938,9,64,1,65,1,65,1,65,1,65,1,
65,3,65,945,8,65,1,65,1,65,1,65,1,65,3,65,951,8,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,1,65,4,65,975,8,65,11,65,12,65,976,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1008,8,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,3,65,1028,8,65,1,65,1,65,1,65,1,65,3,65,1034,8,65,1,65,1,65,3,65,1038,
8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1065,8,65,
1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1077,8,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1090,8,65,1,65,1,65,
3,65,1094,8,65,1,65,1,65,3,65,1098,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,1,65,1,65,1,65,3,65,1126,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
1,65,1,65,3,65,1180,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1190,
8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1202,8,65,1,
65,1,65,3,65,1206,8,65,1,66,1,66,1,67,1,67,1,67,1,67,1,67,3,67,1215,8,67,
1,67,1,67,3,67,1219,8,67,1,67,1,67,1,67,1,67,3,67,1225,8,67,1,67,1,67,1,
67,1,67,3,67,1231,8,67,1,67,1,67,3,67,1235,8,67,1,67,1,67,1,68,1,68,3,68,
1241,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1252,8,69,1,
69,1,69,1,69,1,69,3,69,1258,8,69,3,69,1260,8,69,1,69,1,69,1,70,1,70,1,71,
1,71,1,72,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,75,1,76,1,
76,3,76,1282,8,76,1,77,1,77,1,77,5,77,1287,8,77,10,77,12,77,1290,9,77,1,
78,1,78,3,78,1294,8,78,1,79,3,79,1297,8,79,1,79,1,79,3,79,1301,8,79,1,80,
1,80,1,80,3,80,1306,8,80,1,80,1,80,1,80,1,80,1,80,3,80,1313,8,80,1,80,1,
80,3,80,1317,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
1329,8,81,1,81,1,81,1,81,3,81,1334,8,81,1,82,1,82,1,82,1,82,1,82,1,82,3,
82,1342,8,82,1,82,3,82,1345,8,82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,
1,86,1,86,1,86,1,86,3,86,1359,8,86,1,87,3,87,1362,8,87,1,87,1,87,3,87,1366,
8,87,1,87,5,87,1369,8,87,10,87,12,87,1372,9,87,1,88,1,88,1,88,3,88,1377,
8,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1390,8,
88,1,88,1,88,1,88,1,88,1,88,3,88,1397,8,88,1,88,1,88,1,88,1,88,3,88,1403,
8,88,1,88,1,88,1,88,1,88,3,88,1409,8,88,1,88,1,88,1,88,1,88,1,88,1,88,3,
88,1417,8,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,
88,1445,8,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1453,8,88,1,88,1,88,3,88,
1457,8,88,1,88,1,88,3,88,1461,8,88,1,88,1,88,3,88,1465,8,88,1,89,1,89,1,
89,3,89,1470,8,89,1,90,3,90,1473,8,90,1,90,1,90,1,91,1,91,3,91,1479,8,91,
1,92,1,92,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,95,1,95,1,95,5,95,1493,8,
95,10,95,12,95,1496,9,95,1,96,1,96,1,96,1,96,1,97,1,97,3,97,1504,8,97,1,
98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,3,100,1515,8,100,1,101,1,101,
3,101,1519,8,101,1,101,1,101,3,101,1523,8,101,1,102,1,102,1,102,1,102,1,
102,1,102,3,102,1531,8,102,1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,
5,104,1541,8,104,10,104,12,104,1544,9,104,1,105,1,105,3,105,1548,8,105,1,
105,1,105,3,105,1552,8,105,1,105,3,105,1555,8,105,1,105,1,105,3,105,1559,
8,105,1,105,1,105,3,105,1563,8,105,1,105,1,105,3,105,1567,8,105,1,105,1,
105,1,105,3,105,1572,8,105,1,105,1,105,3,105,1576,8,105,1,105,1,105,3,105,
1580,8,105,1,105,1,105,1,105,1,105,3,105,1586,8,105,3,105,1588,8,105,1,106,
1,106,3,106,1592,8,106,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,1,
109,1,109,3,109,1604,8,109,1,109,1,109,3,109,1608,8,109,1,110,1,110,3,110,
1612,8,110,1,110,1,110,3,110,1616,8,110,1,111,1,111,3,111,1620,8,111,1,112,
1,112,1,112,3,112,1625,8,112,1,113,1,113,3,113,1629,8,113,1,114,1,114,1,
114,3,114,1634,8,114,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1642,8,115,
1,115,1,115,1,115,1,115,3,115,1648,8,115,3,115,1650,8,115,1,116,1,116,1,
116,1,116,1,117,1,117,1,117,3,117,1659,8,117,1,118,1,118,1,118,3,118,1664,
8,118,3,118,1666,8,118,1,119,1,119,1,119,3,119,1671,8,119,1,119,1,119,1,
120,1,120,1,121,1,121,1,122,1,122,3,122,1681,8,122,1,123,1,123,1,123,1,123,
1,123,3,123,1688,8,123,1,124,1,124,1,124,5,124,1693,8,124,10,124,12,124,
1696,9,124,1,125,1,125,1,126,1,126,1,126,3,126,1703,8,126,3,126,1705,8,126,
1,126,1,126,1,126,3,126,1710,8,126,1,127,1,127,1,127,3,127,1715,8,127,1,
128,1,128,1,128,1,129,1,129,1,129,1,130,1,130,1,130,1,131,1,131,1,131,1,
131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,
131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,5,
131,1753,8,131,10,131,12,131,1756,9,131,1,132,1,132,1,132,1,132,1,132,3,
132,1763,8,132,1,132,1,132,1,133,1,133,3,133,1769,8,133,1,134,1,134,3,134,
1773,8,134,1,135,1,135,1,135,1,135,1,135,3,135,1780,8,135,1,135,1,135,1,
135,1,135,1,135,3,135,1787,8,135,3,135,1789,8,135,1,136,1,136,1,136,3,136,
1794,8,136,1,137,1,137,1,137,1,137,1,137,3,137,1801,8,137,1,138,1,138,1,
138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,1813,8,138,1,138,1,138,
1,138,3,138,1818,8,138,3,138,1820,8,138,1,139,1,139,1,140,1,140,1,141,1,
141,3,141,1828,8,141,1,142,1,142,1,143,1,143,1,143,0,4,48,50,128,262,144,
0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
280,282,284,286,0,44,1,0,10,11,3,0,232,232,632,632,646,646,2,0,29,29,69,
69,2,0,32,32,434,434,2,0,64,64,70,70,2,0,12,12,14,19,2,0,35,35,421,421,2,
0,3,5,49,49,2,0,316,316,518,518,2,0,151,151,285,285,2,0,12,12,71,71,2,0,
64,64,193,193,2,0,1,1,411,411,2,0,20,21,26,26,2,0,59,59,594,594,1,0,166,
167,1,0,620,621,4,0,165,165,168,168,619,619,622,622,2,0,3,5,50,50,3,0,3,
5,50,50,52,53,1,0,12,13,1,0,50,51,2,0,3,5,52,53,2,0,232,232,632,632,2,0,
48,48,416,416,2,0,89,90,92,92,2,0,72,72,184,184,9,0,173,173,275,275,379,
379,384,384,391,391,469,469,532,532,675,675,691,691,5,0,169,172,272,274,
382,383,531,531,690,690,2,0,1,1,25,25,3,0,22,24,194,194,390,390,1,0,20,21,
1,0,27,28,2,0,783,783,785,785,54,0,56,56,66,66,73,73,81,81,83,83,100,101,
112,112,114,114,119,119,128,128,130,130,143,143,174,174,196,196,208,208,
242,243,247,247,256,256,265,265,268,268,270,270,291,291,311,311,413,413,
427,427,430,430,438,438,441,441,445,445,453,453,455,455,457,457,492,492,
495,495,508,508,510,510,519,519,528,528,533,533,540,540,549,549,551,551,
555,556,579,579,588,588,633,633,642,643,651,651,683,683,686,686,694,694,
696,697,712,712,755,758,153,0,57,57,59,63,67,67,70,70,75,80,87,87,91,91,
94,96,98,98,104,104,107,108,110,111,116,118,120,121,123,124,126,127,129,
129,131,135,137,138,140,142,144,144,146,146,149,149,154,154,159,159,163,
165,168,168,173,173,179,180,182,182,186,186,188,192,199,201,205,205,207,
207,209,209,211,215,217,218,220,220,225,225,228,230,233,234,237,240,248,
248,250,250,254,254,257,260,262,262,266,266,271,271,275,276,279,279,281,
281,284,284,289,290,295,295,299,300,302,303,306,306,308,308,312,312,314,
314,317,318,323,324,326,326,328,328,330,331,338,338,340,356,358,361,363,
367,369,370,375,379,381,381,384,385,387,387,389,389,391,399,402,403,405,
408,414,414,417,417,419,419,421,422,424,424,439,440,442,444,446,452,458,
459,461,461,464,466,469,471,474,474,478,482,485,489,494,494,496,496,500,
506,512,514,516,516,520,522,524,525,527,527,529,530,532,532,537,539,545,
545,550,550,552,552,554,554,557,558,564,566,568,569,571,571,574,574,576,
576,578,578,580,583,589,589,592,597,601,604,607,608,611,614,616,617,619,
622,628,629,634,640,646,646,649,649,653,655,663,663,666,666,671,671,673,
676,682,682,685,685,687,688,691,691,699,699,704,706,709,711,715,715,717,
717,724,725,728,728,730,730,732,733,737,743,746,747,751,752,754,754,759,
760,762,763,5,0,152,152,252,252,280,280,523,523,526,526,6,0,221,221,226,
226,426,426,601,601,661,661,681,681,5,0,260,260,326,326,539,539,693,693,
708,708,9,0,219,219,236,236,409,409,463,463,467,467,491,491,499,499,601,
601,744,744,158,0,56,57,59,63,66,66,70,70,75,75,77,81,87,87,91,91,94,96,
98,98,104,104,107,108,110,111,116,121,123,124,126,127,129,129,131,135,137,
138,140,142,144,144,149,149,154,154,159,159,163,165,168,168,173,173,179,
180,182,182,188,192,199,201,205,205,207,207,209,209,211,215,217,218,220,
221,225,226,228,230,233,234,237,240,247,248,250,250,254,254,256,259,262,
262,266,266,270,271,275,276,279,279,281,281,284,284,289,290,295,295,299,
300,302,303,306,306,308,308,312,312,314,314,317,318,323,324,328,328,330,
331,338,338,340,356,358,361,363,366,369,370,375,379,381,381,384,385,387,
387,389,389,391,399,402,403,405,408,414,414,417,417,419,419,421,421,424,
424,426,427,430,430,438,444,446,453,458,459,461,461,464,466,469,471,474,
474,478,479,481,482,485,489,492,492,494,494,496,496,500,506,510,510,512,
514,516,516,520,522,524,525,527,527,529,530,532,533,537,538,540,540,545,
545,550,550,552,552,554,558,564,566,568,568,571,571,574,574,576,576,578,
578,580,583,589,589,592,597,602,604,607,608,611,614,616,617,619,622,628,
629,634,635,637,640,646,646,649,649,651,651,653,655,661,661,663,663,666,
666,671,671,673,676,681,683,685,685,687,688,691,691,694,697,699,699,704,
706,709,710,715,715,717,717,724,725,728,728,730,730,732,733,737,743,746,
748,750,760,762,765,767,767,770,773,4,0,619,619,622,622,766,766,768,779,
3,0,222,222,547,547,749,749,32,0,73,73,83,83,100,101,112,112,114,114,128,
128,130,130,143,143,174,174,196,196,208,208,242,243,265,265,268,268,280,
280,291,291,311,311,413,413,455,455,457,457,495,495,508,508,519,519,528,
528,549,549,551,551,579,579,588,588,633,633,642,643,686,686,712,712,2046,
0,301,1,0,0,0,2,303,1,0,0,0,4,311,1,0,0,0,6,321,1,0,0,0,8,344,1,0,0,0,10,
346,1,0,0,0,12,348,1,0,0,0,14,358,1,0,0,0,16,362,1,0,0,0,18,364,1,0,0,0,
20,373,1,0,0,0,22,384,1,0,0,0,24,389,1,0,0,0,26,391,1,0,0,0,28,399,1,0,0,
0,30,403,1,0,0,0,32,411,1,0,0,0,34,419,1,0,0,0,36,423,1,0,0,0,38,425,1,0,
0,0,40,442,1,0,0,0,42,458,1,0,0,0,44,478,1,0,0,0,46,492,1,0,0,0,48,505,1,
0,0,0,50,521,1,0,0,0,52,544,1,0,0,0,54,546,1,0,0,0,56,548,1,0,0,0,58,560,
1,0,0,0,60,567,1,0,0,0,62,570,1,0,0,0,64,577,1,0,0,0,66,579,1,0,0,0,68,583,
1,0,0,0,70,585,1,0,0,0,72,599,1,0,0,0,74,609,1,0,0,0,76,611,1,0,0,0,78,614,
1,0,0,0,80,617,1,0,0,0,82,622,1,0,0,0,84,639,1,0,0,0,86,647,1,0,0,0,88,673,
1,0,0,0,90,686,1,0,0,0,92,693,1,0,0,0,94,695,1,0,0,0,96,705,1,0,0,0,98,707,
1,0,0,0,100,711,1,0,0,0,102,718,1,0,0,0,104,722,1,0,0,0,106,745,1,0,0,0,
108,747,1,0,0,0,110,758,1,0,0,0,112,761,1,0,0,0,114,765,1,0,0,0,116,772,
1,0,0,0,118,774,1,0,0,0,120,776,1,0,0,0,122,812,1,0,0,0,124,814,1,0,0,0,
126,821,1,0,0,0,128,926,1,0,0,0,130,1205,1,0,0,0,132,1207,1,0,0,0,134,1209,
1,0,0,0,136,1238,1,0,0,0,138,1244,1,0,0,0,140,1263,1,0,0,0,142,1265,1,0,
0,0,144,1267,1,0,0,0,146,1271,1,0,0,0,148,1273,1,0,0,0,150,1277,1,0,0,0,
152,1279,1,0,0,0,154,1283,1,0,0,0,156,1291,1,0,0,0,158,1296,1,0,0,0,160,
1316,1,0,0,0,162,1333,1,0,0,0,164,1344,1,0,0,0,166,1346,1,0,0,0,168,1348,
1,0,0,0,170,1350,1,0,0,0,172,1358,1,0,0,0,174,1365,1,0,0,0,176,1464,1,0,
0,0,178,1469,1,0,0,0,180,1472,1,0,0,0,182,1478,1,0,0,0,184,1480,1,0,0,0,
186,1482,1,0,0,0,188,1486,1,0,0,0,190,1489,1,0,0,0,192,1497,1,0,0,0,194,
1501,1,0,0,0,196,1505,1,0,0,0,198,1507,1,0,0,0,200,1514,1,0,0,0,202,1516,
1,0,0,0,204,1530,1,0,0,0,206,1532,1,0,0,0,208,1537,1,0,0,0,210,1587,1,0,
0,0,212,1591,1,0,0,0,214,1593,1,0,0,0,216,1595,1,0,0,0,218,1607,1,0,0,0,
220,1615,1,0,0,0,222,1619,1,0,0,0,224,1624,1,0,0,0,226,1628,1,0,0,0,228,
1633,1,0,0,0,230,1649,1,0,0,0,232,1651,1,0,0,0,234,1658,1,0,0,0,236,1665,
1,0,0,0,238,1667,1,0,0,0,240,1674,1,0,0,0,242,1676,1,0,0,0,244,1680,1,0,
0,0,246,1687,1,0,0,0,248,1689,1,0,0,0,250,1697,1,0,0,0,252,1709,1,0,0,0,
254,1714,1,0,0,0,256,1716,1,0,0,0,258,1719,1,0,0,0,260,1722,1,0,0,0,262,
1725,1,0,0,0,264,1757,1,0,0,0,266,1768,1,0,0,0,268,1772,1,0,0,0,270,1788,
1,0,0,0,272,1793,1,0,0,0,274,1800,1,0,0,0,276,1819,1,0,0,0,278,1821,1,0,
0,0,280,1823,1,0,0,0,282,1827,1,0,0,0,284,1829,1,0,0,0,286,1831,1,0,0,0,
288,290,3,2,1,0,289,291,5,0,0,1,290,289,1,0,0,0,290,291,1,0,0,0,291,302,
1,0,0,0,292,298,3,36,18,0,293,295,5,36,0,0,294,296,5,0,0,1,295,294,1,0,0,
0,295,296,1,0,0,0,296,299,1,0,0,0,297,299,5,0,0,1,298,293,1,0,0,0,298,297,
1,0,0,0,299,302,1,0,0,0,300,302,5,0,0,1,301,288,1,0,0,0,301,292,1,0,0,0,
301,300,1,0,0,0,302,1,1,0,0,0,303,304,5,8,0,0,304,306,5,38,0,0,305,307,3,
34,17,0,306,305,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,3,14,7,0,
309,310,5,39,0,0,310,3,1,0,0,0,311,312,3,268,134,0,312,313,3,150,75,0,313,
314,5,6,0,0,314,316,5,38,0,0,315,317,3,34,17,0,316,315,1,0,0,0,316,317,1,
0,0,0,317,318,1,0,0,0,318,319,3,14,7,0,319,320,5,39,0,0,320,5,1,0,0,0,321,
322,3,268,134,0,322,323,3,150,75,0,323,324,5,7,0,0,324,325,5,38,0,0,325,
327,3,8,4,0,326,328,3,12,6,0,327,326,1,0,0,0,327,328,1,0,0,0,328,330,1,0,
0,0,329,331,3,72,36,0,330,329,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,
334,3,76,38,0,333,332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,337,3,
10,5,0,336,338,3,192,96,0,337,336,1,0,0,0,337,338,1,0,0,0,338,340,1,0,0,
0,339,341,3,60,30,0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,
343,5,39,0,0,343,7,1,0,0,0,344,345,3,68,34,0,345,9,1,0,0,0,346,347,3,44,
22,0,347,11,1,0,0,0,348,349,5,238,0,0,349,350,3,48,24,0,350,13,1,0,0,0,351,
353,3,16,8,0,352,351,1,0,0,0,353,354,1,0,0,0,354,352,1,0,0,0,354,355,1,0,
0,0,355,359,1,0,0,0,356,359,3,18,9,0,357,359,3,30,15,0,358,352,1,0,0,0,358,
356,1,0,0,0,358,357,1,0,0,0,359,15,1,0,0,0,360,363,3,4,2,0,361,363,3,6,3,
0,362,360,1,0,0,0,362,361,1,0,0,0,363,17,1,0,0,0,364,365,3,16,8,0,365,370,
3,16,8,0,366,369,3,16,8,0,367,369,3,20,10,0,368,366,1,0,0,0,368,367,1,0,
0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,19,1,0,0,0,372,370,
1,0,0,0,373,374,3,268,134,0,374,375,5,43,0,0,375,376,5,38,0,0,376,377,3,
22,11,0,377,378,5,39,0,0,378,379,5,43,0,0,379,380,3,268,134,0,380,21,1,0,
0,0,381,382,3,24,12,0,382,383,5,35,0,0,383,385,1,0,0,0,384,381,1,0,0,0,384,
385,1,0,0,0,385,387,1,0,0,0,386,388,3,26,13,0,387,386,1,0,0,0,387,388,1,
0,0,0,388,23,1,0,0,0,389,390,7,0,0,0,390,25,1,0,0,0,391,396,3,28,14,0,392,
393,5,35,0,0,393,395,3,28,14,0,394,392,1,0,0,0,395,398,1,0,0,0,396,394,1,
0,0,0,396,397,1,0,0,0,397,27,1,0,0,0,398,396,1,0,0,0,399,400,3,268,134,0,
400,401,3,150,75,0,401,402,3,268,134,0,402,29,1,0,0,0,403,405,3,16,8,0,404,
406,3,16,8,0,405,404,1,0,0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,408,1,0,
0,0,408,409,1,0,0,0,409,410,3,32,16,0,410,31,1,0,0,0,411,412,5,644,0,0,412,
413,3,116,58,0,413,415,3,268,134,0,414,416,3,268,134,0,415,414,1,0,0,0,416,
417,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,33,1,0,0,0,419,420,5,786,
0,0,420,35,1,0,0,0,421,424,3,42,21,0,422,424,3,38,19,0,423,421,1,0,0,0,423,
422,1,0,0,0,424,37,1,0,0,0,425,428,5,38,0,0,426,429,3,38,19,0,427,429,3,
42,21,0,428,426,1,0,0,0,428,427,1,0,0,0,429,430,1,0,0,0,430,431,5,39,0,0,
431,39,1,0,0,0,432,443,3,66,33,0,433,434,3,38,19,0,434,436,5,644,0,0,435,
437,3,116,58,0,436,435,1,0,0,0,436,437,1,0,0,0,437,440,1,0,0,0,438,441,3,
66,33,0,439,441,3,38,19,0,440,438,1,0,0,0,440,439,1,0,0,0,441,443,1,0,0,
0,442,432,1,0,0,0,442,433,1,0,0,0,443,454,1,0,0,0,444,446,5,644,0,0,445,
447,3,116,58,0,446,445,1,0,0,0,446,447,1,0,0,0,447,450,1,0,0,0,448,451,3,
66,33,0,449,451,3,38,19,0,450,448,1,0,0,0,450,449,1,0,0,0,451,453,1,0,0,
0,452,444,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,41,
1,0,0,0,456,454,1,0,0,0,457,459,3,56,28,0,458,457,1,0,0,0,458,459,1,0,0,
0,459,474,1,0,0,0,460,462,3,40,20,0,461,463,3,192,96,0,462,461,1,0,0,0,462,
463,1,0,0,0,463,465,1,0,0,0,464,466,3,60,30,0,465,464,1,0,0,0,465,466,1,
0,0,0,466,475,1,0,0,0,467,469,3,38,19,0,468,470,3,192,96,0,469,468,1,0,0,
0,469,470,1,0,0,0,470,472,1,0,0,0,471,473,3,60,30,0,472,471,1,0,0,0,472,
473,1,0,0,0,473,475,1,0,0,0,474,460,1,0,0,0,474,467,1,0,0,0,475,43,1,0,0,
0,476,479,3,46,23,0,477,479,5,22,0,0,478,476,1,0,0,0,478,477,1,0,0,0,479,
484,1,0,0,0,480,481,5,35,0,0,481,483,3,46,23,0,482,480,1,0,0,0,483,486,1,
0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,45,1,0,0,0,486,484,1,0,0,0,487,
493,3,264,132,0,488,490,3,48,24,0,489,491,3,158,79,0,490,489,1,0,0,0,490,
491,1,0,0,0,491,493,1,0,0,0,492,487,1,0,0,0,492,488,1,0,0,0,493,47,1,0,0,
0,494,495,6,24,-1,0,495,501,3,50,25,0,496,498,5,301,0,0,497,499,3,118,59,
0,498,497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,502,7,1,0,0,501,496,
1,0,0,0,501,502,1,0,0,0,502,506,1,0,0,0,503,504,5,411,0,0,504,506,3,48,24,
4,505,494,1,0,0,0,505,503,1,0,0,0,506,518,1,0,0,0,507,508,10,3,0,0,508,509,
7,2,0,0,509,517,3,48,24,4,510,511,10,2,0,0,511,512,5,689,0,0,512,517,3,48,
24,3,513,514,10,1,0,0,514,515,7,3,0,0,515,517,3,48,24,2,516,507,1,0,0,0,
516,510,1,0,0,0,516,513,1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,519,
1,0,0,0,519,49,1,0,0,0,520,518,1,0,0,0,521,522,6,25,-1,0,522,523,3,120,60,
0,523,541,1,0,0,0,524,525,10,3,0,0,525,527,5,301,0,0,526,528,3,118,59,0,
527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,540,5,416,0,0,530,531,
10,2,0,0,531,532,3,52,26,0,532,533,3,120,60,0,533,540,1,0,0,0,534,535,10,
1,0,0,535,536,3,52,26,0,536,537,7,4,0,0,537,538,3,54,27,0,538,540,1,0,0,
0,539,524,1,0,0,0,539,530,1,0,0,0,539,534,1,0,0,0,540,543,1,0,0,0,541,539,
1,0,0,0,541,542,1,0,0,0,542,51,1,0,0,0,543,541,1,0,0,0,544,545,7,5,0,0,545,
53,1,0,0,0,546,547,3,38,19,0,547,55,1,0,0,0,548,550,5,680,0,0,549,551,5,
700,0,0,550,549,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,557,3,58,29,
0,553,554,5,35,0,0,554,556,3,58,29,0,555,553,1,0,0,0,556,559,1,0,0,0,557,
555,1,0,0,0,557,558,1,0,0,0,558,57,1,0,0,0,559,557,1,0,0,0,560,562,3,268,
134,0,561,563,3,108,54,0,562,561,1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,
564,565,5,71,0,0,565,566,3,54,27,0,566,59,1,0,0,0,567,568,5,320,0,0,568,
569,3,62,31,0,569,61,1,0,0,0,570,573,3,64,32,0,571,572,7,6,0,0,572,574,3,
64,32,0,573,571,1,0,0,0,573,574,1,0,0,0,574,63,1,0,0,0,575,578,3,268,134,
0,576,578,7,7,0,0,577,575,1,0,0,0,577,576,1,0,0,0,578,65,1,0,0,0,579,580,
3,70,35,0,580,67,1,0,0,0,581,584,3,152,76,0,582,584,3,254,127,0,583,581,
1,0,0,0,583,582,1,0,0,0,584,69,1,0,0,0,585,586,5,534,0,0,586,588,3,44,22,
0,587,589,3,80,40,0,588,587,1,0,0,0,588,589,1,0,0,0,589,591,1,0,0,0,590,
592,3,78,39,0,591,590,1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,595,3,
72,36,0,594,593,1,0,0,0,594,595,1,0,0,0,595,597,1,0,0,0,596,598,3,76,38,
0,597,596,1,0,0,0,597,598,1,0,0,0,598,71,1,0,0,0,599,600,5,263,0,0,600,601,
5,99,0,0,601,603,3,190,95,0,602,604,3,74,37,0,603,602,1,0,0,0,603,604,1,
0,0,0,604,73,1,0,0,0,605,606,5,680,0,0,606,610,5,520,0,0,607,608,5,680,0,
0,608,610,5,152,0,0,609,605,1,0,0,0,609,607,1,0,0,0,610,75,1,0,0,0,611,612,
5,267,0,0,612,613,3,48,24,0,613,77,1,0,0,0,614,615,5,678,0,0,615,616,3,48,
24,0,616,79,1,0,0,0,617,620,5,249,0,0,618,621,5,198,0,0,619,621,3,82,41,
0,620,618,1,0,0,0,620,619,1,0,0,0,621,81,1,0,0,0,622,627,3,84,42,0,623,624,
5,35,0,0,624,626,3,84,42,0,625,623,1,0,0,0,626,629,1,0,0,0,627,625,1,0,0,
0,627,628,1,0,0,0,628,83,1,0,0,0,629,627,1,0,0,0,630,640,3,96,48,0,631,634,
5,40,0,0,632,635,3,268,134,0,633,635,5,767,0,0,634,632,1,0,0,0,634,633,1,
0,0,0,635,636,1,0,0,0,636,637,3,86,43,0,637,638,5,41,0,0,638,640,1,0,0,0,
639,630,1,0,0,0,639,631,1,0,0,0,640,644,1,0,0,0,641,643,3,88,44,0,642,641,
1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,85,1,0,0,0,646,
644,1,0,0,0,647,651,3,96,48,0,648,650,3,88,44,0,649,648,1,0,0,0,650,653,
1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,87,1,0,0,0,653,651,1,0,0,0,654,
655,3,92,46,0,655,660,3,84,42,0,656,657,5,423,0,0,657,661,3,48,24,0,658,
659,5,657,0,0,659,661,3,102,51,0,660,656,1,0,0,0,660,658,1,0,0,0,660,661,
1,0,0,0,661,674,1,0,0,0,662,663,3,94,47,0,663,668,3,84,42,0,664,665,5,423,
0,0,665,669,3,48,24,0,666,667,5,657,0,0,667,669,3,102,51,0,668,664,1,0,0,
0,668,666,1,0,0,0,669,674,1,0,0,0,670,671,3,90,45,0,671,672,3,96,48,0,672,
674,1,0,0,0,673,654,1,0,0,0,673,662,1,0,0,0,673,670,1,0,0,0,674,89,1,0,0,
0,675,677,5,400,0,0,676,678,5,285,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,
679,1,0,0,0,679,687,5,305,0,0,680,681,5,400,0,0,681,683,7,8,0,0,682,684,
5,435,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,687,5,305,
0,0,686,675,1,0,0,0,686,680,1,0,0,0,687,91,1,0,0,0,688,690,7,9,0,0,689,688,
1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,694,5,305,0,0,692,694,5,591,
0,0,693,689,1,0,0,0,693,692,1,0,0,0,694,93,1,0,0,0,695,697,7,8,0,0,696,698,
5,435,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,700,5,305,
0,0,700,95,1,0,0,0,701,706,3,98,49,0,702,706,3,100,50,0,703,706,3,106,53,
0,704,706,3,114,57,0,705,701,1,0,0,0,705,702,1,0,0,0,705,703,1,0,0,0,705,
704,1,0,0,0,706,97,1,0,0,0,707,709,3,68,34,0,708,710,3,112,56,0,709,708,
1,0,0,0,709,710,1,0,0,0,710,99,1,0,0,0,711,714,5,38,0,0,712,715,3,98,49,
0,713,715,3,100,50,0,714,712,1,0,0,0,714,713,1,0,0,0,715,716,1,0,0,0,716,
717,5,39,0,0,717,101,1,0,0,0,718,719,5,38,0,0,719,720,3,104,52,0,720,721,
5,39,0,0,721,103,1,0,0,0,722,727,3,268,134,0,723,724,5,35,0,0,724,726,3,
268,134,0,725,723,1,0,0,0,726,729,1,0,0,0,727,725,1,0,0,0,727,728,1,0,0,
0,728,105,1,0,0,0,729,727,1,0,0,0,730,732,3,54,27,0,731,733,3,112,56,0,732,
731,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,736,3,108,54,0,735,734,1,
0,0,0,735,736,1,0,0,0,736,746,1,0,0,0,737,738,5,761,0,0,738,740,3,54,27,
0,739,741,3,112,56,0,740,739,1,0,0,0,740,741,1,0,0,0,741,743,1,0,0,0,742,
744,3,108,54,0,743,742,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,730,1,
0,0,0,745,737,1,0,0,0,746,107,1,0,0,0,747,748,5,38,0,0,748,753,3,110,55,
0,749,750,5,35,0,0,750,752,3,110,55,0,751,749,1,0,0,0,752,755,1,0,0,0,753,
751,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,755,753,1,0,0,0,756,757,5,39,
0,0,757,109,1,0,0,0,758,759,3,268,134,0,759,111,1,0,0,0,760,762,7,10,0,0,
761,760,1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,764,3,268,134,0,764,
113,1,0,0,0,765,768,5,38,0,0,766,769,3,82,41,0,767,769,3,114,57,0,768,766,
1,0,0,0,768,767,1,0,0,0,769,770,1,0,0,0,770,771,5,39,0,0,771,115,1,0,0,0,
772,773,7,11,0,0,773,117,1,0,0,0,774,775,7,12,0,0,775,119,1,0,0,0,776,789,
3,262,131,0,777,779,3,118,59,0,778,777,1,0,0,0,778,779,1,0,0,0,779,780,1,
0,0,0,780,790,3,122,61,0,781,783,5,768,0,0,782,784,5,703,0,0,783,782,1,0,
0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,790,3,198,99,0,786,787,5,557,0,0,
787,788,5,319,0,0,788,790,3,262,131,0,789,778,1,0,0,0,789,781,1,0,0,0,789,
786,1,0,0,0,789,790,1,0,0,0,790,121,1,0,0,0,791,797,5,296,0,0,792,798,3,
54,27,0,793,794,5,38,0,0,794,795,3,208,104,0,795,796,5,39,0,0,796,798,1,
0,0,0,797,792,1,0,0,0,797,793,1,0,0,0,798,813,1,0,0,0,799,800,5,84,0,0,800,
801,3,262,131,0,801,802,5,69,0,0,802,803,3,120,60,0,803,813,1,0,0,0,804,
805,5,319,0,0,805,808,3,128,64,0,806,807,5,217,0,0,807,809,3,128,64,0,808,
806,1,0,0,0,808,809,1,0,0,0,809,813,1,0,0,0,810,811,5,484,0,0,811,813,3,
262,131,0,812,791,1,0,0,0,812,799,1,0,0,0,812,804,1,0,0,0,812,810,1,0,0,
0,813,123,1,0,0,0,814,815,3,126,63,0,815,125,1,0,0,0,816,822,3,254,127,0,
817,819,3,152,76,0,818,820,3,254,127,0,819,818,1,0,0,0,819,820,1,0,0,0,820,
822,1,0,0,0,821,816,1,0,0,0,821,817,1,0,0,0,822,127,1,0,0,0,823,824,6,64,
-1,0,824,828,3,182,91,0,825,826,3,150,75,0,826,827,3,48,24,0,827,829,1,0,
0,0,828,825,1,0,0,0,828,829,1,0,0,0,829,927,1,0,0,0,830,927,3,124,62,0,831,
927,3,130,65,0,832,927,3,160,80,0,833,927,3,164,82,0,834,927,5,49,0,0,835,
927,3,176,88,0,836,927,3,206,103,0,837,838,7,13,0,0,838,927,3,128,64,14,
839,840,3,250,125,0,840,841,3,128,64,13,841,927,1,0,0,0,842,844,5,526,0,
0,843,842,1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,846,5,38,0,0,846,847,
3,208,104,0,847,848,5,39,0,0,848,927,1,0,0,0,849,851,5,223,0,0,850,849,1,
0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,927,3,54,27,0,853,854,5,40,0,0,
854,855,3,268,134,0,855,856,3,48,24,0,856,857,5,41,0,0,857,927,1,0,0,0,858,
859,5,362,0,0,859,860,3,246,123,0,860,861,5,61,0,0,861,862,5,38,0,0,862,
864,3,262,131,0,863,865,3,162,81,0,864,863,1,0,0,0,864,865,1,0,0,0,865,866,
1,0,0,0,866,867,5,39,0,0,867,927,1,0,0,0,868,869,5,86,0,0,869,927,3,128,
64,8,870,871,5,106,0,0,871,872,5,38,0,0,872,873,3,48,24,0,873,874,5,71,0,
0,874,876,3,210,105,0,875,877,3,184,92,0,876,875,1,0,0,0,876,877,1,0,0,0,
877,878,1,0,0,0,878,879,5,39,0,0,879,927,1,0,0,0,880,882,5,105,0,0,881,883,
3,48,24,0,882,881,1,0,0,0,882,883,1,0,0,0,883,887,1,0,0,0,884,885,3,256,
128,0,885,886,3,258,129,0,886,888,1,0,0,0,887,884,1,0,0,0,888,889,1,0,0,
0,889,887,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,893,3,260,130,0,892,
891,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,895,5,208,0,0,895,927,1,
0,0,0,896,897,5,147,0,0,897,898,5,38,0,0,898,899,3,48,24,0,899,900,5,35,
0,0,900,901,3,210,105,0,901,902,5,39,0,0,902,927,1,0,0,0,903,904,5,147,0,
0,904,905,5,38,0,0,905,906,3,48,24,0,906,907,5,657,0,0,907,908,3,224,112,
0,908,909,5,39,0,0,909,927,1,0,0,0,910,911,5,178,0,0,911,912,5,38,0,0,912,
913,3,252,126,0,913,914,5,39,0,0,914,927,1,0,0,0,915,916,5,662,0,0,916,917,
5,38,0,0,917,918,3,252,126,0,918,919,5,39,0,0,919,927,1,0,0,0,920,921,5,
292,0,0,921,922,3,48,24,0,922,923,3,244,122,0,923,924,5,20,0,0,924,925,3,
48,24,0,925,927,1,0,0,0,926,823,1,0,0,0,926,830,1,0,0,0,926,831,1,0,0,0,
926,832,1,0,0,0,926,833,1,0,0,0,926,834,1,0,0,0,926,835,1,0,0,0,926,836,
1,0,0,0,926,837,1,0,0,0,926,839,1,0,0,0,926,843,1,0,0,0,926,850,1,0,0,0,
926,853,1,0,0,0,926,858,1,0,0,0,926,868,1,0,0,0,926,870,1,0,0,0,926,880,
1,0,0,0,926,896,1,0,0,0,926,903,1,0,0,0,926,910,1,0,0,0,926,915,1,0,0,0,
926,920,1,0,0,0,927,936,1,0,0,0,928,929,10,15,0,0,929,930,5,2,0,0,930,935,
3,128,64,16,931,932,10,20,0,0,932,933,5,122,0,0,933,935,3,226,113,0,934,
928,1,0,0,0,934,931,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,
0,0,937,129,1,0,0,0,938,936,1,0,0,0,939,940,5,113,0,0,940,941,5,38,0,0,941,
944,3,208,104,0,942,943,5,657,0,0,943,945,3,224,112,0,944,942,1,0,0,0,944,
945,1,0,0,0,945,946,1,0,0,0,946,947,5,39,0,0,947,1206,1,0,0,0,948,950,5,
157,0,0,949,951,3,188,94,0,950,949,1,0,0,0,950,951,1,0,0,0,951,1206,1,0,
0,0,952,953,5,168,0,0,953,1206,3,186,93,0,954,955,5,173,0,0,955,1206,3,186,
93,0,956,957,5,275,0,0,957,1206,3,186,93,0,958,959,5,288,0,0,959,960,5,38,
0,0,960,961,3,48,24,0,961,962,5,35,0,0,962,963,3,48,24,0,963,964,5,35,0,
0,964,965,3,48,24,0,965,966,5,35,0,0,966,967,3,48,24,0,967,968,5,39,0,0,
968,1206,1,0,0,0,969,970,5,292,0,0,970,971,5,38,0,0,971,974,3,48,24,0,972,
973,5,35,0,0,973,975,3,48,24,0,974,972,1,0,0,0,975,976,1,0,0,0,976,974,1,
0,0,0,976,977,1,0,0,0,977,978,1,0,0,0,978,979,5,39,0,0,979,1206,1,0,0,0,
980,981,5,316,0,0,981,982,5,38,0,0,982,983,3,48,24,0,983,984,5,35,0,0,984,
985,3,48,24,0,985,986,5,39,0,0,986,1206,1,0,0,0,987,988,5,384,0,0,988,1206,
3,186,93,0,989,990,5,391,0,0,990,1206,3,186,93,0,991,992,5,518,0,0,992,993,
5,38,0,0,993,994,3,48,24,0,994,995,5,35,0,0,995,996,3,48,24,0,996,997,5,
39,0,0,997,1206,1,0,0,0,998,999,5,532,0,0,999,1206,3,186,93,0,1000,1001,
5,622,0,0,1001,1206,3,186,93,0,1002,1003,5,619,0,0,1003,1004,5,38,0,0,1004,
1007,3,48,24,0,1005,1006,5,35,0,0,1006,1008,3,48,24,0,1007,1005,1,0,0,0,
1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1010,5,39,0,0,1010,1206,1,0,0,0,
1011,1206,3,134,67,0,1012,1013,5,654,0,0,1013,1206,3,188,94,0,1014,1015,
5,662,0,0,1015,1206,3,186,93,0,1016,1017,5,691,0,0,1017,1206,3,186,93,0,
1018,1019,7,14,0,0,1019,1020,5,38,0,0,1020,1021,3,48,24,0,1021,1027,5,35,
0,0,1022,1028,3,48,24,0,1023,1024,5,292,0,0,1024,1025,3,48,24,0,1025,1026,
3,244,122,0,1026,1028,1,0,0,0,1027,1022,1,0,0,0,1027,1023,1,0,0,0,1028,1029,
1,0,0,0,1029,1030,5,39,0,0,1030,1206,1,0,0,0,1031,1033,5,153,0,0,1032,1034,
3,188,94,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1206,1,0,0,0,1035,1037,
5,160,0,0,1036,1038,3,136,68,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,
1206,1,0,0,0,1039,1040,7,15,0,0,1040,1041,5,38,0,0,1041,1042,3,48,24,0,1042,
1043,5,35,0,0,1043,1044,5,292,0,0,1044,1045,3,48,24,0,1045,1046,3,244,122,
0,1046,1047,5,39,0,0,1047,1206,1,0,0,0,1048,1049,5,231,0,0,1049,1050,5,38,
0,0,1050,1051,3,244,122,0,1051,1052,5,249,0,0,1052,1053,3,48,24,0,1053,1054,
5,39,0,0,1054,1206,1,0,0,0,1055,1056,5,259,0,0,1056,1057,5,38,0,0,1057,1058,
3,132,66,0,1058,1059,5,35,0,0,1059,1060,3,48,24,0,1060,1061,5,39,0,0,1061,
1206,1,0,0,0,1062,1064,5,412,0,0,1063,1065,3,136,68,0,1064,1063,1,0,0,0,
1064,1065,1,0,0,0,1065,1206,1,0,0,0,1066,1067,5,454,0,0,1067,1068,5,38,0,
0,1068,1069,3,262,131,0,1069,1070,5,296,0,0,1070,1071,3,48,24,0,1071,1072,
5,39,0,0,1072,1206,1,0,0,0,1073,1206,3,138,69,0,1074,1076,5,605,0,0,1075,
1077,3,136,68,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,1206,1,0,0,0,1078,
1079,7,16,0,0,1079,1080,5,38,0,0,1080,1081,3,242,121,0,1081,1082,5,35,0,
0,1082,1083,3,48,24,0,1083,1084,5,35,0,0,1084,1085,3,48,24,0,1085,1086,5,
39,0,0,1086,1206,1,0,0,0,1087,1089,5,658,0,0,1088,1090,3,188,94,0,1089,1088,
1,0,0,0,1089,1090,1,0,0,0,1090,1206,1,0,0,0,1091,1093,5,660,0,0,1092,1094,
3,136,68,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1206,1,0,0,0,1095,1097,
5,659,0,0,1096,1098,3,136,68,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,
1206,1,0,0,0,1099,1100,5,73,0,0,1100,1206,3,186,93,0,1101,1102,5,112,0,0,
1102,1206,3,186,93,0,1103,1104,5,120,0,0,1104,1206,3,148,74,0,1105,1106,
5,123,0,0,1106,1206,3,186,93,0,1107,1108,5,161,0,0,1108,1206,3,188,94,0,
1109,1110,5,277,0,0,1110,1111,5,38,0,0,1111,1112,3,48,24,0,1112,1113,5,35,
0,0,1113,1114,3,48,24,0,1114,1115,5,35,0,0,1115,1116,3,48,24,0,1116,1117,
5,39,0,0,1117,1206,1,0,0,0,1118,1119,5,247,0,0,1119,1120,5,38,0,0,1120,1121,
3,48,24,0,1121,1122,5,35,0,0,1122,1125,3,48,24,0,1123,1124,5,35,0,0,1124,
1126,3,48,24,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,
1128,5,39,0,0,1128,1206,1,0,0,0,1129,1130,5,379,0,0,1130,1206,3,186,93,0,
1131,1132,5,390,0,0,1132,1133,5,38,0,0,1133,1134,3,48,24,0,1134,1135,5,35,
0,0,1135,1136,3,48,24,0,1136,1137,5,39,0,0,1137,1206,1,0,0,0,1138,1139,5,
422,0,0,1139,1140,5,38,0,0,1140,1141,3,174,87,0,1141,1142,5,39,0,0,1142,
1206,1,0,0,0,1143,1144,5,446,0,0,1144,1206,3,186,93,0,1145,1146,5,469,0,
0,1146,1206,3,186,93,0,1147,1148,5,497,0,0,1148,1149,5,38,0,0,1149,1150,
3,48,24,0,1150,1151,5,35,0,0,1151,1152,3,48,24,0,1152,1153,5,39,0,0,1153,
1206,1,0,0,0,1154,1155,5,498,0,0,1155,1156,5,38,0,0,1156,1157,3,48,24,0,
1157,1158,5,35,0,0,1158,1159,3,48,24,0,1159,1160,5,35,0,0,1160,1161,3,48,
24,0,1161,1162,5,39,0,0,1162,1206,1,0,0,0,1163,1164,5,516,0,0,1164,1206,
3,186,93,0,1165,1166,5,524,0,0,1166,1206,3,188,94,0,1167,1168,5,633,0,0,
1168,1169,5,38,0,0,1169,1170,3,48,24,0,1170,1171,5,35,0,0,1171,1172,3,48,
24,0,1172,1173,5,39,0,0,1173,1206,1,0,0,0,1174,1175,5,675,0,0,1175,1176,
5,38,0,0,1176,1179,3,48,24,0,1177,1178,5,35,0,0,1178,1180,3,48,24,0,1179,
1177,1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,1182,5,39,0,0,1182,
1206,1,0,0,0,1183,1184,5,676,0,0,1184,1185,5,38,0,0,1185,1201,3,48,24,0,
1186,1187,5,71,0,0,1187,1188,5,113,0,0,1188,1190,3,144,72,0,1189,1186,1,
0,0,0,1189,1190,1,0,0,0,1190,1202,1,0,0,0,1191,1192,5,71,0,0,1192,1193,5,
86,0,0,1193,1202,3,144,72,0,1194,1195,5,35,0,0,1195,1196,3,146,73,0,1196,
1197,5,35,0,0,1197,1198,3,146,73,0,1198,1199,5,35,0,0,1199,1200,3,146,73,
0,1200,1202,1,0,0,0,1201,1189,1,0,0,0,1201,1191,1,0,0,0,1201,1194,1,0,0,
0,1202,1203,1,0,0,0,1203,1204,5,39,0,0,1204,1206,1,0,0,0,1205,939,1,0,0,
0,1205,948,1,0,0,0,1205,952,1,0,0,0,1205,954,1,0,0,0,1205,956,1,0,0,0,1205,
958,1,0,0,0,1205,969,1,0,0,0,1205,980,1,0,0,0,1205,987,1,0,0,0,1205,989,
1,0,0,0,1205,991,1,0,0,0,1205,998,1,0,0,0,1205,1000,1,0,0,0,1205,1002,1,
0,0,0,1205,1011,1,0,0,0,1205,1012,1,0,0,0,1205,1014,1,0,0,0,1205,1016,1,
0,0,0,1205,1018,1,0,0,0,1205,1031,1,0,0,0,1205,1035,1,0,0,0,1205,1039,1,
0,0,0,1205,1048,1,0,0,0,1205,1055,1,0,0,0,1205,1062,1,0,0,0,1205,1066,1,
0,0,0,1205,1073,1,0,0,0,1205,1074,1,0,0,0,1205,1078,1,0,0,0,1205,1087,1,
0,0,0,1205,1091,1,0,0,0,1205,1095,1,0,0,0,1205,1099,1,0,0,0,1205,1101,1,
0,0,0,1205,1103,1,0,0,0,1205,1105,1,0,0,0,1205,1107,1,0,0,0,1205,1109,1,
0,0,0,1205,1118,1,0,0,0,1205,1129,1,0,0,0,1205,1131,1,0,0,0,1205,1138,1,
0,0,0,1205,1143,1,0,0,0,1205,1145,1,0,0,0,1205,1147,1,0,0,0,1205,1154,1,
0,0,0,1205,1163,1,0,0,0,1205,1165,1,0,0,0,1205,1167,1,0,0,0,1205,1174,1,
0,0,0,1205,1183,1,0,0,0,1206,131,1,0,0,0,1207,1208,7,17,0,0,1208,133,1,0,
0,0,1209,1210,5,631,0,0,1210,1234,5,38,0,0,1211,1214,3,48,24,0,1212,1213,
5,249,0,0,1213,1215,3,48,24,0,1214,1212,1,0,0,0,1214,1215,1,0,0,0,1215,1235,
1,0,0,0,1216,1218,5,313,0,0,1217,1219,3,48,24,0,1218,1217,1,0,0,0,1218,1219,
1,0,0,0,1219,1220,1,0,0,0,1220,1221,5,249,0,0,1221,1235,3,48,24,0,1222,1224,
5,627,0,0,1223,1225,3,48,24,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,1226,
1,0,0,0,1226,1227,5,249,0,0,1227,1235,3,48,24,0,1228,1230,5,97,0,0,1229,
1231,3,48,24,0,1230,1229,1,0,0,0,1230,1231,1,0,0,0,1231,1232,1,0,0,0,1232,
1233,5,249,0,0,1233,1235,3,48,24,0,1234,1211,1,0,0,0,1234,1216,1,0,0,0,1234,
1222,1,0,0,0,1234,1228,1,0,0,0,1235,1236,1,0,0,0,1236,1237,5,39,0,0,1237,
135,1,0,0,0,1238,1240,5,38,0,0,1239,1241,3,140,70,0,1240,1239,1,0,0,0,1240,
1241,1,0,0,0,1241,1242,1,0,0,0,1242,1243,5,39,0,0,1243,137,1,0,0,0,1244,
1245,5,599,0,0,1245,1246,5,38,0,0,1246,1259,3,48,24,0,1247,1248,5,35,0,0,
1248,1251,3,48,24,0,1249,1250,5,35,0,0,1250,1252,3,48,24,0,1251,1249,1,0,
0,0,1251,1252,1,0,0,0,1252,1260,1,0,0,0,1253,1254,5,249,0,0,1254,1257,3,
48,24,0,1255,1256,5,246,0,0,1256,1258,3,48,24,0,1257,1255,1,0,0,0,1257,1258,
1,0,0,0,1258,1260,1,0,0,0,1259,1247,1,0,0,0,1259,1253,1,0,0,0,1260,1261,
1,0,0,0,1261,1262,5,39,0,0,1262,139,1,0,0,0,1263,1264,5,3,0,0,1264,141,1,
0,0,0,1265,1266,7,18,0,0,1266,143,1,0,0,0,1267,1268,5,38,0,0,1268,1269,3,
142,71,0,1269,1270,5,39,0,0,1270,145,1,0,0,0,1271,1272,7,19,0,0,1272,147,
1,0,0,0,1273,1274,5,38,0,0,1274,1275,3,208,104,0,1275,1276,5,39,0,0,1276,
149,1,0,0,0,1277,1278,7,20,0,0,1278,151,1,0,0,0,1279,1281,3,268,134,0,1280,
1282,3,254,127,0,1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,153,1,0,0,0,1283,
1288,3,156,78,0,1284,1285,5,35,0,0,1285,1287,3,156,78,0,1286,1284,1,0,0,
0,1287,1290,1,0,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,155,1,0,0,0,
1290,1288,1,0,0,0,1291,1293,3,48,24,0,1292,1294,3,158,79,0,1293,1292,1,0,
0,0,1293,1294,1,0,0,0,1294,157,1,0,0,0,1295,1297,5,71,0,0,1296,1295,1,0,
0,0,1296,1297,1,0,0,0,1297,1300,1,0,0,0,1298,1301,3,268,134,0,1299,1301,
3,222,111,0,1300,1298,1,0,0,0,1300,1299,1,0,0,0,1301,159,1,0,0,0,1302,1303,
3,266,133,0,1303,1305,5,38,0,0,1304,1306,3,154,77,0,1305,1304,1,0,0,0,1305,
1306,1,0,0,0,1306,1307,1,0,0,0,1307,1308,5,39,0,0,1308,1317,1,0,0,0,1309,
1310,3,152,76,0,1310,1312,5,38,0,0,1311,1313,3,208,104,0,1312,1311,1,0,0,
0,1312,1313,1,0,0,0,1313,1314,1,0,0,0,1314,1315,5,39,0,0,1315,1317,1,0,0,
0,1316,1302,1,0,0,0,1316,1309,1,0,0,0,1317,161,1,0,0,0,1318,1319,5,296,0,
0,1319,1320,5,95,0,0,1320,1334,5,387,0,0,1321,1322,5,296,0,0,1322,1323,5,
400,0,0,1323,1324,5,311,0,0,1324,1328,5,387,0,0,1325,1326,5,680,0,0,1326,
1327,5,470,0,0,1327,1329,5,225,0,0,1328,1325,1,0,0,0,1328,1329,1,0,0,0,1329,
1334,1,0,0,0,1330,1331,5,680,0,0,1331,1332,5,470,0,0,1332,1334,5,225,0,0,
1333,1318,1,0,0,0,1333,1321,1,0,0,0,1333,1330,1,0,0,0,1334,163,1,0,0,0,1335,
1345,3,174,87,0,1336,1345,3,166,83,0,1337,1345,3,172,86,0,1338,1345,3,170,
85,0,1339,1345,3,168,84,0,1340,1342,5,782,0,0,1341,1340,1,0,0,0,1341,1342,
1,0,0,0,1342,1343,1,0,0,0,1343,1345,7,21,0,0,1344,1335,1,0,0,0,1344,1336,
1,0,0,0,1344,1337,1,0,0,0,1344,1338,1,0,0,0,1344,1339,1,0,0,0,1344,1341,
1,0,0,0,1345,165,1,0,0,0,1346,1347,7,22,0,0,1347,167,1,0,0,0,1348,1349,7,
23,0,0,1349,169,1,0,0,0,1350,1351,7,24,0,0,1351,171,1,0,0,0,1352,1353,5,
168,0,0,1353,1359,5,787,0,0,1354,1355,5,622,0,0,1355,1359,5,787,0,0,1356,
1357,5,619,0,0,1357,1359,5,787,0,0,1358,1352,1,0,0,0,1358,1354,1,0,0,0,1358,
1356,1,0,0,0,1359,173,1,0,0,0,1360,1362,5,782,0,0,1361,1360,1,0,0,0,1361,
1362,1,0,0,0,1362,1363,1,0,0,0,1363,1366,3,222,111,0,1364,1366,5,784,0,0,
1365,1361,1,0,0,0,1365,1364,1,0,0,0,1366,1370,1,0,0,0,1367,1369,3,222,111,
0,1368,1367,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,1,0,0,
0,1371,175,1,0,0,0,1372,1370,1,0,0,0,1373,1374,5,80,0,0,1374,1376,5,38,0,
0,1375,1377,5,193,0,0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,1378,1,0,
0,0,1378,1379,3,180,90,0,1379,1380,5,39,0,0,1380,1465,1,0,0,0,1381,1382,
7,25,0,0,1382,1383,5,38,0,0,1383,1384,3,180,90,0,1384,1385,5,39,0,0,1385,
1465,1,0,0,0,1386,1387,5,148,0,0,1387,1389,5,38,0,0,1388,1390,5,64,0,0,1389,
1388,1,0,0,0,1389,1390,1,0,0,0,1390,1391,1,0,0,0,1391,1392,5,22,0,0,1392,
1465,5,39,0,0,1393,1394,5,148,0,0,1394,1402,5,38,0,0,1395,1397,5,64,0,0,
1396,1395,1,0,0,0,1396,1397,1,0,0,0,1397,1398,1,0,0,0,1398,1403,5,22,0,0,
1399,1403,3,180,90,0,1400,1401,5,193,0,0,1401,1403,3,208,104,0,1402,1396,
1,0,0,0,1402,1399,1,0,0,0,1402,1400,1,0,0,0,1403,1404,1,0,0,0,1404,1465,
5,39,0,0,1405,1406,5,386,0,0,1406,1408,5,38,0,0,1407,1409,5,193,0,0,1408,
1407,1,0,0,0,1408,1409,1,0,0,0,1409,1410,1,0,0,0,1410,1411,3,180,90,0,1411,
1412,5,39,0,0,1412,1465,1,0,0,0,1413,1414,5,368,0,0,1414,1416,5,38,0,0,1415,
1417,5,193,0,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,1417,1418,1,0,0,0,1418,
1419,3,180,90,0,1419,1420,5,39,0,0,1420,1465,1,0,0,0,1421,1422,5,587,0,0,
1422,1423,5,38,0,0,1423,1424,3,180,90,0,1424,1425,5,39,0,0,1425,1465,1,0,
0,0,1426,1427,5,667,0,0,1427,1428,5,38,0,0,1428,1429,3,180,90,0,1429,1430,
5,39,0,0,1430,1465,1,0,0,0,1431,1432,5,584,0,0,1432,1433,5,38,0,0,1433,1434,
3,180,90,0,1434,1435,5,39,0,0,1435,1465,1,0,0,0,1436,1437,5,670,0,0,1437,
1438,5,38,0,0,1438,1439,3,180,90,0,1439,1440,5,39,0,0,1440,1465,1,0,0,0,
1441,1442,5,600,0,0,1442,1444,5,38,0,0,1443,1445,5,193,0,0,1444,1443,1,0,
0,0,1444,1445,1,0,0,0,1445,1446,1,0,0,0,1446,1447,3,180,90,0,1447,1448,5,
39,0,0,1448,1465,1,0,0,0,1449,1450,5,264,0,0,1450,1452,5,38,0,0,1451,1453,
5,193,0,0,1452,1451,1,0,0,0,1452,1453,1,0,0,0,1453,1454,1,0,0,0,1454,1456,
3,208,104,0,1455,1457,3,192,96,0,1456,1455,1,0,0,0,1456,1457,1,0,0,0,1457,
1460,1,0,0,0,1458,1459,5,536,0,0,1459,1461,3,178,89,0,1460,1458,1,0,0,0,
1460,1461,1,0,0,0,1461,1462,1,0,0,0,1462,1463,5,39,0,0,1463,1465,1,0,0,0,
1464,1373,1,0,0,0,1464,1381,1,0,0,0,1464,1386,1,0,0,0,1464,1393,1,0,0,0,
1464,1405,1,0,0,0,1464,1413,1,0,0,0,1464,1421,1,0,0,0,1464,1426,1,0,0,0,
1464,1431,1,0,0,0,1464,1436,1,0,0,0,1464,1441,1,0,0,0,1464,1449,1,0,0,0,
1465,177,1,0,0,0,1466,1470,3,222,111,0,1467,1470,5,50,0,0,1468,1470,5,51,
0,0,1469,1466,1,0,0,0,1469,1467,1,0,0,0,1469,1468,1,0,0,0,1470,179,1,0,0,
0,1471,1473,5,64,0,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1474,1,0,0,
0,1474,1475,3,48,24,0,1475,181,1,0,0,0,1476,1479,3,200,100,0,1477,1479,3,
202,101,0,1478,1476,1,0,0,0,1478,1477,1,0,0,0,1479,183,1,0,0,0,1480,1481,
5,766,0,0,1481,185,1,0,0,0,1482,1483,5,38,0,0,1483,1484,3,48,24,0,1484,1485,
5,39,0,0,1485,187,1,0,0,0,1486,1487,5,38,0,0,1487,1488,5,39,0,0,1488,189,
1,0,0,0,1489,1494,3,194,97,0,1490,1491,5,35,0,0,1491,1493,3,194,97,0,1492,
1490,1,0,0,0,1493,1496,1,0,0,0,1494,1492,1,0,0,0,1494,1495,1,0,0,0,1495,
191,1,0,0,0,1496,1494,1,0,0,0,1497,1498,5,433,0,0,1498,1499,5,99,0,0,1499,
1500,3,190,95,0,1500,193,1,0,0,0,1501,1503,3,48,24,0,1502,1504,3,196,98,
0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,1504,195,1,0,0,0,1505,1506,7,26,0,
0,1506,197,1,0,0,0,1507,1508,5,38,0,0,1508,1509,3,128,64,0,1509,1510,5,39,
0,0,1510,199,1,0,0,0,1511,1512,5,45,0,0,1512,1515,3,226,113,0,1513,1515,
5,46,0,0,1514,1511,1,0,0,0,1514,1513,1,0,0,0,1515,201,1,0,0,0,1516,1518,
5,47,0,0,1517,1519,3,204,102,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,
1520,1,0,0,0,1520,1522,3,226,113,0,1521,1523,3,254,127,0,1522,1521,1,0,0,
0,1522,1523,1,0,0,0,1523,203,1,0,0,0,1524,1525,5,260,0,0,1525,1531,5,34,
0,0,1526,1527,5,326,0,0,1527,1531,5,34,0,0,1528,1529,5,539,0,0,1529,1531,
5,34,0,0,1530,1524,1,0,0,0,1530,1526,1,0,0,0,1530,1528,1,0,0,0,1531,205,
1,0,0,0,1532,1533,5,707,0,0,1533,1534,5,38,0,0,1534,1535,3,208,104,0,1535,
1536,5,39,0,0,1536,207,1,0,0,0,1537,1542,3,48,24,0,1538,1539,5,35,0,0,1539,
1541,3,48,24,0,1540,1538,1,0,0,0,1541,1544,1,0,0,0,1542,1540,1,0,0,0,1542,
1543,1,0,0,0,1543,209,1,0,0,0,1544,1542,1,0,0,0,1545,1547,5,86,0,0,1546,
1548,3,238,119,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1588,1,0,0,0,1549,
1551,5,113,0,0,1550,1552,3,238,119,0,1551,1550,1,0,0,0,1551,1552,1,0,0,0,
1552,1554,1,0,0,0,1553,1555,3,230,115,0,1554,1553,1,0,0,0,1554,1555,1,0,
0,0,1555,1588,1,0,0,0,1556,1558,3,234,117,0,1557,1559,3,238,119,0,1558,1557,
1,0,0,0,1558,1559,1,0,0,0,1559,1588,1,0,0,0,1560,1562,5,549,0,0,1561,1563,
5,294,0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1588,1,0,0,0,1564,1566,
5,648,0,0,1565,1567,5,294,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1588,
1,0,0,0,1568,1588,5,168,0,0,1569,1571,5,622,0,0,1570,1572,3,232,116,0,1571,
1570,1,0,0,0,1571,1572,1,0,0,0,1572,1588,1,0,0,0,1573,1575,5,165,0,0,1574,
1576,3,232,116,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1588,1,0,0,0,1577,
1579,5,176,0,0,1578,1580,3,212,106,0,1579,1578,1,0,0,0,1579,1580,1,0,0,0,
1580,1588,1,0,0,0,1581,1588,5,306,0,0,1582,1588,3,236,118,0,1583,1585,5,
241,0,0,1584,1586,3,214,107,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,1588,
1,0,0,0,1587,1545,1,0,0,0,1587,1549,1,0,0,0,1587,1556,1,0,0,0,1587,1560,
1,0,0,0,1587,1564,1,0,0,0,1587,1568,1,0,0,0,1587,1569,1,0,0,0,1587,1573,
1,0,0,0,1587,1577,1,0,0,0,1587,1581,1,0,0,0,1587,1582,1,0,0,0,1587,1583,
1,0,0,0,1588,211,1,0,0,0,1589,1592,3,238,119,0,1590,1592,3,216,108,0,1591,
1589,1,0,0,0,1591,1590,1,0,0,0,1592,213,1,0,0,0,1593,1594,3,216,108,0,1594,
215,1,0,0,0,1595,1596,5,38,0,0,1596,1597,5,3,0,0,1597,1598,5,35,0,0,1598,
1599,5,3,0,0,1599,1600,5,39,0,0,1600,217,1,0,0,0,1601,1603,5,73,0,0,1602,
1604,5,86,0,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1608,1,0,0,0,1605,
1606,5,86,0,0,1606,1608,5,73,0,0,1607,1601,1,0,0,0,1607,1605,1,0,0,0,1608,
219,1,0,0,0,1609,1611,5,642,0,0,1610,1612,5,86,0,0,1611,1610,1,0,0,0,1611,
1612,1,0,0,0,1612,1616,1,0,0,0,1613,1614,5,86,0,0,1614,1616,5,642,0,0,1615,
1609,1,0,0,0,1615,1613,1,0,0,0,1616,221,1,0,0,0,1617,1620,5,787,0,0,1618,
1620,5,786,0,0,1619,1617,1,0,0,0,1619,1618,1,0,0,0,1620,223,1,0,0,0,1621,
1625,3,226,113,0,1622,1625,5,86,0,0,1623,1625,5,178,0,0,1624,1621,1,0,0,
0,1624,1622,1,0,0,0,1624,1623,1,0,0,0,1625,225,1,0,0,0,1626,1629,3,268,134,
0,1627,1629,3,222,111,0,1628,1626,1,0,0,0,1628,1627,1,0,0,0,1629,227,1,0,
0,0,1630,1631,5,113,0,0,1631,1634,5,543,0,0,1632,1634,5,112,0,0,1633,1630,
1,0,0,0,1633,1632,1,0,0,0,1634,229,1,0,0,0,1635,1650,3,218,109,0,1636,1650,
3,220,110,0,1637,1650,5,100,0,0,1638,1639,3,228,114,0,1639,1641,3,224,112,
0,1640,1642,5,86,0,0,1641,1640,1,0,0,0,1641,1642,1,0,0,0,1642,1650,1,0,0,
0,1643,1647,5,86,0,0,1644,1645,3,228,114,0,1645,1646,3,224,112,0,1646,1648,
1,0,0,0,1647,1644,1,0,0,0,1647,1648,1,0,0,0,1648,1650,1,0,0,0,1649,1635,
1,0,0,0,1649,1636,1,0,0,0,1649,1637,1,0,0,0,1649,1638,1,0,0,0,1649,1643,
1,0,0,0,1650,231,1,0,0,0,1651,1652,5,38,0,0,1652,1653,5,3,0,0,1653,1654,
5,39,0,0,1654,233,1,0,0,0,1655,1659,5,402,0,0,1656,1657,5,399,0,0,1657,1659,
5,113,0,0,1658,1655,1,0,0,0,1658,1656,1,0,0,0,1659,235,1,0,0,0,1660,1666,
5,477,0,0,1661,1663,5,195,0,0,1662,1664,5,456,0,0,1663,1662,1,0,0,0,1663,
1664,1,0,0,0,1664,1666,1,0,0,0,1665,1660,1,0,0,0,1665,1661,1,0,0,0,1666,
237,1,0,0,0,1667,1670,5,38,0,0,1668,1671,3,240,120,0,1669,1671,5,52,0,0,
1670,1668,1,0,0,0,1670,1669,1,0,0,0,1671,1672,1,0,0,0,1672,1673,5,39,0,0,
1673,239,1,0,0,0,1674,1675,7,18,0,0,1675,241,1,0,0,0,1676,1677,7,27,0,0,
1677,243,1,0,0,0,1678,1681,3,242,121,0,1679,1681,7,28,0,0,1680,1678,1,0,
0,0,1680,1679,1,0,0,0,1681,245,1,0,0,0,1682,1688,3,248,124,0,1683,1684,5,
38,0,0,1684,1685,3,248,124,0,1685,1686,5,39,0,0,1686,1688,1,0,0,0,1687,1682,
1,0,0,0,1687,1683,1,0,0,0,1688,247,1,0,0,0,1689,1694,3,252,126,0,1690,1691,
5,35,0,0,1691,1693,3,252,126,0,1692,1690,1,0,0,0,1693,1696,1,0,0,0,1694,
1692,1,0,0,0,1694,1695,1,0,0,0,1695,249,1,0,0,0,1696,1694,1,0,0,0,1697,1698,
7,29,0,0,1698,251,1,0,0,0,1699,1704,3,268,134,0,1700,1702,3,254,127,0,1701,
1703,3,254,127,0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,1705,1,0,0,0,1704,
1700,1,0,0,0,1704,1705,1,0,0,0,1705,1710,1,0,0,0,1706,1707,3,254,127,0,1707,
1708,3,254,127,0,1708,1710,1,0,0,0,1709,1699,1,0,0,0,1709,1706,1,0,0,0,1710,
253,1,0,0,0,1711,1715,5,54,0,0,1712,1713,5,34,0,0,1713,1715,3,268,134,0,
1714,1711,1,0,0,0,1714,1712,1,0,0,0,1715,255,1,0,0,0,1716,1717,5,677,0,0,
1717,1718,3,48,24,0,1718,257,1,0,0,0,1719,1720,5,618,0,0,1720,1721,3,48,
24,0,1721,259,1,0,0,0,1722,1723,5,203,0,0,1723,1724,3,48,24,0,1724,261,1,
0,0,0,1725,1726,6,131,-1,0,1726,1727,3,128,64,0,1727,1754,1,0,0,0,1728,1729,
10,7,0,0,1729,1730,5,31,0,0,1730,1753,3,262,131,8,1731,1732,10,6,0,0,1732,
1733,7,30,0,0,1733,1753,3,262,131,7,1734,1735,10,5,0,0,1735,1736,7,31,0,
0,1736,1753,3,262,131,6,1737,1738,10,3,0,0,1738,1739,7,32,0,0,1739,1753,
3,262,131,4,1740,1741,10,2,0,0,1741,1742,5,30,0,0,1742,1753,3,262,131,3,
1743,1744,10,1,0,0,1744,1745,5,33,0,0,1745,1753,3,262,131,2,1746,1747,10,
4,0,0,1747,1748,7,31,0,0,1748,1749,5,292,0,0,1749,1750,3,48,24,0,1750,1751,
3,244,122,0,1751,1753,1,0,0,0,1752,1728,1,0,0,0,1752,1731,1,0,0,0,1752,1734,
1,0,0,0,1752,1737,1,0,0,0,1752,1740,1,0,0,0,1752,1743,1,0,0,0,1752,1746,
1,0,0,0,1753,1756,1,0,0,0,1754,1752,1,0,0,0,1754,1755,1,0,0,0,1755,263,1,
0,0,0,1756,1754,1,0,0,0,1757,1758,3,268,134,0,1758,1762,5,34,0,0,1759,1760,
3,268,134,0,1760,1761,5,34,0,0,1761,1763,1,0,0,0,1762,1759,1,0,0,0,1762,
1763,1,0,0,0,1763,1764,1,0,0,0,1764,1765,5,22,0,0,1765,265,1,0,0,0,1766,
1769,7,33,0,0,1767,1769,5,786,0,0,1768,1766,1,0,0,0,1768,1767,1,0,0,0,1769,
267,1,0,0,0,1770,1773,3,266,133,0,1771,1773,3,270,135,0,1772,1770,1,0,0,
0,1772,1771,1,0,0,0,1773,269,1,0,0,0,1774,1780,3,276,138,0,1775,1780,3,272,
136,0,1776,1780,5,222,0,0,1777,1780,5,547,0,0,1778,1780,5,749,0,0,1779,1774,
1,0,0,0,1779,1775,1,0,0,0,1779,1776,1,0,0,0,1779,1777,1,0,0,0,1779,1778,
1,0,0,0,1780,1789,1,0,0,0,1781,1787,3,282,141,0,1782,1787,3,284,142,0,1783,
1787,3,286,143,0,1784,1787,3,280,140,0,1785,1787,3,278,139,0,1786,1781,1,
0,0,0,1786,1782,1,0,0,0,1786,1783,1,0,0,0,1786,1784,1,0,0,0,1786,1785,1,
0,0,0,1787,1789,1,0,0,0,1788,1779,1,0,0,0,1788,1786,1,0,0,0,1789,271,1,0,
0,0,1790,1794,7,34,0,0,1791,1794,5,547,0,0,1792,1794,5,280,0,0,1793,1790,
1,0,0,0,1793,1791,1,0,0,0,1793,1792,1,0,0,0,1794,273,1,0,0,0,1795,1801,7,
35,0,0,1796,1801,5,547,0,0,1797,1801,7,36,0,0,1798,1801,7,37,0,0,1799,1801,
5,695,0,0,1800,1795,1,0,0,0,1800,1796,1,0,0,0,1800,1797,1,0,0,0,1800,1798,
1,0,0,0,1800,1799,1,0,0,0,1801,275,1,0,0,0,1802,1813,3,274,137,0,1803,1813,
5,219,0,0,1804,1813,5,236,0,0,1805,1813,5,409,0,0,1806,1813,5,463,0,0,1807,
1813,5,467,0,0,1808,1813,5,491,0,0,1809,1813,5,499,0,0,1810,1813,5,744,0,
0,1811,1813,5,601,0,0,1812,1802,1,0,0,0,1812,1803,1,0,0,0,1812,1804,1,0,
0,0,1812,1805,1,0,0,0,1812,1806,1,0,0,0,1812,1807,1,0,0,0,1812,1808,1,0,
0,0,1812,1809,1,0,0,0,1812,1810,1,0,0,0,1812,1811,1,0,0,0,1813,1820,1,0,
0,0,1814,1818,3,282,141,0,1815,1818,3,280,140,0,1816,1818,3,278,139,0,1817,
1814,1,0,0,0,1817,1815,1,0,0,0,1817,1816,1,0,0,0,1818,1820,1,0,0,0,1819,
1812,1,0,0,0,1819,1817,1,0,0,0,1820,277,1,0,0,0,1821,1822,7,38,0,0,1822,
279,1,0,0,0,1823,1824,7,39,0,0,1824,281,1,0,0,0,1825,1828,7,40,0,0,1826,
1828,7,41,0,0,1827,1825,1,0,0,0,1827,1826,1,0,0,0,1828,283,1,0,0,0,1829,
1830,7,42,0,0,1830,285,1,0,0,0,1831,1832,7,43,0,0,1832,287,1,0,0,0,216,290,
295,298,301,306,316,327,330,333,337,340,354,358,362,368,370,384,387,396,
407,417,423,428,436,440,442,446,450,454,458,462,465,469,472,474,478,484,
490,492,498,501,505,516,518,527,539,541,550,557,562,573,577,583,588,591,
594,597,603,609,620,627,634,639,644,651,660,668,673,677,683,686,689,693,
697,705,709,714,727,732,735,740,743,745,753,761,768,778,783,789,797,808,
812,819,821,828,843,850,864,876,882,889,892,926,934,936,944,950,976,1007,
1027,1033,1037,1064,1076,1089,1093,1097,1125,1179,1189,1201,1205,1214,1218,
1224,1230,1234,1240,1251,1257,1259,1281,1288,1293,1296,1300,1305,1312,1316,
1328,1333,1341,1344,1358,1361,1365,1370,1376,1389,1396,1402,1408,1416,1444,
1452,1456,1460,1464,1469,1472,1478,1494,1503,1514,1518,1522,1530,1542,1547,
1551,1554,1558,1562,1566,1571,1575,1579,1585,1587,1591,1603,1607,1611,1615,
1619,1624,1628,1633,1641,1647,1649,1658,1663,1665,1670,1680,1687,1694,1702,
1704,1709,1714,1752,1754,1762,1768,1772,1779,1786,1788,1793,1800,1812,1817,
1819,1827];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class VQFlowParser extends antlr4.Parser {

    static grammarFileName = "java-escape";
    static literalNames = [ null, null, null, null, null, null, "'RM'", 
                            "'MQ'", "'TARGET_QUERY'", "'UNIONQuery'", null, 
                            "'1'", "'='", "':='", "'<=>'", "'>='", "'>'", 
                            "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
                            "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", 
                            "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", 
                            "','", "';'", "':'", "'('", "')'", "'{'", "'}'", 
                            "'_'", "'->'", "'->>'", "'@'", null, "'@@'", 
                            "'\\N'", "'?'", null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'/*!'", 
                            "'*/'", null, null, null, "'<>'" ];
    static symbolicNames = [ null, "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
                             "INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", 
                             "REQUIREMENT_MODULE", "MINI_QUERY", "TARGET_QUERY", 
                             "UNION_QUERY", "CARDINALITYN", "ONE", "EQUAL_OPERATOR", 
                             "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", 
                             "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
                             "LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", 
                             "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
                             "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", 
                             "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                             "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", 
                             "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", 
                             "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                             "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                             "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                             "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                             "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", 
                             "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", 
                             "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", 
                             "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                             "DECIMAL_NUMBER", "FLOAT_NUMBER", "DOT_IDENTIFIER", 
                             "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", "ACTION_SYMBOL", 
                             "ADD_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL", 
                             "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", 
                             "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", 
                             "ANALYSE_SYMBOL", "ANALYZE_SYMBOL", "AND_SYMBOL", 
                             "ANY_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL", "ASCII_SYMBOL", 
                             "ASENSITIVE_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL", 
                             "AUTOEXTEND_SIZE_SYMBOL", "AUTO_INCREMENT_SYMBOL", 
                             "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BACKUP_SYMBOL", 
                             "BEFORE_SYMBOL", "BEGIN_SYMBOL", "BETWEEN_SYMBOL", 
                             "BIGINT_SYMBOL", "BINARY_SYMBOL", "BINLOG_SYMBOL", 
                             "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", 
                             "BIT_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", 
                             "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", "BOOL_SYMBOL", 
                             "BOTH_SYMBOL", "BTREE_SYMBOL", "BY_SYMBOL", 
                             "BYTE_SYMBOL", "CACHE_SYMBOL", "CALL_SYMBOL", 
                             "CASCADE_SYMBOL", "CASCADED_SYMBOL", "CASE_SYMBOL", 
                             "CAST_SYMBOL", "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", 
                             "CHANGE_SYMBOL", "CHANGED_SYMBOL", "CHANNEL_SYMBOL", 
                             "CHARSET_SYMBOL", "CHAR_SYMBOL", "CHECKSUM_SYMBOL", 
                             "CHECK_SYMBOL", "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", 
                             "CLIENT_SYMBOL", "CLOSE_SYMBOL", "COALESCE_SYMBOL", 
                             "CODE_SYMBOL", "COLLATE_SYMBOL", "COLLATION_SYMBOL", 
                             "COLUMNS_SYMBOL", "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", 
                             "COLUMN_FORMAT_SYMBOL", "COMMENT_SYMBOL", "COMMITTED_SYMBOL", 
                             "COMMIT_SYMBOL", "COMPACT_SYMBOL", "COMPLETION_SYMBOL", 
                             "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
                             "CONCURRENT_SYMBOL", "CONDITION_SYMBOL", "CONNECTION_SYMBOL", 
                             "CONSISTENT_SYMBOL", "CONSTRAINT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL", 
                             "CONSTRAINT_NAME_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", 
                             "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", "CONTINUE_SYMBOL", 
                             "CONTRIBUTORS_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", 
                             "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", 
                             "CUBE_SYMBOL", "CURDATE_SYMBOL", "CURRENT_SYMBOL", 
                             "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", 
                             "CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", 
                             "CURTIME_SYMBOL", "DATABASE_SYMBOL", "DATABASES_SYMBOL", 
                             "DATAFILE_SYMBOL", "DATA_SYMBOL", "DATETIME_SYMBOL", 
                             "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", 
                             "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", 
                             "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", "DAY_SYMBOL", 
                             "DEALLOCATE_SYMBOL", "DECIMAL_NUM_SYMBOL", 
                             "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
                             "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL", 
                             "DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", 
                             "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DES_KEY_FILE_SYMBOL", 
                             "DETERMINISTIC_SYMBOL", "DIAGNOSTICS_SYMBOL", 
                             "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", 
                             "DISK_SYMBOL", "DISTINCT_SYMBOL", "DIV_SYMBOL", 
                             "DOUBLE_SYMBOL", "DO_SYMBOL", "DROP_SYMBOL", 
                             "DUAL_SYMBOL", "DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", 
                             "DYNAMIC_SYMBOL", "EACH_SYMBOL", "ELSE_SYMBOL", 
                             "ELSEIF_SYMBOL", "ENABLE_SYMBOL", "ENCLOSED_SYMBOL", 
                             "ENCRYPTION_SYMBOL", "END_SYMBOL", "ENDS_SYMBOL", 
                             "END_OF_INPUT_SYMBOL", "ENGINES_SYMBOL", "ENGINE_SYMBOL", 
                             "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", 
                             "ESCAPED_SYMBOL", "ESCAPE_SYMBOL", "EVENTS_SYMBOL", 
                             "EVENT_SYMBOL", "EVERY_SYMBOL", "EXCHANGE_SYMBOL", 
                             "EXECUTE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", 
                             "EXPANSION_SYMBOL", "EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", 
                             "EXPORT_SYMBOL", "EXTENDED_SYMBOL", "EXTENT_SIZE_SYMBOL", 
                             "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FAST_SYMBOL", 
                             "FAULTS_SYMBOL", "FETCH_SYMBOL", "FILE_SYMBOL", 
                             "FILE_BLOCK_SIZE_SYMBOL", "FILTER_SYMBOL", 
                             "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT_SYMBOL", 
                             "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", "FORCE_SYMBOL", 
                             "FOREIGN_SYMBOL", "FOR_SYMBOL", "FORMAT_SYMBOL", 
                             "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", 
                             "FULLTEXT_SYMBOL", "FUNCTION_SYMBOL", "GET_SYMBOL", 
                             "GENERAL_SYMBOL", "GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", 
                             "GEOMETRYCOLLECTION_SYMBOL", "GEOMETRY_SYMBOL", 
                             "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", "GRANT_SYMBOL", 
                             "GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", 
                             "HANDLER_SYMBOL", "HASH_SYMBOL", "HAVING_SYMBOL", 
                             "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOST_SYMBOL", 
                             "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", 
                             "HOUR_MINUTE_SYMBOL", "HOUR_SECOND_SYMBOL", 
                             "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL", 
                             "IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", 
                             "IMPORT_SYMBOL", "INDEXES_SYMBOL", "INDEX_SYMBOL", 
                             "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
                             "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
                             "INSERT_METHOD_SYMBOL", "INSTANCE_SYMBOL", 
                             "INSTALL_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL", 
                             "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", 
                             "IO_AFTER_GTIDS_SYMBOL", "IO_BEFORE_GTIDS_SYMBOL", 
                             "IO_SYMBOL", "IPC_SYMBOL", "IS_SYMBOL", "ISOLATION_SYMBOL", 
                             "ISSUER_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
                             "JSON_SYMBOL", "KEYS_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", 
                             "KEY_SYMBOL", "KILL_SYMBOL", "LANGUAGE_SYMBOL", 
                             "LAST_SYMBOL", "LEADING_SYMBOL", "LEAVES_SYMBOL", 
                             "LEAVE_SYMBOL", "LEFT_SYMBOL", "LESS_SYMBOL", 
                             "LEVEL_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", 
                             "LINEAR_SYMBOL", "LINES_SYMBOL", "LINESTRING_SYMBOL", 
                             "LIST_SYMBOL", "LOAD_SYMBOL", "LOCAL_SYMBOL", 
                             "LOCATOR_SYMBOL", "LOCKS_SYMBOL", "LOCK_SYMBOL", 
                             "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL", 
                             "LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", "LONG_SYMBOL", 
                             "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
                             "MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", 
                             "MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", 
                             "MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", 
                             "MASTER_PASSWORD_SYMBOL", "MASTER_PORT_SYMBOL", 
                             "MASTER_RETRY_COUNT_SYMBOL", "MASTER_SERVER_ID_SYMBOL", 
                             "MASTER_SSL_CAPATH_SYMBOL", "MASTER_SSL_CA_SYMBOL", 
                             "MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", 
                             "MASTER_SSL_CRL_SYMBOL", "MASTER_SSL_CRLPATH_SYMBOL", 
                             "MASTER_SSL_KEY_SYMBOL", "MASTER_SSL_SYMBOL", 
                             "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MASTER_SYMBOL", 
                             "MASTER_TLS_VERSION_SYMBOL", "MASTER_USER_SYMBOL", 
                             "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MATCH_SYMBOL", 
                             "MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", 
                             "MAX_ROWS_SYMBOL", "MAX_SIZE_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
                             "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", 
                             "MAX_USER_CONNECTIONS_SYMBOL", "MAXVALUE_SYMBOL", 
                             "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", 
                             "MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", 
                             "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", 
                             "MID_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", 
                             "MINUTE_SECOND_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", 
                             "MIN_SYMBOL", "MODE_SYMBOL", "MODIFIES_SYMBOL", 
                             "MODIFY_SYMBOL", "MOD_SYMBOL", "MONTH_SYMBOL", 
                             "MULTILINESTRING_SYMBOL", "MULTIPOINT_SYMBOL", 
                             "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", 
                             "NAMES_SYMBOL", "NAME_SYMBOL", "NATIONAL_SYMBOL", 
                             "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", "NCHAR_SYMBOL", 
                             "NDBCLUSTER_SYMBOL", "NEG_SYMBOL", "NEVER_SYMBOL", 
                             "NEW_SYMBOL", "NEXT_SYMBOL", "NODEGROUP_SYMBOL", 
                             "NONE_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", 
                             "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", 
                             "NO_WRITE_TO_BINLOG_SYMBOL", "NULL_SYMBOL", 
                             "NUMBER_SYMBOL", "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", 
                             "OFFLINE_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", 
                             "ON_SYMBOL", "ONE_SYMBOL", "ONLINE_SYMBOL", 
                             "ONLY_SYMBOL", "OPEN_SYMBOL", "OPTIMIZE_SYMBOL", 
                             "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", 
                             "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", 
                             "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", 
                             "OUT_SYMBOL", "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", 
                             "PAGE_SYMBOL", "PARSER_SYMBOL", "PARTIAL_SYMBOL", 
                             "PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", 
                             "PARTITION_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", 
                             "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", 
                             "POINT_SYMBOL", "POLYGON_SYMBOL", "PORT_SYMBOL", 
                             "POSITION_SYMBOL", "PRECEDES_SYMBOL", "PRECISION_SYMBOL", 
                             "PREPARE_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", 
                             "PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", 
                             "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", 
                             "PROFILES_SYMBOL", "PROXY_SYMBOL", "PURGE_SYMBOL", 
                             "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", 
                             "RANGE_SYMBOL", "READS_SYMBOL", "READ_ONLY_SYMBOL", 
                             "READ_SYMBOL", "READ_WRITE_SYMBOL", "REAL_SYMBOL", 
                             "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDOFILE_SYMBOL", 
                             "REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", 
                             "REFERENCES_SYMBOL", "REGEXP_SYMBOL", "RELAY_SYMBOL", 
                             "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", 
                             "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", 
                             "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", 
                             "RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", 
                             "REPEATABLE_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
                             "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
                             "REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", 
                             "REPLICATE_IGNORE_TABLE_SYMBOL", "REPLICATE_WILD_DO_TABLE_SYMBOL", 
                             "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", "REPLICATE_REWRITE_DB_SYMBOL", 
                             "REQUIRE_SYMBOL", "RESET_SYMBOL", "RESIGNAL_SYMBOL", 
                             "RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", 
                             "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", 
                             "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", 
                             "RIGHT_SYMBOL", "ROLLBACK_SYMBOL", "ROLLUP_SYMBOL", 
                             "ROTATE_SYMBOL", "ROUTINE_SYMBOL", "ROWS_SYMBOL", 
                             "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", "ROW_SYMBOL", 
                             "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", "SCHEDULE_SYMBOL", 
                             "SCHEMA_NAME_SYMBOL", "SECOND_MICROSECOND_SYMBOL", 
                             "SECOND_SYMBOL", "SECURITY_SYMBOL", "SELECT_SYMBOL", 
                             "SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", 
                             "SERIAL_SYMBOL", "SESSION_SYMBOL", "SERVER_SYMBOL", 
                             "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", 
                             "SET_SYMBOL", "SET_VAR_SYMBOL", "SHARE_SYMBOL", 
                             "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", 
                             "SIGNED_SYMBOL", "SIMPLE_SYMBOL", "SLAVE_SYMBOL", 
                             "SLOW_SYMBOL", "SMALLINT_SYMBOL", "SNAPSHOT_SYMBOL", 
                             "SOCKET_SYMBOL", "SONAME_SYMBOL", "SOUNDS_SYMBOL", 
                             "SOURCE_SYMBOL", "SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", 
                             "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", 
                             "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
                             "SQL_BEFORE_GTIDS_SYMBOL", "SQL_BIG_RESULT_SYMBOL", 
                             "SQL_BUFFER_RESULT_SYMBOL", "SQL_CACHE_SYMBOL", 
                             "SQL_CALC_FOUND_ROWS_SYMBOL", "SQL_NO_CACHE_SYMBOL", 
                             "SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SQL_THREAD_SYMBOL", 
                             "SSL_SYMBOL", "STACKED_SYMBOL", "STARTING_SYMBOL", 
                             "STARTS_SYMBOL", "START_SYMBOL", "STATS_AUTO_RECALC_SYMBOL", 
                             "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
                             "STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", 
                             "STDDEV_POP_SYMBOL", "STD_SYMBOL", "STOP_SYMBOL", 
                             "STORAGE_SYMBOL", "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", 
                             "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
                             "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITIONS_SYMBOL", 
                             "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
                             "SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", 
                             "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "SYSDATE_SYMBOL", 
                             "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL", 
                             "TABLE_REF_PRIORITY_SYMBOL", "TABLE_SYMBOL", 
                             "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", 
                             "TEMPORARY_SYMBOL", "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", 
                             "TEXT_SYMBOL", "THAN_SYMBOL", "THEN_SYMBOL", 
                             "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", 
                             "TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", "TINYBLOB_SYMBOL", 
                             "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", "TO_SYMBOL", 
                             "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL", 
                             "TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", 
                             "TRUNCATE_SYMBOL", "TYPES_SYMBOL", "TYPE_SYMBOL", 
                             "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
                             "UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", 
                             "UNDO_SYMBOL", "UNICODE_SYMBOL", "UNINSTALL_SYMBOL", 
                             "UNION_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", 
                             "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", 
                             "UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", 
                             "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", 
                             "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", 
                             "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
                             "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VALUE_SYMBOL", 
                             "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", "VARIABLES_SYMBOL", 
                             "VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", 
                             "VAR_SAMP_SYMBOL", "VIEW_SYMBOL", "VIRTUAL_SYMBOL", 
                             "WAIT_SYMBOL", "WARNINGS_SYMBOL", "WEEK_SYMBOL", 
                             "WEIGHT_STRING_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", 
                             "WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", 
                             "WORK_SYMBOL", "WRAPPER_SYMBOL", "WRITE_SYMBOL", 
                             "X509_SYMBOL", "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", 
                             "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL", 
                             "ZEROFILL_SYMBOL", "PERSIST_SYMBOL", "ROLE_SYMBOL", 
                             "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", "VISIBLE_SYMBOL", 
                             "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", 
                             "JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", 
                             "OF_SYMBOL", "SKIP_SYMBOL", "LOCKED_SYMBOL", 
                             "NOWAIT_SYMBOL", "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", 
                             "HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", 
                             "CLONE_SYMBOL", "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", 
                             "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", 
                             "GROUPS_SYMBOL", "LAG_SYMBOL", "LAST_VALUE_SYMBOL", 
                             "LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", 
                             "NULLS_SYMBOL", "OTHERS_SYMBOL", "OVER_SYMBOL", 
                             "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", 
                             "RANK_SYMBOL", "RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", 
                             "TIES_SYMBOL", "UNBOUNDED_SYMBOL", "WINDOW_SYMBOL", 
                             "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", "NESTED_SYMBOL", 
                             "ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", 
                             "REUSE_SYMBOL", "SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", 
                             "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", "VCPU_SYMBOL", 
                             "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
                             "RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", 
                             "ORGANIZATION_SYMBOL", "REFERENCE_SYMBOL", 
                             "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
                             "SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", 
                             "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", "LATERAL_SYMBOL", 
                             "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
                             "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", 
                             "MEMBER_SYMBOL", "RANDOM_SYMBOL", "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
                             "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", "PRIVILEGE_CHECKS_USER_SYMBOL", 
                             "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", 
                             "PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", 
                             "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", "STREAM_SYMBOL", 
                             "OFF_SYMBOL", "WHITESPACE", "INVALID_INPUT", 
                             "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", 
                             "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", 
                             "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", 
                             "MYSQL_COMMENT_START", "VERSION_COMMENT_END", 
                             "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
                             "NOT_EQUAL2_OPERATOR" ];
    static ruleNames = [ "target", "query", "requirementsModule", "miniQuery", 
                         "singleTableRef", "selectClause", "filterExpr", 
                         "queryBody", "table", "expandQuery", "expandEdge", 
                         "expandEdgeBody", "cardinality", "columnsToMatch", 
                         "columnToMatch", "unionQuery", "unionEdge", "description", 
                         "selectStatement", "queryExpressionParens", "queryExpressionBody", 
                         "queryExpression", "selectItemList", "selectItem", 
                         "expr", "boolPri", "compOp", "subquery", "withClause", 
                         "commonTableExpression", "limitClause", "limitOptions", 
                         "limitOption", "queryPrimary", "tableRef", "querySpecification", 
                         "groupByClause", "olapOption", "havingClause", 
                         "whereClause", "fromClause", "tableReferenceList", 
                         "tableReference", "escapedTableReference", "joinedTable", 
                         "naturalJoinType", "innerJoinType", "outerJoinType", 
                         "tableFactor", "singleTable", "singleTableParens", 
                         "identifierListWithParentheses", "identifierList", 
                         "derivedTable", "columnInternalRefList", "columnInternalRef", 
                         "tableAlias", "tableReferenceListParens", "unionOption", 
                         "notRule", "predicate", "predicateOperations", 
                         "columnRef", "fieldIdentifier", "simpleExpr", "runtimeFunctionCall", 
                         "dateTimeTtype", "trimFunction", "timeFunctionParameters", 
                         "substringFunction", "fractionalPrecision", "real_ulong_number", 
                         "wsNumCodepoints", "ulong_number", "exprListWithParentheses", 
                         "equal", "qualifiedIdentifier", "udfExprList", 
                         "udfExpr", "selectAlias", "functionCall", "fulltextOptions", 
                         "literal", "numLiteral", "boolLiteral", "nullLiteral", 
                         "temporalLiteral", "textLiteral", "sumExpr", "textString", 
                         "inSumExpr", "variable", "arrayCast", "exprWithParentheses", 
                         "parentheses", "orderList", "orderClause", "orderExpression", 
                         "direction", "simpleExprWithParentheses", "userVariable", 
                         "systemVariable", "varIdentType", "groupingOperation", 
                         "exprList", "castType", "floatOptions", "standardFloatOptions", 
                         "precision", "ascii", "unicode", "textStringLiteral", 
                         "charsetName", "textOrIdentifier", "charset", "charsetWithOptBinary", 
                         "typeDatetimePrecision", "nchar", "realType", "fieldLength", 
                         "real_ulonglong_number", "intervalTimeStamp", "interval", 
                         "identListArg", "identList", "not2Rule", "simpleIdentifier", 
                         "dotIdentifier", "whenExpression", "thenExpression", 
                         "elseExpression", "bitExpr", "tableWild", "pureIdentifier", 
                         "identifier", "identifierKeyword", "roleOrIdentifierKeyword", 
                         "roleOrLabelKeyword", "labelKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
                         "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
                         "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = VQFlowParser.ruleNames;
        this.literalNames = VQFlowParser.literalNames;
        this.symbolicNames = VQFlowParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 24:
    	    		return this.expr_sempred(localctx, predIndex);
    	case 25:
    	    		return this.boolPri_sempred(localctx, predIndex);
    	case 64:
    	    		return this.simpleExpr_sempred(localctx, predIndex);
    	case 131:
    	    		return this.bitExpr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 3);
    		case 1:
    			return this.precpred(this._ctx, 2);
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    boolPri_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 3);
    		case 4:
    			return this.precpred(this._ctx, 2);
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    simpleExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 15);
    		case 7:
    			return this.precpred(this._ctx, 20);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bitExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 7);
    		case 9:
    			return this.precpred(this._ctx, 6);
    		case 10:
    			return this.precpred(this._ctx, 5);
    		case 11:
    			return this.precpred(this._ctx, 3);
    		case 12:
    			return this.precpred(this._ctx, 2);
    		case 13:
    			return this.precpred(this._ctx, 1);
    		case 14:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	target() {
	    let localctx = new TargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, VQFlowParser.RULE_target);
	    try {
	        this.state = 301;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 288;
	            this.query();
	            this.state = 290;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            if(la_===1) {
	                this.state = 289;
	                this.match(VQFlowParser.EOF);

	            }
	            break;
	        case 38:
	        case 534:
	        case 680:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 292;
	            this.selectStatement();
	            this.state = 298;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 36:
	                this.state = 293;
	                this.match(VQFlowParser.SEMICOLON_SYMBOL);
	                this.state = 295;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	                if(la_===1) {
	                    this.state = 294;
	                    this.match(VQFlowParser.EOF);

	                }
	                break;
	            case -1:
	                this.state = 297;
	                this.match(VQFlowParser.EOF);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case -1:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 300;
	            this.match(VQFlowParser.EOF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, VQFlowParser.RULE_query);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 303;
	        this.match(VQFlowParser.TARGET_QUERY);
	        this.state = 304;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 306;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        if(la_===1) {
	            this.state = 305;
	            this.description();

	        }
	        this.state = 308;
	        this.queryBody();
	        this.state = 309;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requirementsModule() {
	    let localctx = new RequirementsModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, VQFlowParser.RULE_requirementsModule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 311;
	        this.identifier();
	        this.state = 312;
	        this.equal();
	        this.state = 313;
	        this.match(VQFlowParser.REQUIREMENT_MODULE);
	        this.state = 314;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 316;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        if(la_===1) {
	            this.state = 315;
	            this.description();

	        }
	        this.state = 318;
	        this.queryBody();
	        this.state = 319;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	miniQuery() {
	    let localctx = new MiniQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, VQFlowParser.RULE_miniQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 321;
	        this.identifier();
	        this.state = 322;
	        this.equal();
	        this.state = 323;
	        this.match(VQFlowParser.MINI_QUERY);
	        this.state = 324;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 325;
	        this.singleTableRef();
	        this.state = 327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        if(la_===1) {
	            this.state = 326;
	            this.filterExpr();

	        }
	        this.state = 330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===263) {
	            this.state = 329;
	            this.groupByClause();
	        }

	        this.state = 333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===267) {
	            this.state = 332;
	            this.havingClause();
	        }

	        this.state = 335;
	        this.selectClause();
	        this.state = 337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===433) {
	            this.state = 336;
	            this.orderClause();
	        }

	        this.state = 340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===320) {
	            this.state = 339;
	            this.limitClause();
	        }

	        this.state = 342;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTableRef() {
	    let localctx = new SingleTableRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, VQFlowParser.RULE_singleTableRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 344;
	        this.tableRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClause() {
	    let localctx = new SelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, VQFlowParser.RULE_selectClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 346;
	        this.selectItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterExpr() {
	    let localctx = new FilterExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, VQFlowParser.RULE_filterExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 348;
	        this.match(VQFlowParser.FILTER_SYMBOL);
	        this.state = 349;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryBody() {
	    let localctx = new QueryBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, VQFlowParser.RULE_queryBody);
	    var _la = 0; // Token type
	    try {
	        this.state = 358;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 352; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 351;
	                this.table();
	                this.state = 354; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348436731) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 209) !== 0));
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 356;
	            this.expandQuery();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 357;
	            this.unionQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	table() {
	    let localctx = new TableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, VQFlowParser.RULE_table);
	    try {
	        this.state = 362;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 360;
	            this.requirementsModule();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 361;
	            this.miniQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expandQuery() {
	    let localctx = new ExpandQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, VQFlowParser.RULE_expandQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 364;
	        this.table();
	        this.state = 365;
	        this.table();
	        this.state = 370;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348436731) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 209) !== 0)) {
	            this.state = 368;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 366;
	                this.table();
	                break;

	            case 2:
	                this.state = 367;
	                this.expandEdge();
	                break;

	            }
	            this.state = 372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expandEdge() {
	    let localctx = new ExpandEdgeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, VQFlowParser.RULE_expandEdge);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 373;
	        this.identifier();
	        this.state = 374;
	        this.match(VQFlowParser.JSON_SEPARATOR_SYMBOL);
	        this.state = 375;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 376;
	        this.expandEdgeBody();
	        this.state = 377;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	        this.state = 378;
	        this.match(VQFlowParser.JSON_SEPARATOR_SYMBOL);
	        this.state = 379;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expandEdgeBody() {
	    let localctx = new ExpandEdgeBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, VQFlowParser.RULE_expandEdgeBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===11) {
	            this.state = 381;
	            this.cardinality();
	            this.state = 382;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	        }

	        this.state = 387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348436731) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 209) !== 0)) {
	            this.state = 386;
	            this.columnsToMatch();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinality() {
	    let localctx = new CardinalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, VQFlowParser.RULE_cardinality);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        _la = this._input.LA(1);
	        if(!(_la===10 || _la===11)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnsToMatch() {
	    let localctx = new ColumnsToMatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, VQFlowParser.RULE_columnsToMatch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        this.columnToMatch();
	        this.state = 396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 392;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 393;
	            this.columnToMatch();
	            this.state = 398;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnToMatch() {
	    let localctx = new ColumnToMatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, VQFlowParser.RULE_columnToMatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        this.identifier();
	        this.state = 400;
	        this.equal();
	        this.state = 401;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionQuery() {
	    let localctx = new UnionQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, VQFlowParser.RULE_unionQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 403;
	        this.table();
	        this.state = 405; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 404;
	            this.table();
	            this.state = 407; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348436731) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 209) !== 0));
	        this.state = 409;
	        this.unionEdge();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionEdge() {
	    let localctx = new UnionEdgeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, VQFlowParser.RULE_unionEdge);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 411;
	        this.match(VQFlowParser.UNION_SYMBOL);
	        this.state = 412;
	        this.unionOption();
	        this.state = 413;
	        this.identifier();
	        this.state = 415; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 414;
	            this.identifier();
	            this.state = 417; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348436731) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 209) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	description() {
	    let localctx = new DescriptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, VQFlowParser.RULE_description);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 419;
	        this.match(VQFlowParser.DOUBLE_QUOTED_TEXT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, VQFlowParser.RULE_selectStatement);
	    try {
	        this.state = 423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 421;
	            this.queryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 422;
	            this.queryExpressionParens();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionParens() {
	    let localctx = new QueryExpressionParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, VQFlowParser.RULE_queryExpressionParens);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 428;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 426;
	            this.queryExpressionParens();
	            break;

	        case 2:
	            this.state = 427;
	            this.queryExpression();
	            break;

	        }
	        this.state = 430;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionBody() {
	    let localctx = new QueryExpressionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, VQFlowParser.RULE_queryExpressionBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 442;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 534:
	            this.state = 432;
	            this.queryPrimary();
	            break;
	        case 38:
	            this.state = 433;
	            this.queryExpressionParens();
	            this.state = 434;
	            this.match(VQFlowParser.UNION_SYMBOL);
	            this.state = 436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===64 || _la===193) {
	                this.state = 435;
	                this.unionOption();
	            }

	            this.state = 440;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 534:
	                this.state = 438;
	                this.queryPrimary();
	                break;
	            case 38:
	                this.state = 439;
	                this.queryExpressionParens();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===644) {
	            this.state = 444;
	            this.match(VQFlowParser.UNION_SYMBOL);
	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===64 || _la===193) {
	                this.state = 445;
	                this.unionOption();
	            }

	            this.state = 450;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 534:
	                this.state = 448;
	                this.queryPrimary();
	                break;
	            case 38:
	                this.state = 449;
	                this.queryExpressionParens();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpression() {
	    let localctx = new QueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, VQFlowParser.RULE_queryExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===680) {
	            this.state = 457;
	            this.withClause();
	        }

	        this.state = 474;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 460;
	            this.queryExpressionBody();
	            this.state = 462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===433) {
	                this.state = 461;
	                this.orderClause();
	            }

	            this.state = 465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===320) {
	                this.state = 464;
	                this.limitClause();
	            }

	            break;

	        case 2:
	            this.state = 467;
	            this.queryExpressionParens();
	            this.state = 469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===433) {
	                this.state = 468;
	                this.orderClause();
	            }

	            this.state = 472;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===320) {
	                this.state = 471;
	                this.limitClause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemList() {
	    let localctx = new SelectItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, VQFlowParser.RULE_selectItemList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 478;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 20:
	        case 21:
	        case 25:
	        case 26:
	        case 34:
	        case 38:
	        case 40:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 86:
	        case 87:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 152:
	        case 153:
	        case 154:
	        case 157:
	        case 159:
	        case 160:
	        case 161:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 173:
	        case 174:
	        case 178:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 277:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 416:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 587:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 666:
	        case 667:
	        case 670:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	            this.state = 476;
	            this.selectItem();
	            break;
	        case 22:
	            this.state = 477;
	            this.match(VQFlowParser.MULT_OPERATOR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 480;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 481;
	            this.selectItem();
	            this.state = 486;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, VQFlowParser.RULE_selectItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 492;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 487;
	            this.tableWild();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 488;
	            this.expr(0);
	            this.state = 490;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348469499) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 465) !== 0)) {
	                this.state = 489;
	                this.selectAlias();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 48;
	    this.enterRecursionRule(localctx, 48, VQFlowParser.RULE_expr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 505;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 20:
	        case 21:
	        case 25:
	        case 26:
	        case 34:
	        case 38:
	        case 40:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 86:
	        case 87:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 152:
	        case 153:
	        case 154:
	        case 157:
	        case 159:
	        case 160:
	        case 161:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 173:
	        case 174:
	        case 178:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 277:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 412:
	        case 413:
	        case 414:
	        case 416:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 587:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 666:
	        case 667:
	        case 670:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	            localctx = new ExprIsContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 495;
	            this.boolPri(0);
	            this.state = 501;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	            if(la_===1) {
	                this.state = 496;
	                this.match(VQFlowParser.IS_SYMBOL);
	                this.state = 498;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===1 || _la===411) {
	                    this.state = 497;
	                    this.notRule();
	                }

	                this.state = 500;
	                localctx.type = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===232 || _la===632 || _la===646)) {
	                    localctx.type = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;
	        case 411:
	            localctx = new ExprNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 503;
	            this.match(VQFlowParser.NOT_SYMBOL);
	            this.state = 504;
	            this.expr(4);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 518;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 516;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExprAndContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_expr);
	                    this.state = 507;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 508;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===29 || _la===69)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 509;
	                    this.expr(4);
	                    break;

	                case 2:
	                    localctx = new ExprXorContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_expr);
	                    this.state = 510;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 511;
	                    this.match(VQFlowParser.XOR_SYMBOL);
	                    this.state = 512;
	                    this.expr(3);
	                    break;

	                case 3:
	                    localctx = new ExprOrContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_expr);
	                    this.state = 513;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 514;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===32 || _la===434)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 515;
	                    this.expr(2);
	                    break;

	                } 
	            }
	            this.state = 520;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	boolPri(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BoolPriContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 50;
	    this.enterRecursionRule(localctx, 50, VQFlowParser.RULE_boolPri, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PrimaryExprPredicateContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 522;
	        this.predicate();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 541;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 539;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PrimaryExprIsNullContext(this, new BoolPriContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_boolPri);
	                    this.state = 524;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 525;
	                    this.match(VQFlowParser.IS_SYMBOL);
	                    this.state = 527;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===1 || _la===411) {
	                        this.state = 526;
	                        this.notRule();
	                    }

	                    this.state = 529;
	                    this.match(VQFlowParser.NULL_SYMBOL);
	                    break;

	                case 2:
	                    localctx = new PrimaryExprCompareContext(this, new BoolPriContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_boolPri);
	                    this.state = 530;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 531;
	                    this.compOp();
	                    this.state = 532;
	                    this.predicate();
	                    break;

	                case 3:
	                    localctx = new PrimaryExprAllAnyContext(this, new BoolPriContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_boolPri);
	                    this.state = 534;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 535;
	                    this.compOp();
	                    this.state = 536;
	                    _la = this._input.LA(1);
	                    if(!(_la===64 || _la===70)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 537;
	                    this.subquery();
	                    break;

	                } 
	            }
	            this.state = 543;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	compOp() {
	    let localctx = new CompOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, VQFlowParser.RULE_compOp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 544;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 1036288) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subquery() {
	    let localctx = new SubqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, VQFlowParser.RULE_subquery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this.queryExpressionParens();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withClause() {
	    let localctx = new WithClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, VQFlowParser.RULE_withClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 548;
	        this.match(VQFlowParser.WITH_SYMBOL);
	        this.state = 550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===700) {
	            this.state = 549;
	            this.match(VQFlowParser.RECURSIVE_SYMBOL);
	        }

	        this.state = 552;
	        this.commonTableExpression();
	        this.state = 557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 553;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 554;
	            this.commonTableExpression();
	            this.state = 559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonTableExpression() {
	    let localctx = new CommonTableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, VQFlowParser.RULE_commonTableExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 560;
	        this.identifier();
	        this.state = 562;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 561;
	            this.columnInternalRefList();
	        }

	        this.state = 564;
	        this.match(VQFlowParser.AS_SYMBOL);
	        this.state = 565;
	        this.subquery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, VQFlowParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        this.match(VQFlowParser.LIMIT_SYMBOL);
	        this.state = 568;
	        this.limitOptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitOptions() {
	    let localctx = new LimitOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, VQFlowParser.RULE_limitOptions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        this.limitOption();
	        this.state = 573;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35 || _la===421) {
	            this.state = 571;
	            _la = this._input.LA(1);
	            if(!(_la===35 || _la===421)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 572;
	            this.limitOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitOption() {
	    let localctx = new LimitOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, VQFlowParser.RULE_limitOption);
	    var _la = 0; // Token type
	    try {
	        this.state = 577;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 783:
	        case 785:
	        case 786:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 575;
	            this.identifier();
	            break;
	        case 3:
	        case 4:
	        case 5:
	        case 49:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 576;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 56) !== 0) || _la===49)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryPrimary() {
	    let localctx = new QueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, VQFlowParser.RULE_queryPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.querySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRef() {
	    let localctx = new TableRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, VQFlowParser.RULE_tableRef);
	    try {
	        this.state = 583;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 783:
	        case 785:
	        case 786:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 581;
	            this.qualifiedIdentifier();
	            break;
	        case 34:
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 582;
	            this.dotIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, VQFlowParser.RULE_querySpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 585;
	        this.match(VQFlowParser.SELECT_SYMBOL);
	        this.state = 586;
	        this.selectItemList();
	        this.state = 588;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===249) {
	            this.state = 587;
	            this.fromClause();
	        }

	        this.state = 591;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===678) {
	            this.state = 590;
	            this.whereClause();
	        }

	        this.state = 594;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===263) {
	            this.state = 593;
	            this.groupByClause();
	        }

	        this.state = 597;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===267) {
	            this.state = 596;
	            this.havingClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, VQFlowParser.RULE_groupByClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 599;
	        this.match(VQFlowParser.GROUP_SYMBOL);
	        this.state = 600;
	        this.match(VQFlowParser.BY_SYMBOL);
	        this.state = 601;
	        this.orderList();
	        this.state = 603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===680) {
	            this.state = 602;
	            this.olapOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	olapOption() {
	    let localctx = new OlapOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, VQFlowParser.RULE_olapOption);
	    try {
	        this.state = 609;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 605;
	            this.match(VQFlowParser.WITH_SYMBOL);
	            this.state = 606;
	            this.match(VQFlowParser.ROLLUP_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 607;
	            this.match(VQFlowParser.WITH_SYMBOL);
	            this.state = 608;
	            this.match(VQFlowParser.CUBE_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, VQFlowParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 611;
	        this.match(VQFlowParser.HAVING_SYMBOL);
	        this.state = 612;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, VQFlowParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this.match(VQFlowParser.WHERE_SYMBOL);
	        this.state = 615;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, VQFlowParser.RULE_fromClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 617;
	        this.match(VQFlowParser.FROM_SYMBOL);
	        this.state = 620;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 198:
	            this.state = 618;
	            this.match(VQFlowParser.DUAL_SYMBOL);
	            break;
	        case 34:
	        case 38:
	        case 40:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 783:
	        case 785:
	        case 786:
	            this.state = 619;
	            this.tableReferenceList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableReferenceList() {
	    let localctx = new TableReferenceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, VQFlowParser.RULE_tableReferenceList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 622;
	        this.tableReference();
	        this.state = 627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 623;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 624;
	            this.tableReference();
	            this.state = 629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableReference() {
	    let localctx = new TableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, VQFlowParser.RULE_tableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 639;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	        case 38:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 783:
	        case 785:
	        case 786:
	            this.state = 630;
	            this.tableFactor();
	            break;
	        case 40:
	            this.state = 631;
	            this.match(VQFlowParser.OPEN_CURLY_SYMBOL);
	            this.state = 634;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 632;
	                this.identifier();
	                break;

	            case 2:
	                this.state = 633;
	                this.match(VQFlowParser.OJ_SYMBOL);
	                break;

	            }
	            this.state = 636;
	            this.escapedTableReference();
	            this.state = 637;
	            this.match(VQFlowParser.CLOSE_CURLY_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 644;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 641;
	                this.joinedTable(); 
	            }
	            this.state = 646;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	escapedTableReference() {
	    let localctx = new EscapedTableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, VQFlowParser.RULE_escapedTableReference);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.tableFactor();
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===151 || ((((_la - 285)) & ~0x1f) == 0 && ((1 << (_la - 285)) & 2148532225) !== 0) || _la===400 || _la===518 || _la===591) {
	            this.state = 648;
	            this.joinedTable();
	            this.state = 653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinedTable() {
	    let localctx = new JoinedTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, VQFlowParser.RULE_joinedTable);
	    try {
	        this.state = 673;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 151:
	        case 285:
	        case 305:
	        case 591:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 654;
	            this.innerJoinType();
	            this.state = 655;
	            this.tableReference();
	            this.state = 660;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	            if(la_===1) {
	                this.state = 656;
	                this.match(VQFlowParser.ON_SYMBOL);
	                this.state = 657;
	                this.expr(0);

	            } else if(la_===2) {
	                this.state = 658;
	                this.match(VQFlowParser.USING_SYMBOL);
	                this.state = 659;
	                this.identifierListWithParentheses();

	            }
	            break;
	        case 316:
	        case 518:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 662;
	            this.outerJoinType();
	            this.state = 663;
	            this.tableReference();
	            this.state = 668;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 423:
	                this.state = 664;
	                this.match(VQFlowParser.ON_SYMBOL);
	                this.state = 665;
	                this.expr(0);
	                break;
	            case 657:
	                this.state = 666;
	                this.match(VQFlowParser.USING_SYMBOL);
	                this.state = 667;
	                this.identifierListWithParentheses();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 400:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 670;
	            this.naturalJoinType();
	            this.state = 671;
	            this.tableFactor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	naturalJoinType() {
	    let localctx = new NaturalJoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, VQFlowParser.RULE_naturalJoinType);
	    var _la = 0; // Token type
	    try {
	        this.state = 686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 675;
	            this.match(VQFlowParser.NATURAL_SYMBOL);
	            this.state = 677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===285) {
	                this.state = 676;
	                this.match(VQFlowParser.INNER_SYMBOL);
	            }

	            this.state = 679;
	            this.match(VQFlowParser.JOIN_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 680;
	            this.match(VQFlowParser.NATURAL_SYMBOL);
	            this.state = 681;
	            _la = this._input.LA(1);
	            if(!(_la===316 || _la===518)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 683;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===435) {
	                this.state = 682;
	                this.match(VQFlowParser.OUTER_SYMBOL);
	            }

	            this.state = 685;
	            this.match(VQFlowParser.JOIN_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerJoinType() {
	    let localctx = new InnerJoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, VQFlowParser.RULE_innerJoinType);
	    var _la = 0; // Token type
	    try {
	        this.state = 693;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 151:
	        case 285:
	        case 305:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===151 || _la===285) {
	                this.state = 688;
	                localctx.type = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===151 || _la===285)) {
	                    localctx.type = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 691;
	            this.match(VQFlowParser.JOIN_SYMBOL);
	            break;
	        case 591:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 692;
	            localctx.type = this.match(VQFlowParser.STRAIGHT_JOIN_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outerJoinType() {
	    let localctx = new OuterJoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, VQFlowParser.RULE_outerJoinType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        localctx.type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===316 || _la===518)) {
	            localctx.type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===435) {
	            this.state = 696;
	            this.match(VQFlowParser.OUTER_SYMBOL);
	        }

	        this.state = 699;
	        this.match(VQFlowParser.JOIN_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableFactor() {
	    let localctx = new TableFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, VQFlowParser.RULE_tableFactor);
	    try {
	        this.state = 705;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 701;
	            this.singleTable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 702;
	            this.singleTableParens();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 703;
	            this.derivedTable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 704;
	            this.tableReferenceListParens();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTable() {
	    let localctx = new SingleTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, VQFlowParser.RULE_singleTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        this.tableRef();
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12 || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348469499) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 209) !== 0)) {
	            this.state = 708;
	            this.tableAlias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTableParens() {
	    let localctx = new SingleTableParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, VQFlowParser.RULE_singleTableParens);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 714;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 783:
	        case 785:
	        case 786:
	            this.state = 712;
	            this.singleTable();
	            break;
	        case 38:
	            this.state = 713;
	            this.singleTableParens();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 716;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierListWithParentheses() {
	    let localctx = new IdentifierListWithParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, VQFlowParser.RULE_identifierListWithParentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 718;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 719;
	        this.identifierList();
	        this.state = 720;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, VQFlowParser.RULE_identifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.identifier();
	        this.state = 727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 723;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 724;
	            this.identifier();
	            this.state = 729;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	derivedTable() {
	    let localctx = new DerivedTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, VQFlowParser.RULE_derivedTable);
	    var _la = 0; // Token type
	    try {
	        this.state = 745;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 730;
	            this.subquery();
	            this.state = 732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12 || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348469499) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 209) !== 0)) {
	                this.state = 731;
	                this.tableAlias();
	            }

	            this.state = 735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 734;
	                this.columnInternalRefList();
	            }

	            break;
	        case 761:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 737;
	            this.match(VQFlowParser.LATERAL_SYMBOL);
	            this.state = 738;
	            this.subquery();
	            this.state = 740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12 || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348469499) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 209) !== 0)) {
	                this.state = 739;
	                this.tableAlias();
	            }

	            this.state = 743;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 742;
	                this.columnInternalRefList();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnInternalRefList() {
	    let localctx = new ColumnInternalRefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, VQFlowParser.RULE_columnInternalRefList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 747;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 748;
	        this.columnInternalRef();
	        this.state = 753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 749;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 750;
	            this.columnInternalRef();
	            this.state = 755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 756;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnInternalRef() {
	    let localctx = new ColumnInternalRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, VQFlowParser.RULE_columnInternalRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 758;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableAlias() {
	    let localctx = new TableAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, VQFlowParser.RULE_tableAlias);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 761;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12 || _la===71) {
	            this.state = 760;
	            _la = this._input.LA(1);
	            if(!(_la===12 || _la===71)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 763;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableReferenceListParens() {
	    let localctx = new TableReferenceListParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, VQFlowParser.RULE_tableReferenceListParens);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 765;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 766;
	            this.tableReferenceList();
	            break;

	        case 2:
	            this.state = 767;
	            this.tableReferenceListParens();
	            break;

	        }
	        this.state = 770;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionOption() {
	    let localctx = new UnionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, VQFlowParser.RULE_unionOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 772;
	        _la = this._input.LA(1);
	        if(!(_la===64 || _la===193)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notRule() {
	    let localctx = new NotRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, VQFlowParser.RULE_notRule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        _la = this._input.LA(1);
	        if(!(_la===1 || _la===411)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, VQFlowParser.RULE_predicate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 776;
	        this.bitExpr(0);
	        this.state = 789;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        if(la_===1) {
	            this.state = 778;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1 || _la===411) {
	                this.state = 777;
	                this.notRule();
	            }

	            this.state = 780;
	            this.predicateOperations();

	        } else if(la_===2) {
	            this.state = 781;
	            this.match(VQFlowParser.MEMBER_SYMBOL);
	            this.state = 783;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===703) {
	                this.state = 782;
	                this.match(VQFlowParser.OF_SYMBOL);
	            }

	            this.state = 785;
	            this.simpleExprWithParentheses();

	        } else if(la_===3) {
	            this.state = 786;
	            this.match(VQFlowParser.SOUNDS_SYMBOL);
	            this.state = 787;
	            this.match(VQFlowParser.LIKE_SYMBOL);
	            this.state = 788;
	            this.bitExpr(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicateOperations() {
	    let localctx = new PredicateOperationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, VQFlowParser.RULE_predicateOperations);
	    try {
	        this.state = 812;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 296:
	            localctx = new PredicateExprInContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 791;
	            this.match(VQFlowParser.IN_SYMBOL);
	            this.state = 797;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 792;
	                this.subquery();
	                break;

	            case 2:
	                this.state = 793;
	                this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	                this.state = 794;
	                this.exprList();
	                this.state = 795;
	                this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	                break;

	            }
	            break;
	        case 84:
	            localctx = new PredicateExprBetweenContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 799;
	            this.match(VQFlowParser.BETWEEN_SYMBOL);
	            this.state = 800;
	            this.bitExpr(0);
	            this.state = 801;
	            this.match(VQFlowParser.AND_SYMBOL);
	            this.state = 802;
	            this.predicate();
	            break;
	        case 319:
	            localctx = new PredicateExprLikeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 804;
	            this.match(VQFlowParser.LIKE_SYMBOL);
	            this.state = 805;
	            this.simpleExpr(0);
	            this.state = 808;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	            if(la_===1) {
	                this.state = 806;
	                this.match(VQFlowParser.ESCAPE_SYMBOL);
	                this.state = 807;
	                this.simpleExpr(0);

	            }
	            break;
	        case 484:
	            localctx = new PredicateExprRegexContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 810;
	            this.match(VQFlowParser.REGEXP_SYMBOL);
	            this.state = 811;
	            this.bitExpr(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnRef() {
	    let localctx = new ColumnRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, VQFlowParser.RULE_columnRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this.fieldIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldIdentifier() {
	    let localctx = new FieldIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, VQFlowParser.RULE_fieldIdentifier);
	    try {
	        this.state = 821;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	        case 54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 816;
	            this.dotIdentifier();
	            break;
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 783:
	        case 785:
	        case 786:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 817;
	            this.qualifiedIdentifier();
	            this.state = 819;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	            if(la_===1) {
	                this.state = 818;
	                this.dotIdentifier();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	simpleExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SimpleExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 128;
	    this.enterRecursionRule(localctx, 128, VQFlowParser.RULE_simpleExpr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleExprVariableContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 824;
	            this.variable();
	            this.state = 828;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            if(la_===1) {
	                this.state = 825;
	                this.equal();
	                this.state = 826;
	                this.expr(0);

	            }
	            break;

	        case 2:
	            localctx = new SimpleExprColumnRefContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 830;
	            this.columnRef();
	            break;

	        case 3:
	            localctx = new SimpleExprRuntimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 831;
	            this.runtimeFunctionCall();
	            break;

	        case 4:
	            localctx = new SimpleExprFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 832;
	            this.functionCall();
	            break;

	        case 5:
	            localctx = new SimpleExprLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 833;
	            this.literal();
	            break;

	        case 6:
	            localctx = new SimpleExprParamMarkerContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 834;
	            this.match(VQFlowParser.PARAM_MARKER);
	            break;

	        case 7:
	            localctx = new SimpleExprSumContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 835;
	            this.sumExpr();
	            break;

	        case 8:
	            localctx = new SimpleExprGroupingOperationContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 836;
	            this.groupingOperation();
	            break;

	        case 9:
	            localctx = new SimpleExprUnaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 837;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 70254592) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 838;
	            this.simpleExpr(14);
	            break;

	        case 10:
	            localctx = new SimpleExprNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 839;
	            this.not2Rule();
	            this.state = 840;
	            this.simpleExpr(13);
	            break;

	        case 11:
	            localctx = new SimpleExprListContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 843;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===526) {
	                this.state = 842;
	                this.match(VQFlowParser.ROW_SYMBOL);
	            }

	            this.state = 845;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 846;
	            this.exprList();
	            this.state = 847;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 12:
	            localctx = new SimpleExprSubQueryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===223) {
	                this.state = 849;
	                this.match(VQFlowParser.EXISTS_SYMBOL);
	            }

	            this.state = 852;
	            this.subquery();
	            break;

	        case 13:
	            localctx = new SimpleExprOdbcContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 853;
	            this.match(VQFlowParser.OPEN_CURLY_SYMBOL);
	            this.state = 854;
	            this.identifier();
	            this.state = 855;
	            this.expr(0);
	            this.state = 856;
	            this.match(VQFlowParser.CLOSE_CURLY_SYMBOL);
	            break;

	        case 14:
	            localctx = new SimpleExprMatchContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 858;
	            this.match(VQFlowParser.MATCH_SYMBOL);
	            this.state = 859;
	            this.identListArg();
	            this.state = 860;
	            this.match(VQFlowParser.AGAINST_SYMBOL);
	            this.state = 861;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 862;
	            this.bitExpr(0);
	            this.state = 864;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===296 || _la===680) {
	                this.state = 863;
	                this.fulltextOptions();
	            }

	            this.state = 866;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 15:
	            localctx = new SimpleExprBinaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 868;
	            this.match(VQFlowParser.BINARY_SYMBOL);
	            this.state = 869;
	            this.simpleExpr(8);
	            break;

	        case 16:
	            localctx = new SimpleExprCastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 870;
	            this.match(VQFlowParser.CAST_SYMBOL);
	            this.state = 871;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 872;
	            this.expr(0);
	            this.state = 873;
	            this.match(VQFlowParser.AS_SYMBOL);
	            this.state = 874;
	            this.castType();
	            this.state = 876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===766) {
	                this.state = 875;
	                this.arrayCast();
	            }

	            this.state = 878;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 17:
	            localctx = new SimpleExprCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 880;
	            this.match(VQFlowParser.CASE_SYMBOL);
	            this.state = 882;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & 103809082) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & 1054865489) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & 2008219283) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & 4143839181) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & 3922689471) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & 1049332799) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & 1877981753) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & 4116242303) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & 4047211893) !== 0) || ((((_la - 292)) & ~0x1f) == 0 && ((1 << (_la - 292)) & 2270776713) !== 0) || ((((_la - 324)) & ~0x1f) == 0 && ((1 << (_la - 324)) & 4294918357) !== 0) || ((((_la - 356)) & ~0x1f) == 0 && ((1 << (_la - 356)) & 4076371965) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & 1541367807) !== 0) || ((((_la - 421)) & ~0x1f) == 0 && ((1 << (_la - 421)) & 4294836843) !== 0) || ((((_la - 453)) & ~0x1f) == 0 && ((1 << (_la - 453)) & 1042775415) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133144799) !== 0) || ((((_la - 518)) & ~0x1f) == 0 && ((1 << (_la - 518)) & 2826493951) !== 0) || ((((_la - 550)) & ~0x1f) == 0 && ((1 << (_la - 550)) & 4113416695) !== 0) || ((((_la - 582)) & ~0x1f) == 0 && ((1 << (_la - 582)) & 3875470567) !== 0) || ((((_la - 614)) & ~0x1f) == 0 && ((1 << (_la - 614)) & 939442669) !== 0) || ((((_la - 646)) & ~0x1f) == 0 && ((1 << (_la - 646)) & 2067002281) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4286969079) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 505) !== 0)) {
	                this.state = 881;
	                this.expr(0);
	            }

	            this.state = 887; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 884;
	                this.whenExpression();
	                this.state = 885;
	                this.thenExpression();
	                this.state = 889; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===677);
	            this.state = 892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203) {
	                this.state = 891;
	                this.elseExpression();
	            }

	            this.state = 894;
	            this.match(VQFlowParser.END_SYMBOL);
	            break;

	        case 18:
	            localctx = new SimpleExprConvertContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 896;
	            this.match(VQFlowParser.CONVERT_SYMBOL);
	            this.state = 897;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 898;
	            this.expr(0);
	            this.state = 899;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 900;
	            this.castType();
	            this.state = 901;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 19:
	            localctx = new SimpleExprConvertUsingContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 903;
	            this.match(VQFlowParser.CONVERT_SYMBOL);
	            this.state = 904;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 905;
	            this.expr(0);
	            this.state = 906;
	            this.match(VQFlowParser.USING_SYMBOL);
	            this.state = 907;
	            this.charsetName();
	            this.state = 908;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 20:
	            localctx = new SimpleExprDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 910;
	            this.match(VQFlowParser.DEFAULT_SYMBOL);
	            this.state = 911;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 912;
	            this.simpleIdentifier();
	            this.state = 913;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 21:
	            localctx = new SimpleExprValuesContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 915;
	            this.match(VQFlowParser.VALUES_SYMBOL);
	            this.state = 916;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 917;
	            this.simpleIdentifier();
	            this.state = 918;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 22:
	            localctx = new SimpleExprIntervalContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 920;
	            this.match(VQFlowParser.INTERVAL_SYMBOL);
	            this.state = 921;
	            this.expr(0);
	            this.state = 922;
	            this.interval();
	            this.state = 923;
	            this.match(VQFlowParser.PLUS_OPERATOR);
	            this.state = 924;
	            this.expr(0);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 936;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 934;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SimpleExprConcatContext(this, new SimpleExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_simpleExpr);
	                    this.state = 928;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 929;
	                    this.match(VQFlowParser.CONCAT_PIPES_SYMBOL);
	                    this.state = 930;
	                    this.simpleExpr(16);
	                    break;

	                case 2:
	                    localctx = new SimpleExprCollateContext(this, new SimpleExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_simpleExpr);
	                    this.state = 931;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 932;
	                    this.match(VQFlowParser.COLLATE_SYMBOL);
	                    this.state = 933;
	                    this.textOrIdentifier();
	                    break;

	                } 
	            }
	            this.state = 938;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	runtimeFunctionCall() {
	    let localctx = new RuntimeFunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, VQFlowParser.RULE_runtimeFunctionCall);
	    var _la = 0; // Token type
	    try {
	        this.state = 1205;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 939;
	            localctx.name = this.match(VQFlowParser.CHAR_SYMBOL);
	            this.state = 940;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 941;
	            this.exprList();
	            this.state = 944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===657) {
	                this.state = 942;
	                this.match(VQFlowParser.USING_SYMBOL);
	                this.state = 943;
	                this.charsetName();
	            }

	            this.state = 946;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 948;
	            localctx.name = this.match(VQFlowParser.CURRENT_USER_SYMBOL);
	            this.state = 950;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	            if(la_===1) {
	                this.state = 949;
	                this.parentheses();

	            }
	            break;
	        case 168:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 952;
	            localctx.name = this.match(VQFlowParser.DATE_SYMBOL);
	            this.state = 953;
	            this.exprWithParentheses();
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 954;
	            localctx.name = this.match(VQFlowParser.DAY_SYMBOL);
	            this.state = 955;
	            this.exprWithParentheses();
	            break;
	        case 275:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 956;
	            localctx.name = this.match(VQFlowParser.HOUR_SYMBOL);
	            this.state = 957;
	            this.exprWithParentheses();
	            break;
	        case 288:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 958;
	            localctx.name = this.match(VQFlowParser.INSERT_SYMBOL);
	            this.state = 959;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 960;
	            this.expr(0);
	            this.state = 961;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 962;
	            this.expr(0);
	            this.state = 963;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 964;
	            this.expr(0);
	            this.state = 965;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 966;
	            this.expr(0);
	            this.state = 967;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 292:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 969;
	            localctx.name = this.match(VQFlowParser.INTERVAL_SYMBOL);
	            this.state = 970;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 971;
	            this.expr(0);
	            this.state = 974; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 972;
	                this.match(VQFlowParser.COMMA_SYMBOL);
	                this.state = 973;
	                this.expr(0);
	                this.state = 976; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===35);
	            this.state = 978;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 316:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 980;
	            localctx.name = this.match(VQFlowParser.LEFT_SYMBOL);
	            this.state = 981;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 982;
	            this.expr(0);
	            this.state = 983;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 984;
	            this.expr(0);
	            this.state = 985;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 384:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 987;
	            localctx.name = this.match(VQFlowParser.MINUTE_SYMBOL);
	            this.state = 988;
	            this.exprWithParentheses();
	            break;
	        case 391:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 989;
	            localctx.name = this.match(VQFlowParser.MONTH_SYMBOL);
	            this.state = 990;
	            this.exprWithParentheses();
	            break;
	        case 518:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 991;
	            localctx.name = this.match(VQFlowParser.RIGHT_SYMBOL);
	            this.state = 992;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 993;
	            this.expr(0);
	            this.state = 994;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 995;
	            this.expr(0);
	            this.state = 996;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 532:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 998;
	            localctx.name = this.match(VQFlowParser.SECOND_SYMBOL);
	            this.state = 999;
	            this.exprWithParentheses();
	            break;
	        case 622:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1000;
	            localctx.name = this.match(VQFlowParser.TIME_SYMBOL);
	            this.state = 1001;
	            this.exprWithParentheses();
	            break;
	        case 619:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1002;
	            localctx.name = this.match(VQFlowParser.TIMESTAMP_SYMBOL);
	            this.state = 1003;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1004;
	            this.expr(0);
	            this.state = 1007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 1005;
	                this.match(VQFlowParser.COMMA_SYMBOL);
	                this.state = 1006;
	                this.expr(0);
	            }

	            this.state = 1009;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 631:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1011;
	            this.trimFunction();
	            break;
	        case 654:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1012;
	            localctx.name = this.match(VQFlowParser.USER_SYMBOL);
	            this.state = 1013;
	            this.parentheses();
	            break;
	        case 662:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1014;
	            localctx.name = this.match(VQFlowParser.VALUES_SYMBOL);
	            this.state = 1015;
	            this.exprWithParentheses();
	            break;
	        case 691:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1016;
	            localctx.name = this.match(VQFlowParser.YEAR_SYMBOL);
	            this.state = 1017;
	            this.exprWithParentheses();
	            break;
	        case 59:
	        case 594:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1018;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===59 || _la===594)) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1019;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1020;
	            this.expr(0);
	            this.state = 1021;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1027;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1022;
	                this.expr(0);
	                break;

	            case 2:
	                this.state = 1023;
	                this.match(VQFlowParser.INTERVAL_SYMBOL);
	                this.state = 1024;
	                this.expr(0);
	                this.state = 1025;
	                this.interval();
	                break;

	            }
	            this.state = 1029;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 153:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1031;
	            localctx.name = this.match(VQFlowParser.CURDATE_SYMBOL);
	            this.state = 1033;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	            if(la_===1) {
	                this.state = 1032;
	                this.parentheses();

	            }
	            break;
	        case 160:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1035;
	            localctx.name = this.match(VQFlowParser.CURTIME_SYMBOL);
	            this.state = 1037;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	            if(la_===1) {
	                this.state = 1036;
	                this.timeFunctionParameters();

	            }
	            break;
	        case 166:
	        case 167:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1039;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===166 || _la===167)) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1040;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1041;
	            this.expr(0);
	            this.state = 1042;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1043;
	            this.match(VQFlowParser.INTERVAL_SYMBOL);
	            this.state = 1044;
	            this.expr(0);
	            this.state = 1045;
	            this.interval();
	            this.state = 1046;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 231:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1048;
	            localctx.name = this.match(VQFlowParser.EXTRACT_SYMBOL);
	            this.state = 1049;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1050;
	            this.interval();
	            this.state = 1051;
	            this.match(VQFlowParser.FROM_SYMBOL);
	            this.state = 1052;
	            this.expr(0);
	            this.state = 1053;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 259:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1055;
	            localctx.name = this.match(VQFlowParser.GET_FORMAT_SYMBOL);
	            this.state = 1056;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1057;
	            this.dateTimeTtype();
	            this.state = 1058;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1059;
	            this.expr(0);
	            this.state = 1060;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 412:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1062;
	            localctx.name = this.match(VQFlowParser.NOW_SYMBOL);
	            this.state = 1064;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	            if(la_===1) {
	                this.state = 1063;
	                this.timeFunctionParameters();

	            }
	            break;
	        case 454:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1066;
	            localctx.name = this.match(VQFlowParser.POSITION_SYMBOL);
	            this.state = 1067;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1068;
	            this.bitExpr(0);
	            this.state = 1069;
	            this.match(VQFlowParser.IN_SYMBOL);
	            this.state = 1070;
	            this.expr(0);
	            this.state = 1071;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 599:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1073;
	            this.substringFunction();
	            break;
	        case 605:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1074;
	            localctx.name = this.match(VQFlowParser.SYSDATE_SYMBOL);
	            this.state = 1076;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	            if(la_===1) {
	                this.state = 1075;
	                this.timeFunctionParameters();

	            }
	            break;
	        case 620:
	        case 621:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1078;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===620 || _la===621)) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1079;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1080;
	            this.intervalTimeStamp();
	            this.state = 1081;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1082;
	            this.expr(0);
	            this.state = 1083;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1084;
	            this.expr(0);
	            this.state = 1085;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 658:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1087;
	            localctx.name = this.match(VQFlowParser.UTC_DATE_SYMBOL);
	            this.state = 1089;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	            if(la_===1) {
	                this.state = 1088;
	                this.parentheses();

	            }
	            break;
	        case 660:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1091;
	            localctx.name = this.match(VQFlowParser.UTC_TIME_SYMBOL);
	            this.state = 1093;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	            if(la_===1) {
	                this.state = 1092;
	                this.timeFunctionParameters();

	            }
	            break;
	        case 659:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1095;
	            localctx.name = this.match(VQFlowParser.UTC_TIMESTAMP_SYMBOL);
	            this.state = 1097;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	            if(la_===1) {
	                this.state = 1096;
	                this.timeFunctionParameters();

	            }
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1099;
	            localctx.name = this.match(VQFlowParser.ASCII_SYMBOL);
	            this.state = 1100;
	            this.exprWithParentheses();
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1101;
	            localctx.name = this.match(VQFlowParser.CHARSET_SYMBOL);
	            this.state = 1102;
	            this.exprWithParentheses();
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1103;
	            localctx.name = this.match(VQFlowParser.COALESCE_SYMBOL);
	            this.state = 1104;
	            this.exprListWithParentheses();
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1105;
	            localctx.name = this.match(VQFlowParser.COLLATION_SYMBOL);
	            this.state = 1106;
	            this.exprWithParentheses();
	            break;
	        case 161:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1107;
	            localctx.name = this.match(VQFlowParser.DATABASE_SYMBOL);
	            this.state = 1108;
	            this.parentheses();
	            break;
	        case 277:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1109;
	            localctx.name = this.match(VQFlowParser.IF_SYMBOL);
	            this.state = 1110;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1111;
	            this.expr(0);
	            this.state = 1112;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1113;
	            this.expr(0);
	            this.state = 1114;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1115;
	            this.expr(0);
	            this.state = 1116;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1118;
	            localctx.name = this.match(VQFlowParser.FORMAT_SYMBOL);
	            this.state = 1119;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1120;
	            this.expr(0);
	            this.state = 1121;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1122;
	            this.expr(0);
	            this.state = 1125;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 1123;
	                this.match(VQFlowParser.COMMA_SYMBOL);
	                this.state = 1124;
	                this.expr(0);
	            }

	            this.state = 1127;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 379:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1129;
	            localctx.name = this.match(VQFlowParser.MICROSECOND_SYMBOL);
	            this.state = 1130;
	            this.exprWithParentheses();
	            break;
	        case 390:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1131;
	            localctx.name = this.match(VQFlowParser.MOD_SYMBOL);
	            this.state = 1132;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1133;
	            this.expr(0);
	            this.state = 1134;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1135;
	            this.expr(0);
	            this.state = 1136;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 422:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1138;
	            localctx.name = this.match(VQFlowParser.OLD_PASSWORD_SYMBOL);
	            this.state = 1139;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1140;
	            this.textLiteral();
	            this.state = 1141;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 446:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1143;
	            localctx.name = this.match(VQFlowParser.PASSWORD_SYMBOL);
	            this.state = 1144;
	            this.exprWithParentheses();
	            break;
	        case 469:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1145;
	            localctx.name = this.match(VQFlowParser.QUARTER_SYMBOL);
	            this.state = 1146;
	            this.exprWithParentheses();
	            break;
	        case 497:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1147;
	            localctx.name = this.match(VQFlowParser.REPEAT_SYMBOL);
	            this.state = 1148;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1149;
	            this.expr(0);
	            this.state = 1150;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1151;
	            this.expr(0);
	            this.state = 1152;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 498:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1154;
	            localctx.name = this.match(VQFlowParser.REPLACE_SYMBOL);
	            this.state = 1155;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1156;
	            this.expr(0);
	            this.state = 1157;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1158;
	            this.expr(0);
	            this.state = 1159;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1160;
	            this.expr(0);
	            this.state = 1161;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 516:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 1163;
	            localctx.name = this.match(VQFlowParser.REVERSE_SYMBOL);
	            this.state = 1164;
	            this.exprWithParentheses();
	            break;
	        case 524:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 1165;
	            localctx.name = this.match(VQFlowParser.ROW_COUNT_SYMBOL);
	            this.state = 1166;
	            this.parentheses();
	            break;
	        case 633:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 1167;
	            localctx.name = this.match(VQFlowParser.TRUNCATE_SYMBOL);
	            this.state = 1168;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1169;
	            this.expr(0);
	            this.state = 1170;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1171;
	            this.expr(0);
	            this.state = 1172;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 675:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 1174;
	            localctx.name = this.match(VQFlowParser.WEEK_SYMBOL);
	            this.state = 1175;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1176;
	            this.expr(0);
	            this.state = 1179;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 1177;
	                this.match(VQFlowParser.COMMA_SYMBOL);
	                this.state = 1178;
	                this.expr(0);
	            }

	            this.state = 1181;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 676:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 1183;
	            localctx.name = this.match(VQFlowParser.WEIGHT_STRING_SYMBOL);
	            this.state = 1184;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1185;
	            this.expr(0);
	            this.state = 1201;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1189;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===71) {
	                    this.state = 1186;
	                    this.match(VQFlowParser.AS_SYMBOL);
	                    this.state = 1187;
	                    this.match(VQFlowParser.CHAR_SYMBOL);
	                    this.state = 1188;
	                    this.wsNumCodepoints();
	                }

	                break;

	            case 2:
	                this.state = 1191;
	                this.match(VQFlowParser.AS_SYMBOL);
	                this.state = 1192;
	                this.match(VQFlowParser.BINARY_SYMBOL);
	                this.state = 1193;
	                this.wsNumCodepoints();
	                break;

	            case 3:
	                this.state = 1194;
	                this.match(VQFlowParser.COMMA_SYMBOL);
	                this.state = 1195;
	                this.ulong_number();
	                this.state = 1196;
	                this.match(VQFlowParser.COMMA_SYMBOL);
	                this.state = 1197;
	                this.ulong_number();
	                this.state = 1198;
	                this.match(VQFlowParser.COMMA_SYMBOL);
	                this.state = 1199;
	                this.ulong_number();
	                break;

	            }
	            this.state = 1203;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeTtype() {
	    let localctx = new DateTimeTtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, VQFlowParser.RULE_dateTimeTtype);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1207;
	        _la = this._input.LA(1);
	        if(!(_la===165 || _la===168 || _la===619 || _la===622)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimFunction() {
	    let localctx = new TrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, VQFlowParser.RULE_trimFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1209;
	        this.match(VQFlowParser.TRIM_SYMBOL);
	        this.state = 1210;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 20:
	        case 21:
	        case 25:
	        case 26:
	        case 34:
	        case 38:
	        case 40:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 86:
	        case 87:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 152:
	        case 153:
	        case 154:
	        case 157:
	        case 159:
	        case 160:
	        case 161:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 173:
	        case 174:
	        case 178:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 223:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 231:
	        case 232:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 264:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 277:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 316:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 386:
	        case 387:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 416:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 587:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 666:
	        case 667:
	        case 670:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	            this.state = 1211;
	            this.expr(0);
	            this.state = 1214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===249) {
	                this.state = 1212;
	                this.match(VQFlowParser.FROM_SYMBOL);
	                this.state = 1213;
	                this.expr(0);
	            }

	            break;
	        case 313:
	            this.state = 1216;
	            this.match(VQFlowParser.LEADING_SYMBOL);
	            this.state = 1218;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & 103809082) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & 1054865489) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & 2008219283) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & 4143839181) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & 3922689471) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & 1049332799) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & 1877981753) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & 4116242303) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & 4047211893) !== 0) || ((((_la - 292)) & ~0x1f) == 0 && ((1 << (_la - 292)) & 2270776713) !== 0) || ((((_la - 324)) & ~0x1f) == 0 && ((1 << (_la - 324)) & 4294918357) !== 0) || ((((_la - 356)) & ~0x1f) == 0 && ((1 << (_la - 356)) & 4076371965) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & 1541367807) !== 0) || ((((_la - 421)) & ~0x1f) == 0 && ((1 << (_la - 421)) & 4294836843) !== 0) || ((((_la - 453)) & ~0x1f) == 0 && ((1 << (_la - 453)) & 1042775415) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133144799) !== 0) || ((((_la - 518)) & ~0x1f) == 0 && ((1 << (_la - 518)) & 2826493951) !== 0) || ((((_la - 550)) & ~0x1f) == 0 && ((1 << (_la - 550)) & 4113416695) !== 0) || ((((_la - 582)) & ~0x1f) == 0 && ((1 << (_la - 582)) & 3875470567) !== 0) || ((((_la - 614)) & ~0x1f) == 0 && ((1 << (_la - 614)) & 939442669) !== 0) || ((((_la - 646)) & ~0x1f) == 0 && ((1 << (_la - 646)) & 2067002281) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4286969079) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 505) !== 0)) {
	                this.state = 1217;
	                this.expr(0);
	            }

	            this.state = 1220;
	            this.match(VQFlowParser.FROM_SYMBOL);
	            this.state = 1221;
	            this.expr(0);
	            break;
	        case 627:
	            this.state = 1222;
	            this.match(VQFlowParser.TRAILING_SYMBOL);
	            this.state = 1224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & 103809082) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & 1054865489) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & 2008219283) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & 4143839181) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & 3922689471) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & 1049332799) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & 1877981753) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & 4116242303) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & 4047211893) !== 0) || ((((_la - 292)) & ~0x1f) == 0 && ((1 << (_la - 292)) & 2270776713) !== 0) || ((((_la - 324)) & ~0x1f) == 0 && ((1 << (_la - 324)) & 4294918357) !== 0) || ((((_la - 356)) & ~0x1f) == 0 && ((1 << (_la - 356)) & 4076371965) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & 1541367807) !== 0) || ((((_la - 421)) & ~0x1f) == 0 && ((1 << (_la - 421)) & 4294836843) !== 0) || ((((_la - 453)) & ~0x1f) == 0 && ((1 << (_la - 453)) & 1042775415) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133144799) !== 0) || ((((_la - 518)) & ~0x1f) == 0 && ((1 << (_la - 518)) & 2826493951) !== 0) || ((((_la - 550)) & ~0x1f) == 0 && ((1 << (_la - 550)) & 4113416695) !== 0) || ((((_la - 582)) & ~0x1f) == 0 && ((1 << (_la - 582)) & 3875470567) !== 0) || ((((_la - 614)) & ~0x1f) == 0 && ((1 << (_la - 614)) & 939442669) !== 0) || ((((_la - 646)) & ~0x1f) == 0 && ((1 << (_la - 646)) & 2067002281) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4286969079) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 505) !== 0)) {
	                this.state = 1223;
	                this.expr(0);
	            }

	            this.state = 1226;
	            this.match(VQFlowParser.FROM_SYMBOL);
	            this.state = 1227;
	            this.expr(0);
	            break;
	        case 97:
	            this.state = 1228;
	            this.match(VQFlowParser.BOTH_SYMBOL);
	            this.state = 1230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & 103809082) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & 1054865489) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & 2008219283) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & 4143839181) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & 3922689471) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & 1049332799) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & 1877981753) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & 4116242303) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & 4047211893) !== 0) || ((((_la - 292)) & ~0x1f) == 0 && ((1 << (_la - 292)) & 2270776713) !== 0) || ((((_la - 324)) & ~0x1f) == 0 && ((1 << (_la - 324)) & 4294918357) !== 0) || ((((_la - 356)) & ~0x1f) == 0 && ((1 << (_la - 356)) & 4076371965) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & 1541367807) !== 0) || ((((_la - 421)) & ~0x1f) == 0 && ((1 << (_la - 421)) & 4294836843) !== 0) || ((((_la - 453)) & ~0x1f) == 0 && ((1 << (_la - 453)) & 1042775415) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133144799) !== 0) || ((((_la - 518)) & ~0x1f) == 0 && ((1 << (_la - 518)) & 2826493951) !== 0) || ((((_la - 550)) & ~0x1f) == 0 && ((1 << (_la - 550)) & 4113416695) !== 0) || ((((_la - 582)) & ~0x1f) == 0 && ((1 << (_la - 582)) & 3875470567) !== 0) || ((((_la - 614)) & ~0x1f) == 0 && ((1 << (_la - 614)) & 939442669) !== 0) || ((((_la - 646)) & ~0x1f) == 0 && ((1 << (_la - 646)) & 2067002281) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4286969079) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 505) !== 0)) {
	                this.state = 1229;
	                this.expr(0);
	            }

	            this.state = 1232;
	            this.match(VQFlowParser.FROM_SYMBOL);
	            this.state = 1233;
	            this.expr(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1236;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunctionParameters() {
	    let localctx = new TimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, VQFlowParser.RULE_timeFunctionParameters);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1238;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 1239;
	            this.fractionalPrecision();
	        }

	        this.state = 1242;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	substringFunction() {
	    let localctx = new SubstringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, VQFlowParser.RULE_substringFunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1244;
	        this.match(VQFlowParser.SUBSTRING_SYMBOL);
	        this.state = 1245;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1246;
	        this.expr(0);
	        this.state = 1259;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.state = 1247;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1248;
	            this.expr(0);
	            this.state = 1251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===35) {
	                this.state = 1249;
	                this.match(VQFlowParser.COMMA_SYMBOL);
	                this.state = 1250;
	                this.expr(0);
	            }

	            break;
	        case 249:
	            this.state = 1253;
	            this.match(VQFlowParser.FROM_SYMBOL);
	            this.state = 1254;
	            this.expr(0);
	            this.state = 1257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===246) {
	                this.state = 1255;
	                this.match(VQFlowParser.FOR_SYMBOL);
	                this.state = 1256;
	                this.expr(0);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1261;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fractionalPrecision() {
	    let localctx = new FractionalPrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, VQFlowParser.RULE_fractionalPrecision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1263;
	        this.match(VQFlowParser.INT_NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	real_ulong_number() {
	    let localctx = new Real_ulong_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, VQFlowParser.RULE_real_ulong_number);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1265;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 56) !== 0) || _la===50)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wsNumCodepoints() {
	    let localctx = new WsNumCodepointsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, VQFlowParser.RULE_wsNumCodepoints);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1267;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1268;
	        this.real_ulong_number();
	        this.state = 1269;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ulong_number() {
	    let localctx = new Ulong_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, VQFlowParser.RULE_ulong_number);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1271;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 56) !== 0) || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & 13) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprListWithParentheses() {
	    let localctx = new ExprListWithParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, VQFlowParser.RULE_exprListWithParentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1273;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1274;
	        this.exprList();
	        this.state = 1275;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equal() {
	    let localctx = new EqualContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, VQFlowParser.RULE_equal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1277;
	        _la = this._input.LA(1);
	        if(!(_la===12 || _la===13)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedIdentifier() {
	    let localctx = new QualifiedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, VQFlowParser.RULE_qualifiedIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1279;
	        this.identifier();
	        this.state = 1281;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        if(la_===1) {
	            this.state = 1280;
	            this.dotIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	udfExprList() {
	    let localctx = new UdfExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, VQFlowParser.RULE_udfExprList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this.udfExpr();
	        this.state = 1288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 1284;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1285;
	            this.udfExpr();
	            this.state = 1290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	udfExpr() {
	    let localctx = new UdfExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, VQFlowParser.RULE_udfExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1291;
	        this.expr(0);
	        this.state = 1293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348469499) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 465) !== 0)) {
	            this.state = 1292;
	            this.selectAlias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectAlias() {
	    let localctx = new SelectAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, VQFlowParser.RULE_selectAlias);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1296;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 1295;
	            this.match(VQFlowParser.AS_SYMBOL);
	        }

	        this.state = 1300;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1298;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 1299;
	            this.textStringLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, VQFlowParser.RULE_functionCall);
	    var _la = 0; // Token type
	    try {
	        this.state = 1316;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1302;
	            this.pureIdentifier();
	            this.state = 1303;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & 103809082) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & 1054865489) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & 2008219283) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & 4143839181) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & 3922689471) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & 1049332799) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & 1877981753) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & 4116242303) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & 4047211893) !== 0) || ((((_la - 292)) & ~0x1f) == 0 && ((1 << (_la - 292)) & 2270776713) !== 0) || ((((_la - 324)) & ~0x1f) == 0 && ((1 << (_la - 324)) & 4294918357) !== 0) || ((((_la - 356)) & ~0x1f) == 0 && ((1 << (_la - 356)) & 4076371965) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & 1541367807) !== 0) || ((((_la - 421)) & ~0x1f) == 0 && ((1 << (_la - 421)) & 4294836843) !== 0) || ((((_la - 453)) & ~0x1f) == 0 && ((1 << (_la - 453)) & 1042775415) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133144799) !== 0) || ((((_la - 518)) & ~0x1f) == 0 && ((1 << (_la - 518)) & 2826493951) !== 0) || ((((_la - 550)) & ~0x1f) == 0 && ((1 << (_la - 550)) & 4113416695) !== 0) || ((((_la - 582)) & ~0x1f) == 0 && ((1 << (_la - 582)) & 3875470567) !== 0) || ((((_la - 614)) & ~0x1f) == 0 && ((1 << (_la - 614)) & 939442669) !== 0) || ((((_la - 646)) & ~0x1f) == 0 && ((1 << (_la - 646)) & 2067002281) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4286969079) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 505) !== 0)) {
	                this.state = 1304;
	                this.udfExprList();
	            }

	            this.state = 1307;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1309;
	            this.qualifiedIdentifier();
	            this.state = 1310;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & 103809082) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & 1054865489) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & 2008219283) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & 4143839181) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & 3922689471) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & 1049332799) !== 0) || ((((_la - 196)) & ~0x1f) == 0 && ((1 << (_la - 196)) & 1877981753) !== 0) || ((((_la - 228)) & ~0x1f) == 0 && ((1 << (_la - 228)) & 4116242303) !== 0) || ((((_la - 260)) & ~0x1f) == 0 && ((1 << (_la - 260)) & 4047211893) !== 0) || ((((_la - 292)) & ~0x1f) == 0 && ((1 << (_la - 292)) & 2270776713) !== 0) || ((((_la - 324)) & ~0x1f) == 0 && ((1 << (_la - 324)) & 4294918357) !== 0) || ((((_la - 356)) & ~0x1f) == 0 && ((1 << (_la - 356)) & 4076371965) !== 0) || ((((_la - 389)) & ~0x1f) == 0 && ((1 << (_la - 389)) & 1541367807) !== 0) || ((((_la - 421)) & ~0x1f) == 0 && ((1 << (_la - 421)) & 4294836843) !== 0) || ((((_la - 453)) & ~0x1f) == 0 && ((1 << (_la - 453)) & 1042775415) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133144799) !== 0) || ((((_la - 518)) & ~0x1f) == 0 && ((1 << (_la - 518)) & 2826493951) !== 0) || ((((_la - 550)) & ~0x1f) == 0 && ((1 << (_la - 550)) & 4113416695) !== 0) || ((((_la - 582)) & ~0x1f) == 0 && ((1 << (_la - 582)) & 3875470567) !== 0) || ((((_la - 614)) & ~0x1f) == 0 && ((1 << (_la - 614)) & 939442669) !== 0) || ((((_la - 646)) & ~0x1f) == 0 && ((1 << (_la - 646)) & 2067002281) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4286969079) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 505) !== 0)) {
	                this.state = 1311;
	                this.exprList();
	            }

	            this.state = 1314;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fulltextOptions() {
	    let localctx = new FulltextOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, VQFlowParser.RULE_fulltextOptions);
	    var _la = 0; // Token type
	    try {
	        this.state = 1333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1318;
	            this.match(VQFlowParser.IN_SYMBOL);
	            this.state = 1319;
	            this.match(VQFlowParser.BOOLEAN_SYMBOL);
	            this.state = 1320;
	            this.match(VQFlowParser.MODE_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1321;
	            this.match(VQFlowParser.IN_SYMBOL);
	            this.state = 1322;
	            this.match(VQFlowParser.NATURAL_SYMBOL);
	            this.state = 1323;
	            this.match(VQFlowParser.LANGUAGE_SYMBOL);
	            this.state = 1324;
	            this.match(VQFlowParser.MODE_SYMBOL);
	            this.state = 1328;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===680) {
	                this.state = 1325;
	                this.match(VQFlowParser.WITH_SYMBOL);
	                this.state = 1326;
	                this.match(VQFlowParser.QUERY_SYMBOL);
	                this.state = 1327;
	                this.match(VQFlowParser.EXPANSION_SYMBOL);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1330;
	            this.match(VQFlowParser.WITH_SYMBOL);
	            this.state = 1331;
	            this.match(VQFlowParser.QUERY_SYMBOL);
	            this.state = 1332;
	            this.match(VQFlowParser.EXPANSION_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, VQFlowParser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.state = 1344;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1335;
	            this.textLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1336;
	            this.numLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1337;
	            this.temporalLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1338;
	            this.nullLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1339;
	            this.boolLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===782) {
	                this.state = 1340;
	                this.match(VQFlowParser.UNDERSCORE_CHARSET);
	            }

	            this.state = 1343;
	            _la = this._input.LA(1);
	            if(!(_la===50 || _la===51)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numLiteral() {
	    let localctx = new NumLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, VQFlowParser.RULE_numLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 56) !== 0) || _la===52 || _la===53)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolLiteral() {
	    let localctx = new BoolLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, VQFlowParser.RULE_boolLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1348;
	        _la = this._input.LA(1);
	        if(!(_la===232 || _la===632)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, VQFlowParser.RULE_nullLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1350;
	        _la = this._input.LA(1);
	        if(!(_la===48 || _la===416)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalLiteral() {
	    let localctx = new TemporalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, VQFlowParser.RULE_temporalLiteral);
	    try {
	        this.state = 1358;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 168:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1352;
	            this.match(VQFlowParser.DATE_SYMBOL);
	            this.state = 1353;
	            this.match(VQFlowParser.SINGLE_QUOTED_TEXT);
	            break;
	        case 622:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1354;
	            this.match(VQFlowParser.TIME_SYMBOL);
	            this.state = 1355;
	            this.match(VQFlowParser.SINGLE_QUOTED_TEXT);
	            break;
	        case 619:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1356;
	            this.match(VQFlowParser.TIMESTAMP_SYMBOL);
	            this.state = 1357;
	            this.match(VQFlowParser.SINGLE_QUOTED_TEXT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textLiteral() {
	    let localctx = new TextLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, VQFlowParser.RULE_textLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1365;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 782:
	        case 786:
	        case 787:
	            this.state = 1361;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===782) {
	                this.state = 1360;
	                this.match(VQFlowParser.UNDERSCORE_CHARSET);
	            }

	            this.state = 1363;
	            this.textStringLiteral();
	            break;
	        case 784:
	            this.state = 1364;
	            this.match(VQFlowParser.NCHAR_TEXT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1370;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1367;
	                this.textStringLiteral(); 
	            }
	            this.state = 1372;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sumExpr() {
	    let localctx = new SumExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, VQFlowParser.RULE_sumExpr);
	    var _la = 0; // Token type
	    try {
	        this.state = 1464;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1373;
	            localctx.name = this.match(VQFlowParser.AVG_SYMBOL);
	            this.state = 1374;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 1375;
	                this.match(VQFlowParser.DISTINCT_SYMBOL);
	            }

	            this.state = 1378;
	            this.inSumExpr();
	            this.state = 1379;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1381;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & 11) !== 0))) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1382;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1383;
	            this.inSumExpr();
	            this.state = 1384;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1386;
	            localctx.name = this.match(VQFlowParser.COUNT_SYMBOL);
	            this.state = 1387;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1389;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===64) {
	                this.state = 1388;
	                this.match(VQFlowParser.ALL_SYMBOL);
	            }

	            this.state = 1391;
	            this.match(VQFlowParser.MULT_OPERATOR);
	            this.state = 1392;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1393;
	            localctx.name = this.match(VQFlowParser.COUNT_SYMBOL);
	            this.state = 1394;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1402;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1396;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===64) {
	                    this.state = 1395;
	                    this.match(VQFlowParser.ALL_SYMBOL);
	                }

	                this.state = 1398;
	                this.match(VQFlowParser.MULT_OPERATOR);
	                break;

	            case 2:
	                this.state = 1399;
	                this.inSumExpr();
	                break;

	            case 3:
	                this.state = 1400;
	                this.match(VQFlowParser.DISTINCT_SYMBOL);
	                this.state = 1401;
	                this.exprList();
	                break;

	            }
	            this.state = 1404;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1405;
	            localctx.name = this.match(VQFlowParser.MIN_SYMBOL);
	            this.state = 1406;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1408;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 1407;
	                this.match(VQFlowParser.DISTINCT_SYMBOL);
	            }

	            this.state = 1410;
	            this.inSumExpr();
	            this.state = 1411;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1413;
	            localctx.name = this.match(VQFlowParser.MAX_SYMBOL);
	            this.state = 1414;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1416;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 1415;
	                this.match(VQFlowParser.DISTINCT_SYMBOL);
	            }

	            this.state = 1418;
	            this.inSumExpr();
	            this.state = 1419;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1421;
	            localctx.name = this.match(VQFlowParser.STD_SYMBOL);
	            this.state = 1422;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1423;
	            this.inSumExpr();
	            this.state = 1424;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1426;
	            localctx.name = this.match(VQFlowParser.VARIANCE_SYMBOL);
	            this.state = 1427;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1428;
	            this.inSumExpr();
	            this.state = 1429;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1431;
	            localctx.name = this.match(VQFlowParser.STDDEV_SAMP_SYMBOL);
	            this.state = 1432;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1433;
	            this.inSumExpr();
	            this.state = 1434;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1436;
	            localctx.name = this.match(VQFlowParser.VAR_SAMP_SYMBOL);
	            this.state = 1437;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1438;
	            this.inSumExpr();
	            this.state = 1439;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1441;
	            localctx.name = this.match(VQFlowParser.SUM_SYMBOL);
	            this.state = 1442;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1444;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 1443;
	                this.match(VQFlowParser.DISTINCT_SYMBOL);
	            }

	            this.state = 1446;
	            this.inSumExpr();
	            this.state = 1447;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1449;
	            localctx.name = this.match(VQFlowParser.GROUP_CONCAT_SYMBOL);
	            this.state = 1450;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 1451;
	                this.match(VQFlowParser.DISTINCT_SYMBOL);
	            }

	            this.state = 1454;
	            this.exprList();
	            this.state = 1456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===433) {
	                this.state = 1455;
	                this.orderClause();
	            }

	            this.state = 1460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===536) {
	                this.state = 1458;
	                this.match(VQFlowParser.SEPARATOR_SYMBOL);
	                this.state = 1459;
	                this.textString();
	            }

	            this.state = 1462;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textString() {
	    let localctx = new TextStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, VQFlowParser.RULE_textString);
	    try {
	        this.state = 1469;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 786:
	        case 787:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1466;
	            this.textStringLiteral();
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1467;
	            this.match(VQFlowParser.HEX_NUMBER);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1468;
	            this.match(VQFlowParser.BIN_NUMBER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inSumExpr() {
	    let localctx = new InSumExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, VQFlowParser.RULE_inSumExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 1471;
	            this.match(VQFlowParser.ALL_SYMBOL);
	        }

	        this.state = 1474;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, VQFlowParser.RULE_variable);
	    try {
	        this.state = 1478;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 45:
	        case 46:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1476;
	            this.userVariable();
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1477;
	            this.systemVariable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCast() {
	    let localctx = new ArrayCastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, VQFlowParser.RULE_arrayCast);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1480;
	        this.match(VQFlowParser.ARRAY_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprWithParentheses() {
	    let localctx = new ExprWithParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, VQFlowParser.RULE_exprWithParentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1482;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1483;
	        this.expr(0);
	        this.state = 1484;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parentheses() {
	    let localctx = new ParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, VQFlowParser.RULE_parentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1486;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1487;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderList() {
	    let localctx = new OrderListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, VQFlowParser.RULE_orderList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1489;
	        this.orderExpression();
	        this.state = 1494;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 1490;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1491;
	            this.orderExpression();
	            this.state = 1496;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderClause() {
	    let localctx = new OrderClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, VQFlowParser.RULE_orderClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1497;
	        this.match(VQFlowParser.ORDER_SYMBOL);
	        this.state = 1498;
	        this.match(VQFlowParser.BY_SYMBOL);
	        this.state = 1499;
	        this.orderList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderExpression() {
	    let localctx = new OrderExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, VQFlowParser.RULE_orderExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1501;
	        this.expr(0);
	        this.state = 1503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===72 || _la===184) {
	            this.state = 1502;
	            this.direction();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	direction() {
	    let localctx = new DirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, VQFlowParser.RULE_direction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1505;
	        _la = this._input.LA(1);
	        if(!(_la===72 || _la===184)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleExprWithParentheses() {
	    let localctx = new SimpleExprWithParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, VQFlowParser.RULE_simpleExprWithParentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1507;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1508;
	        this.simpleExpr(0);
	        this.state = 1509;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userVariable() {
	    let localctx = new UserVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, VQFlowParser.RULE_userVariable);
	    try {
	        this.state = 1514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 45:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1511;
	            this.match(VQFlowParser.AT_SIGN_SYMBOL);
	            this.state = 1512;
	            this.textOrIdentifier();
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1513;
	            this.match(VQFlowParser.AT_TEXT_SUFFIX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	systemVariable() {
	    let localctx = new SystemVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, VQFlowParser.RULE_systemVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1516;
	        this.match(VQFlowParser.AT_AT_SIGN_SYMBOL);
	        this.state = 1518;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        if(la_===1) {
	            this.state = 1517;
	            this.varIdentType();

	        }
	        this.state = 1520;
	        this.textOrIdentifier();
	        this.state = 1522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        if(la_===1) {
	            this.state = 1521;
	            this.dotIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varIdentType() {
	    let localctx = new VarIdentTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, VQFlowParser.RULE_varIdentType);
	    try {
	        this.state = 1530;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 260:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1524;
	            this.match(VQFlowParser.GLOBAL_SYMBOL);
	            this.state = 1525;
	            this.match(VQFlowParser.DOT_SYMBOL);
	            break;
	        case 326:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1526;
	            this.match(VQFlowParser.LOCAL_SYMBOL);
	            this.state = 1527;
	            this.match(VQFlowParser.DOT_SYMBOL);
	            break;
	        case 539:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1528;
	            this.match(VQFlowParser.SESSION_SYMBOL);
	            this.state = 1529;
	            this.match(VQFlowParser.DOT_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingOperation() {
	    let localctx = new GroupingOperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, VQFlowParser.RULE_groupingOperation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1532;
	        this.match(VQFlowParser.GROUPING_SYMBOL);
	        this.state = 1533;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1534;
	        this.exprList();
	        this.state = 1535;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprList() {
	    let localctx = new ExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, VQFlowParser.RULE_exprList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1537;
	        this.expr(0);
	        this.state = 1542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 1538;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1539;
	            this.expr(0);
	            this.state = 1544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castType() {
	    let localctx = new CastTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, VQFlowParser.RULE_castType);
	    var _la = 0; // Token type
	    try {
	        this.state = 1587;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1545;
	            this.match(VQFlowParser.BINARY_SYMBOL);
	            this.state = 1547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 1546;
	                this.fieldLength();
	            }

	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1549;
	            this.match(VQFlowParser.CHAR_SYMBOL);
	            this.state = 1551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 1550;
	                this.fieldLength();
	            }

	            this.state = 1554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & 134225921) !== 0) || _la===112 || _la===113 || _la===642) {
	                this.state = 1553;
	                this.charsetWithOptBinary();
	            }

	            break;
	        case 399:
	        case 402:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1556;
	            this.nchar();
	            this.state = 1558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 1557;
	                this.fieldLength();
	            }

	            break;
	        case 549:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1560;
	            this.match(VQFlowParser.SIGNED_SYMBOL);
	            this.state = 1562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===294) {
	                this.state = 1561;
	                this.match(VQFlowParser.INT_SYMBOL);
	            }

	            break;
	        case 648:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1564;
	            this.match(VQFlowParser.UNSIGNED_SYMBOL);
	            this.state = 1566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===294) {
	                this.state = 1565;
	                this.match(VQFlowParser.INT_SYMBOL);
	            }

	            break;
	        case 168:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1568;
	            this.match(VQFlowParser.DATE_SYMBOL);
	            break;
	        case 622:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1569;
	            this.match(VQFlowParser.TIME_SYMBOL);
	            this.state = 1571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 1570;
	                this.typeDatetimePrecision();
	            }

	            break;
	        case 165:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1573;
	            this.match(VQFlowParser.DATETIME_SYMBOL);
	            this.state = 1575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 1574;
	                this.typeDatetimePrecision();
	            }

	            break;
	        case 176:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1577;
	            this.match(VQFlowParser.DECIMAL_SYMBOL);
	            this.state = 1579;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 1578;
	                this.floatOptions();
	            }

	            break;
	        case 306:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1581;
	            this.match(VQFlowParser.JSON_SYMBOL);
	            break;
	        case 195:
	        case 477:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1582;
	            this.realType();
	            break;
	        case 241:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1583;
	            this.match(VQFlowParser.FLOAT_SYMBOL);
	            this.state = 1585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 1584;
	                this.standardFloatOptions();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatOptions() {
	    let localctx = new FloatOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, VQFlowParser.RULE_floatOptions);
	    try {
	        this.state = 1591;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1589;
	            this.fieldLength();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1590;
	            this.precision();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	standardFloatOptions() {
	    let localctx = new StandardFloatOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, VQFlowParser.RULE_standardFloatOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1593;
	        this.precision();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precision() {
	    let localctx = new PrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, VQFlowParser.RULE_precision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1595;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1596;
	        this.match(VQFlowParser.INT_NUMBER);
	        this.state = 1597;
	        this.match(VQFlowParser.COMMA_SYMBOL);
	        this.state = 1598;
	        this.match(VQFlowParser.INT_NUMBER);
	        this.state = 1599;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ascii() {
	    let localctx = new AsciiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, VQFlowParser.RULE_ascii);
	    var _la = 0; // Token type
	    try {
	        this.state = 1607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1601;
	            this.match(VQFlowParser.ASCII_SYMBOL);
	            this.state = 1603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 1602;
	                this.match(VQFlowParser.BINARY_SYMBOL);
	            }

	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1605;
	            this.match(VQFlowParser.BINARY_SYMBOL);
	            this.state = 1606;
	            this.match(VQFlowParser.ASCII_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unicode() {
	    let localctx = new UnicodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, VQFlowParser.RULE_unicode);
	    var _la = 0; // Token type
	    try {
	        this.state = 1615;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 642:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1609;
	            this.match(VQFlowParser.UNICODE_SYMBOL);
	            this.state = 1611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 1610;
	                this.match(VQFlowParser.BINARY_SYMBOL);
	            }

	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1613;
	            this.match(VQFlowParser.BINARY_SYMBOL);
	            this.state = 1614;
	            this.match(VQFlowParser.UNICODE_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textStringLiteral() {
	    let localctx = new TextStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, VQFlowParser.RULE_textStringLiteral);
	    try {
	        this.state = 1619;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 787:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1617;
	            localctx.value = this.match(VQFlowParser.SINGLE_QUOTED_TEXT);
	            break;
	        case 786:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1618;
	            localctx.value = this.match(VQFlowParser.DOUBLE_QUOTED_TEXT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetName() {
	    let localctx = new CharsetNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, VQFlowParser.RULE_charsetName);
	    try {
	        this.state = 1624;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 783:
	        case 785:
	        case 786:
	        case 787:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1621;
	            this.textOrIdentifier();
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1622;
	            this.match(VQFlowParser.BINARY_SYMBOL);
	            break;
	        case 178:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1623;
	            this.match(VQFlowParser.DEFAULT_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textOrIdentifier() {
	    let localctx = new TextOrIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, VQFlowParser.RULE_textOrIdentifier);
	    try {
	        this.state = 1628;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1626;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1627;
	            this.textStringLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charset() {
	    let localctx = new CharsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, VQFlowParser.RULE_charset);
	    try {
	        this.state = 1633;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1630;
	            this.match(VQFlowParser.CHAR_SYMBOL);
	            this.state = 1631;
	            this.match(VQFlowParser.SET_SYMBOL);
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1632;
	            this.match(VQFlowParser.CHARSET_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetWithOptBinary() {
	    let localctx = new CharsetWithOptBinaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, VQFlowParser.RULE_charsetWithOptBinary);
	    var _la = 0; // Token type
	    try {
	        this.state = 1649;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1635;
	            this.ascii();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1636;
	            this.unicode();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1637;
	            this.match(VQFlowParser.BYTE_SYMBOL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1638;
	            this.charset();
	            this.state = 1639;
	            this.charsetName();
	            this.state = 1641;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 1640;
	                this.match(VQFlowParser.BINARY_SYMBOL);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1643;
	            this.match(VQFlowParser.BINARY_SYMBOL);
	            this.state = 1647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===112 || _la===113) {
	                this.state = 1644;
	                this.charset();
	                this.state = 1645;
	                this.charsetName();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDatetimePrecision() {
	    let localctx = new TypeDatetimePrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, VQFlowParser.RULE_typeDatetimePrecision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1651;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1652;
	        this.match(VQFlowParser.INT_NUMBER);
	        this.state = 1653;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nchar() {
	    let localctx = new NcharContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, VQFlowParser.RULE_nchar);
	    try {
	        this.state = 1658;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 402:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1655;
	            localctx.type = this.match(VQFlowParser.NCHAR_SYMBOL);
	            break;
	        case 399:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1656;
	            localctx.type = this.match(VQFlowParser.NATIONAL_SYMBOL);
	            this.state = 1657;
	            this.match(VQFlowParser.CHAR_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realType() {
	    let localctx = new RealTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, VQFlowParser.RULE_realType);
	    var _la = 0; // Token type
	    try {
	        this.state = 1665;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 477:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1660;
	            localctx.type = this.match(VQFlowParser.REAL_SYMBOL);
	            break;
	        case 195:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1661;
	            localctx.type = this.match(VQFlowParser.DOUBLE_SYMBOL);
	            this.state = 1663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===456) {
	                this.state = 1662;
	                this.match(VQFlowParser.PRECISION_SYMBOL);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldLength() {
	    let localctx = new FieldLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, VQFlowParser.RULE_fieldLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1667;
	        this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	        this.state = 1670;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 5:
	        case 50:
	            this.state = 1668;
	            this.real_ulonglong_number();
	            break;
	        case 52:
	            this.state = 1669;
	            this.match(VQFlowParser.DECIMAL_NUMBER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1672;
	        this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	real_ulonglong_number() {
	    let localctx = new Real_ulonglong_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, VQFlowParser.RULE_real_ulonglong_number);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1674;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 56) !== 0) || _la===50)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalTimeStamp() {
	    let localctx = new IntervalTimeStampContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, VQFlowParser.RULE_intervalTimeStamp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1676;
	        _la = this._input.LA(1);
	        if(!(_la===173 || _la===275 || ((((_la - 379)) & ~0x1f) == 0 && ((1 << (_la - 379)) & 4129) !== 0) || _la===469 || _la===532 || _la===675 || _la===691)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval() {
	    let localctx = new IntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, VQFlowParser.RULE_interval);
	    var _la = 0; // Token type
	    try {
	        this.state = 1680;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 173:
	        case 275:
	        case 379:
	        case 384:
	        case 391:
	        case 469:
	        case 532:
	        case 675:
	        case 691:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1678;
	            this.intervalTimeStamp();
	            break;
	        case 169:
	        case 170:
	        case 171:
	        case 172:
	        case 272:
	        case 273:
	        case 274:
	        case 382:
	        case 383:
	        case 531:
	        case 690:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1679;
	            _la = this._input.LA(1);
	            if(!(((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & 15) !== 0) || ((((_la - 272)) & ~0x1f) == 0 && ((1 << (_la - 272)) & 7) !== 0) || _la===382 || _la===383 || _la===531 || _la===690)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identListArg() {
	    let localctx = new IdentListArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, VQFlowParser.RULE_identListArg);
	    try {
	        this.state = 1687;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 783:
	        case 785:
	        case 786:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1682;
	            this.identList();
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1683;
	            this.match(VQFlowParser.OPEN_PAR_SYMBOL);
	            this.state = 1684;
	            this.identList();
	            this.state = 1685;
	            this.match(VQFlowParser.CLOSE_PAR_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identList() {
	    let localctx = new IdentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, VQFlowParser.RULE_identList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1689;
	        this.simpleIdentifier();
	        this.state = 1694;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35) {
	            this.state = 1690;
	            this.match(VQFlowParser.COMMA_SYMBOL);
	            this.state = 1691;
	            this.simpleIdentifier();
	            this.state = 1696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	not2Rule() {
	    let localctx = new Not2RuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, VQFlowParser.RULE_not2Rule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1697;
	        _la = this._input.LA(1);
	        if(!(_la===1 || _la===25)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleIdentifier() {
	    let localctx = new SimpleIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, VQFlowParser.RULE_simpleIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 1709;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 783:
	        case 785:
	        case 786:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1699;
	            this.identifier();
	            this.state = 1704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34 || _la===54) {
	                this.state = 1700;
	                this.dotIdentifier();
	                this.state = 1702;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===34 || _la===54) {
	                    this.state = 1701;
	                    this.dotIdentifier();
	                }

	            }

	            break;
	        case 34:
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1706;
	            this.dotIdentifier();
	            this.state = 1707;
	            this.dotIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotIdentifier() {
	    let localctx = new DotIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, VQFlowParser.RULE_dotIdentifier);
	    try {
	        this.state = 1714;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1711;
	            this.match(VQFlowParser.DOT_IDENTIFIER);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1712;
	            this.match(VQFlowParser.DOT_SYMBOL);
	            this.state = 1713;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenExpression() {
	    let localctx = new WhenExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, VQFlowParser.RULE_whenExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1716;
	        this.match(VQFlowParser.WHEN_SYMBOL);
	        this.state = 1717;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thenExpression() {
	    let localctx = new ThenExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, VQFlowParser.RULE_thenExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1719;
	        this.match(VQFlowParser.THEN_SYMBOL);
	        this.state = 1720;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseExpression() {
	    let localctx = new ElseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, VQFlowParser.RULE_elseExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1722;
	        this.match(VQFlowParser.ELSE_SYMBOL);
	        this.state = 1723;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	bitExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BitExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 262;
	    this.enterRecursionRule(localctx, 262, VQFlowParser.RULE_bitExpr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1726;
	        this.simpleExpr(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1754;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,203,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1752;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_bitExpr);
	                    this.state = 1728;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1729;
	                    localctx.op = this.match(VQFlowParser.BITWISE_XOR_OPERATOR);
	                    this.state = 1730;
	                    this.bitExpr(8);
	                    break;

	                case 2:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_bitExpr);
	                    this.state = 1731;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1732;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 29360128) !== 0) || _la===194 || _la===390)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1733;
	                    this.bitExpr(7);
	                    break;

	                case 3:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_bitExpr);
	                    this.state = 1734;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1735;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===20 || _la===21)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1736;
	                    this.bitExpr(6);
	                    break;

	                case 4:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_bitExpr);
	                    this.state = 1737;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1738;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===27 || _la===28)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1739;
	                    this.bitExpr(4);
	                    break;

	                case 5:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_bitExpr);
	                    this.state = 1740;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1741;
	                    localctx.op = this.match(VQFlowParser.BITWISE_AND_OPERATOR);
	                    this.state = 1742;
	                    this.bitExpr(3);
	                    break;

	                case 6:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_bitExpr);
	                    this.state = 1743;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1744;
	                    localctx.op = this.match(VQFlowParser.BITWISE_OR_OPERATOR);
	                    this.state = 1745;
	                    this.bitExpr(2);
	                    break;

	                case 7:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, VQFlowParser.RULE_bitExpr);
	                    this.state = 1746;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1747;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===20 || _la===21)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1748;
	                    this.match(VQFlowParser.INTERVAL_SYMBOL);
	                    this.state = 1749;
	                    this.expr(0);
	                    this.state = 1750;
	                    this.interval();
	                    break;

	                } 
	            }
	            this.state = 1756;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,203,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	tableWild() {
	    let localctx = new TableWildContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, VQFlowParser.RULE_tableWild);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1757;
	        this.identifier();
	        this.state = 1758;
	        this.match(VQFlowParser.DOT_SYMBOL);
	        this.state = 1762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2348436731) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2126194361) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2763972603) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903898225) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 4260841251) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2865167163) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 164391727) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 852126791) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1283301365) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4294445485) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171101655) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3133132511) !== 0) || ((((_la - 519)) & ~0x1f) == 0 && ((1 << (_la - 519)) & 3560730623) !== 0) || ((((_la - 551)) & ~0x1f) == 0 && ((1 << (_la - 551)) & 4204191995) !== 0) || ((((_la - 583)) & ~0x1f) == 0 && ((1 << (_la - 583)) & 4080828001) !== 0) || ((((_la - 616)) & ~0x1f) == 0 && ((1 << (_la - 616)) & 1308504187) !== 0) || ((((_la - 649)) & ~0x1f) == 0 && ((1 << (_la - 649)) & 256004213) !== 0) || ((((_la - 681)) & ~0x1f) == 0 && ((1 << (_la - 681)) & 4219860215) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & 3217466885) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & 4294950911) !== 0) || ((((_la - 779)) & ~0x1f) == 0 && ((1 << (_la - 779)) & 209) !== 0)) {
	            this.state = 1759;
	            this.identifier();
	            this.state = 1760;
	            this.match(VQFlowParser.DOT_SYMBOL);
	        }

	        this.state = 1764;
	        this.match(VQFlowParser.MULT_OPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pureIdentifier() {
	    let localctx = new PureIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, VQFlowParser.RULE_pureIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 1768;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 783:
	        case 785:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1766;
	            _la = this._input.LA(1);
	            if(!(_la===783 || _la===785)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 786:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1767;
	            this.match(VQFlowParser.DOUBLE_QUOTED_TEXT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, VQFlowParser.RULE_identifier);
	    try {
	        this.state = 1772;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 783:
	        case 785:
	        case 786:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1770;
	            this.pureIdentifier();
	            break;
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 67:
	        case 70:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 83:
	        case 87:
	        case 91:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 100:
	        case 101:
	        case 104:
	        case 107:
	        case 108:
	        case 110:
	        case 111:
	        case 112:
	        case 114:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 123:
	        case 124:
	        case 126:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 137:
	        case 138:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 146:
	        case 149:
	        case 152:
	        case 154:
	        case 159:
	        case 163:
	        case 164:
	        case 165:
	        case 168:
	        case 173:
	        case 174:
	        case 179:
	        case 180:
	        case 182:
	        case 186:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 196:
	        case 199:
	        case 200:
	        case 201:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 211:
	        case 212:
	        case 213:
	        case 214:
	        case 215:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 222:
	        case 225:
	        case 226:
	        case 228:
	        case 229:
	        case 230:
	        case 233:
	        case 234:
	        case 236:
	        case 237:
	        case 238:
	        case 239:
	        case 240:
	        case 242:
	        case 243:
	        case 247:
	        case 248:
	        case 250:
	        case 252:
	        case 254:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 262:
	        case 265:
	        case 266:
	        case 268:
	        case 270:
	        case 271:
	        case 275:
	        case 276:
	        case 279:
	        case 280:
	        case 281:
	        case 284:
	        case 289:
	        case 290:
	        case 291:
	        case 295:
	        case 299:
	        case 300:
	        case 302:
	        case 303:
	        case 306:
	        case 308:
	        case 311:
	        case 312:
	        case 314:
	        case 317:
	        case 318:
	        case 323:
	        case 324:
	        case 326:
	        case 328:
	        case 330:
	        case 331:
	        case 338:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 369:
	        case 370:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 389:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 402:
	        case 403:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 409:
	        case 413:
	        case 414:
	        case 417:
	        case 419:
	        case 421:
	        case 422:
	        case 424:
	        case 426:
	        case 427:
	        case 430:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 451:
	        case 452:
	        case 453:
	        case 455:
	        case 457:
	        case 458:
	        case 459:
	        case 461:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 469:
	        case 470:
	        case 471:
	        case 474:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 491:
	        case 492:
	        case 494:
	        case 495:
	        case 496:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 508:
	        case 510:
	        case 512:
	        case 513:
	        case 514:
	        case 516:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 524:
	        case 525:
	        case 526:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 532:
	        case 533:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 545:
	        case 547:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 564:
	        case 565:
	        case 566:
	        case 568:
	        case 569:
	        case 571:
	        case 574:
	        case 576:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 588:
	        case 589:
	        case 592:
	        case 593:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 607:
	        case 608:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 616:
	        case 617:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 628:
	        case 629:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 637:
	        case 638:
	        case 639:
	        case 640:
	        case 642:
	        case 643:
	        case 646:
	        case 649:
	        case 651:
	        case 653:
	        case 654:
	        case 655:
	        case 661:
	        case 663:
	        case 666:
	        case 671:
	        case 673:
	        case 674:
	        case 675:
	        case 676:
	        case 681:
	        case 682:
	        case 683:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 691:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 704:
	        case 705:
	        case 706:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 715:
	        case 717:
	        case 724:
	        case 725:
	        case 728:
	        case 730:
	        case 732:
	        case 733:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1771;
	            this.identifierKeyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeyword() {
	    let localctx = new IdentifierKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, VQFlowParser.RULE_identifierKeyword);
	    try {
	        this.state = 1788;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1779;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1774;
	                this.labelKeyword();
	                break;

	            case 2:
	                this.state = 1775;
	                this.roleOrIdentifierKeyword();
	                break;

	            case 3:
	                this.state = 1776;
	                this.match(VQFlowParser.EXECUTE_SYMBOL);
	                break;

	            case 4:
	                this.state = 1777;
	                this.match(VQFlowParser.SHUTDOWN_SYMBOL);
	                break;

	            case 5:
	                this.state = 1778;
	                this.match(VQFlowParser.RESTART_SYMBOL);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1786;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 66:
	            case 70:
	            case 75:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 87:
	            case 91:
	            case 94:
	            case 95:
	            case 96:
	            case 98:
	            case 104:
	            case 107:
	            case 108:
	            case 110:
	            case 111:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 123:
	            case 124:
	            case 126:
	            case 127:
	            case 129:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 137:
	            case 138:
	            case 140:
	            case 141:
	            case 142:
	            case 144:
	            case 149:
	            case 154:
	            case 159:
	            case 163:
	            case 164:
	            case 165:
	            case 168:
	            case 173:
	            case 179:
	            case 180:
	            case 182:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 199:
	            case 200:
	            case 201:
	            case 205:
	            case 207:
	            case 209:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 217:
	            case 218:
	            case 220:
	            case 221:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 233:
	            case 234:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 247:
	            case 248:
	            case 250:
	            case 254:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 262:
	            case 266:
	            case 270:
	            case 271:
	            case 275:
	            case 276:
	            case 279:
	            case 281:
	            case 284:
	            case 289:
	            case 290:
	            case 295:
	            case 299:
	            case 300:
	            case 302:
	            case 303:
	            case 306:
	            case 308:
	            case 312:
	            case 314:
	            case 317:
	            case 318:
	            case 323:
	            case 324:
	            case 328:
	            case 330:
	            case 331:
	            case 338:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 369:
	            case 370:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 381:
	            case 384:
	            case 385:
	            case 387:
	            case 389:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 402:
	            case 403:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 414:
	            case 417:
	            case 419:
	            case 421:
	            case 424:
	            case 426:
	            case 427:
	            case 430:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 458:
	            case 459:
	            case 461:
	            case 464:
	            case 465:
	            case 466:
	            case 469:
	            case 470:
	            case 471:
	            case 474:
	            case 478:
	            case 479:
	            case 481:
	            case 482:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 492:
	            case 494:
	            case 496:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 510:
	            case 512:
	            case 513:
	            case 514:
	            case 516:
	            case 520:
	            case 521:
	            case 522:
	            case 524:
	            case 525:
	            case 527:
	            case 529:
	            case 530:
	            case 532:
	            case 533:
	            case 537:
	            case 538:
	            case 540:
	            case 545:
	            case 550:
	            case 552:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 564:
	            case 565:
	            case 566:
	            case 568:
	            case 571:
	            case 574:
	            case 576:
	            case 578:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 589:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 602:
	            case 603:
	            case 604:
	            case 607:
	            case 608:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 616:
	            case 617:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 628:
	            case 629:
	            case 634:
	            case 635:
	            case 637:
	            case 638:
	            case 639:
	            case 640:
	            case 646:
	            case 649:
	            case 651:
	            case 653:
	            case 654:
	            case 655:
	            case 661:
	            case 663:
	            case 666:
	            case 671:
	            case 673:
	            case 674:
	            case 675:
	            case 676:
	            case 681:
	            case 682:
	            case 683:
	            case 685:
	            case 687:
	            case 688:
	            case 691:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 704:
	            case 705:
	            case 706:
	            case 709:
	            case 710:
	            case 715:
	            case 717:
	            case 724:
	            case 725:
	            case 728:
	            case 730:
	            case 732:
	            case 733:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 746:
	            case 747:
	            case 748:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	                this.state = 1781;
	                this.identifierKeywordsUnambiguous();
	                break;
	            case 222:
	            case 547:
	            case 749:
	                this.state = 1782;
	                this.identifierKeywordsAmbiguous1RolesAndLabels();
	                break;
	            case 73:
	            case 83:
	            case 100:
	            case 101:
	            case 112:
	            case 114:
	            case 128:
	            case 130:
	            case 143:
	            case 174:
	            case 196:
	            case 208:
	            case 242:
	            case 243:
	            case 265:
	            case 268:
	            case 280:
	            case 291:
	            case 311:
	            case 413:
	            case 455:
	            case 457:
	            case 495:
	            case 508:
	            case 519:
	            case 528:
	            case 549:
	            case 551:
	            case 579:
	            case 588:
	            case 633:
	            case 642:
	            case 643:
	            case 686:
	            case 712:
	                this.state = 1783;
	                this.identifierKeywordsAmbiguous2Labels();
	                break;
	            case 219:
	            case 236:
	            case 409:
	            case 463:
	            case 467:
	            case 491:
	            case 499:
	            case 601:
	            case 744:
	                this.state = 1784;
	                this.identifierKeywordsAmbiguous3Roles();
	                break;
	            case 260:
	            case 326:
	            case 539:
	            case 693:
	            case 708:
	                this.state = 1785;
	                this.identifierKeywordsAmbiguous4SystemVariables();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleOrIdentifierKeyword() {
	    let localctx = new RoleOrIdentifierKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, VQFlowParser.RULE_roleOrIdentifierKeyword);
	    var _la = 0; // Token type
	    try {
	        this.state = 1793;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	        case 66:
	        case 73:
	        case 81:
	        case 83:
	        case 100:
	        case 101:
	        case 112:
	        case 114:
	        case 119:
	        case 128:
	        case 130:
	        case 143:
	        case 174:
	        case 196:
	        case 208:
	        case 242:
	        case 243:
	        case 247:
	        case 256:
	        case 265:
	        case 268:
	        case 270:
	        case 291:
	        case 311:
	        case 413:
	        case 427:
	        case 430:
	        case 438:
	        case 441:
	        case 445:
	        case 453:
	        case 455:
	        case 457:
	        case 492:
	        case 495:
	        case 508:
	        case 510:
	        case 519:
	        case 528:
	        case 533:
	        case 540:
	        case 549:
	        case 551:
	        case 555:
	        case 556:
	        case 579:
	        case 588:
	        case 633:
	        case 642:
	        case 643:
	        case 651:
	        case 683:
	        case 686:
	        case 694:
	        case 696:
	        case 697:
	        case 712:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1790;
	            _la = this._input.LA(1);
	            if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 167904257) !== 0) || ((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & 1342722051) !== 0) || _la===143 || _la===174 || _la===196 || _la===208 || ((((_la - 242)) & ~0x1f) == 0 && ((1 << (_la - 242)) & 343949347) !== 0) || _la===291 || _la===311 || ((((_la - 413)) & ~0x1f) == 0 && ((1 << (_la - 413)) & 302137345) !== 0) || ((((_la - 445)) & ~0x1f) == 0 && ((1 << (_la - 445)) & 5377) !== 0) || ((((_la - 492)) & ~0x1f) == 0 && ((1 << (_la - 492)) & 134545417) !== 0) || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & 413143073) !== 0) || _la===579 || _la===588 || ((((_la - 633)) & ~0x1f) == 0 && ((1 << (_la - 633)) & 263681) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & 536897545) !== 0) || ((((_la - 755)) & ~0x1f) == 0 && ((1 << (_la - 755)) & 15) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 547:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1791;
	            this.match(VQFlowParser.SHUTDOWN_SYMBOL);
	            break;
	        case 280:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1792;
	            this.match(VQFlowParser.IMPORT_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleOrLabelKeyword() {
	    let localctx = new RoleOrLabelKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, VQFlowParser.RULE_roleOrLabelKeyword);
	    var _la = 0; // Token type
	    try {
	        this.state = 1800;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1795;
	            _la = this._input.LA(1);
	            if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & 1090266237) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 1847271609) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2226052955) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3903865457) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 771049219) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 578876217) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 155992623) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 847932483) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869419) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710284667) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1211998197) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4222615597) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 4171031939) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3091171871) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & 1108219575) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & 4115361893) !== 0) || ((((_la - 589)) & ~0x1f) == 0 && ((1 << (_la - 589)) & 3687641593) !== 0) || ((((_la - 621)) & ~0x1f) == 0 && ((1 << (_la - 621)) & 303030659) !== 0) || ((((_la - 653)) & ~0x1f) == 0 && ((1 << (_la - 653)) & 552870919) !== 0) || ((((_la - 685)) & ~0x1f) == 0 && ((1 << (_la - 685)) & 1194868813) !== 0) || ((((_la - 717)) & ~0x1f) == 0 && ((1 << (_la - 717)) & 1743890817) !== 0) || ((((_la - 751)) & ~0x1f) == 0 && ((1 << (_la - 751)) & 6923) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1796;
	            this.match(VQFlowParser.SHUTDOWN_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1797;
	            _la = this._input.LA(1);
	            if(!(_la===152 || _la===252 || _la===280 || _la===523 || _la===526)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1798;
	            _la = this._input.LA(1);
	            if(!(_la===221 || _la===226 || _la===426 || _la===601 || _la===661 || _la===681)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1799;
	            this.match(VQFlowParser.ADMIN_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelKeyword() {
	    let localctx = new LabelKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, VQFlowParser.RULE_labelKeyword);
	    try {
	        this.state = 1819;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1812;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1802;
	                this.roleOrLabelKeyword();
	                break;

	            case 2:
	                this.state = 1803;
	                this.match(VQFlowParser.EVENT_SYMBOL);
	                break;

	            case 3:
	                this.state = 1804;
	                this.match(VQFlowParser.FILE_SYMBOL);
	                break;

	            case 4:
	                this.state = 1805;
	                this.match(VQFlowParser.NONE_SYMBOL);
	                break;

	            case 5:
	                this.state = 1806;
	                this.match(VQFlowParser.PROCESS_SYMBOL);
	                break;

	            case 6:
	                this.state = 1807;
	                this.match(VQFlowParser.PROXY_SYMBOL);
	                break;

	            case 7:
	                this.state = 1808;
	                this.match(VQFlowParser.RELOAD_SYMBOL);
	                break;

	            case 8:
	                this.state = 1809;
	                this.match(VQFlowParser.REPLICATION_SYMBOL);
	                break;

	            case 9:
	                this.state = 1810;
	                this.match(VQFlowParser.RESOURCE_SYMBOL);
	                break;

	            case 10:
	                this.state = 1811;
	                this.match(VQFlowParser.SUPER_SYMBOL);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1817;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 66:
	            case 70:
	            case 75:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 87:
	            case 91:
	            case 94:
	            case 95:
	            case 96:
	            case 98:
	            case 104:
	            case 107:
	            case 108:
	            case 110:
	            case 111:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 123:
	            case 124:
	            case 126:
	            case 127:
	            case 129:
	            case 131:
	            case 132:
	            case 133:
	            case 134:
	            case 135:
	            case 137:
	            case 138:
	            case 140:
	            case 141:
	            case 142:
	            case 144:
	            case 149:
	            case 154:
	            case 159:
	            case 163:
	            case 164:
	            case 165:
	            case 168:
	            case 173:
	            case 179:
	            case 180:
	            case 182:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 199:
	            case 200:
	            case 201:
	            case 205:
	            case 207:
	            case 209:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 217:
	            case 218:
	            case 220:
	            case 221:
	            case 225:
	            case 226:
	            case 228:
	            case 229:
	            case 230:
	            case 233:
	            case 234:
	            case 237:
	            case 238:
	            case 239:
	            case 240:
	            case 247:
	            case 248:
	            case 250:
	            case 254:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 262:
	            case 266:
	            case 270:
	            case 271:
	            case 275:
	            case 276:
	            case 279:
	            case 281:
	            case 284:
	            case 289:
	            case 290:
	            case 295:
	            case 299:
	            case 300:
	            case 302:
	            case 303:
	            case 306:
	            case 308:
	            case 312:
	            case 314:
	            case 317:
	            case 318:
	            case 323:
	            case 324:
	            case 328:
	            case 330:
	            case 331:
	            case 338:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 369:
	            case 370:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 381:
	            case 384:
	            case 385:
	            case 387:
	            case 389:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 402:
	            case 403:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 414:
	            case 417:
	            case 419:
	            case 421:
	            case 424:
	            case 426:
	            case 427:
	            case 430:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 451:
	            case 452:
	            case 453:
	            case 458:
	            case 459:
	            case 461:
	            case 464:
	            case 465:
	            case 466:
	            case 469:
	            case 470:
	            case 471:
	            case 474:
	            case 478:
	            case 479:
	            case 481:
	            case 482:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 492:
	            case 494:
	            case 496:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 510:
	            case 512:
	            case 513:
	            case 514:
	            case 516:
	            case 520:
	            case 521:
	            case 522:
	            case 524:
	            case 525:
	            case 527:
	            case 529:
	            case 530:
	            case 532:
	            case 533:
	            case 537:
	            case 538:
	            case 540:
	            case 545:
	            case 550:
	            case 552:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 564:
	            case 565:
	            case 566:
	            case 568:
	            case 571:
	            case 574:
	            case 576:
	            case 578:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 589:
	            case 592:
	            case 593:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 602:
	            case 603:
	            case 604:
	            case 607:
	            case 608:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 616:
	            case 617:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 628:
	            case 629:
	            case 634:
	            case 635:
	            case 637:
	            case 638:
	            case 639:
	            case 640:
	            case 646:
	            case 649:
	            case 651:
	            case 653:
	            case 654:
	            case 655:
	            case 661:
	            case 663:
	            case 666:
	            case 671:
	            case 673:
	            case 674:
	            case 675:
	            case 676:
	            case 681:
	            case 682:
	            case 683:
	            case 685:
	            case 687:
	            case 688:
	            case 691:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 704:
	            case 705:
	            case 706:
	            case 709:
	            case 710:
	            case 715:
	            case 717:
	            case 724:
	            case 725:
	            case 728:
	            case 730:
	            case 732:
	            case 733:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 746:
	            case 747:
	            case 748:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	                this.state = 1814;
	                this.identifierKeywordsUnambiguous();
	                break;
	            case 219:
	            case 236:
	            case 409:
	            case 463:
	            case 467:
	            case 491:
	            case 499:
	            case 601:
	            case 744:
	                this.state = 1815;
	                this.identifierKeywordsAmbiguous3Roles();
	                break;
	            case 260:
	            case 326:
	            case 539:
	            case 693:
	            case 708:
	                this.state = 1816;
	                this.identifierKeywordsAmbiguous4SystemVariables();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsAmbiguous4SystemVariables() {
	    let localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, VQFlowParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1821;
	        _la = this._input.LA(1);
	        if(!(_la===260 || _la===326 || _la===539 || _la===693 || _la===708)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsAmbiguous3Roles() {
	    let localctx = new IdentifierKeywordsAmbiguous3RolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, VQFlowParser.RULE_identifierKeywordsAmbiguous3Roles);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1823;
	        _la = this._input.LA(1);
	        if(!(_la===219 || _la===236 || _la===409 || ((((_la - 463)) & ~0x1f) == 0 && ((1 << (_la - 463)) & 268435473) !== 0) || _la===499 || _la===601 || _la===744)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsUnambiguous() {
	    let localctx = new IdentifierKeywordsUnambiguousContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, VQFlowParser.RULE_identifierKeywordsUnambiguous);
	    var _la = 0; // Token type
	    try {
	        this.state = 1827;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1825;
	            _la = this._input.LA(1);
	            if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & 2213037307) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 2115707065) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & 2217664347) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & 3769647729) !== 0) || ((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & 1844791043) !== 0) || ((((_la - 225)) & ~0x1f) == 0 && ((1 << (_la - 225)) & 2730554171) !== 0) || ((((_la - 257)) & ~0x1f) == 0 && ((1 << (_la - 257)) & 156000807) !== 0) || ((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & 847932483) !== 0) || ((((_la - 323)) & ~0x1f) == 0 && ((1 << (_la - 323)) & 4294869411) !== 0) || ((((_la - 355)) & ~0x1f) == 0 && ((1 << (_la - 355)) & 1710280571) !== 0) || ((((_la - 387)) & ~0x1f) == 0 && ((1 << (_la - 387)) & 1211998197) !== 0) || ((((_la - 419)) & ~0x1f) == 0 && ((1 << (_la - 419)) & 4227336613) !== 0) || ((((_la - 451)) & ~0x1f) == 0 && ((1 << (_la - 451)) & 3634161031) !== 0) || ((((_la - 485)) & ~0x1f) == 0 && ((1 << (_la - 485)) & 3124726431) !== 0) || ((((_la - 520)) & ~0x1f) == 0 && ((1 << (_la - 520)) & 1108752055) !== 0) || ((((_la - 552)) & ~0x1f) == 0 && ((1 << (_la - 552)) & 4115230845) !== 0) || ((((_la - 589)) & ~0x1f) == 0 && ((1 << (_la - 589)) & 3687637497) !== 0) || ((((_la - 621)) & ~0x1f) == 0 && ((1 << (_la - 621)) & 1376739715) !== 0) || ((((_la - 653)) & ~0x1f) == 0 && ((1 << (_la - 653)) & 1895048455) !== 0) || ((((_la - 685)) & ~0x1f) == 0 && ((1 << (_la - 685)) & 1127767629) !== 0) || ((((_la - 717)) & ~0x1f) == 0 && ((1 << (_la - 717)) & 3891374465) !== 0) || ((((_la - 750)) & ~0x1f) == 0 && ((1 << (_la - 750)) & 15923199) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1826;
	            _la = this._input.LA(1);
	            if(!(_la===619 || _la===622 || ((((_la - 766)) & ~0x1f) == 0 && ((1 << (_la - 766)) & 16381) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsAmbiguous1RolesAndLabels() {
	    let localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, VQFlowParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1829;
	        _la = this._input.LA(1);
	        if(!(_la===222 || _la===547 || _la===749)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsAmbiguous2Labels() {
	    let localctx = new IdentifierKeywordsAmbiguous2LabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, VQFlowParser.RULE_identifierKeywordsAmbiguous2Labels);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1831;
	        _la = this._input.LA(1);
	        if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & 402654209) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & 2147811333) !== 0) || _la===174 || _la===196 || _la===208 || ((((_la - 242)) & ~0x1f) == 0 && ((1 << (_la - 242)) & 75497475) !== 0) || ((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & 2147485697) !== 0) || _la===413 || _la===455 || _la===457 || ((((_la - 495)) & ~0x1f) == 0 && ((1 << (_la - 495)) & 16785409) !== 0) || ((((_la - 528)) & ~0x1f) == 0 && ((1 << (_la - 528)) & 10485761) !== 0) || _la===579 || _la===588 || ((((_la - 633)) & ~0x1f) == 0 && ((1 << (_la - 633)) & 1537) !== 0) || _la===686 || _la===712)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

VQFlowParser.EOF = antlr4.Token.EOF;
VQFlowParser.NOT2_SYMBOL = 1;
VQFlowParser.CONCAT_PIPES_SYMBOL = 2;
VQFlowParser.INT_NUMBER = 3;
VQFlowParser.LONG_NUMBER = 4;
VQFlowParser.ULONGLONG_NUMBER = 5;
VQFlowParser.REQUIREMENT_MODULE = 6;
VQFlowParser.MINI_QUERY = 7;
VQFlowParser.TARGET_QUERY = 8;
VQFlowParser.UNION_QUERY = 9;
VQFlowParser.CARDINALITYN = 10;
VQFlowParser.ONE = 11;
VQFlowParser.EQUAL_OPERATOR = 12;
VQFlowParser.ASSIGN_OPERATOR = 13;
VQFlowParser.NULL_SAFE_EQUAL_OPERATOR = 14;
VQFlowParser.GREATER_OR_EQUAL_OPERATOR = 15;
VQFlowParser.GREATER_THAN_OPERATOR = 16;
VQFlowParser.LESS_OR_EQUAL_OPERATOR = 17;
VQFlowParser.LESS_THAN_OPERATOR = 18;
VQFlowParser.NOT_EQUAL_OPERATOR = 19;
VQFlowParser.PLUS_OPERATOR = 20;
VQFlowParser.MINUS_OPERATOR = 21;
VQFlowParser.MULT_OPERATOR = 22;
VQFlowParser.DIV_OPERATOR = 23;
VQFlowParser.MOD_OPERATOR = 24;
VQFlowParser.LOGICAL_NOT_OPERATOR = 25;
VQFlowParser.BITWISE_NOT_OPERATOR = 26;
VQFlowParser.SHIFT_LEFT_OPERATOR = 27;
VQFlowParser.SHIFT_RIGHT_OPERATOR = 28;
VQFlowParser.LOGICAL_AND_OPERATOR = 29;
VQFlowParser.BITWISE_AND_OPERATOR = 30;
VQFlowParser.BITWISE_XOR_OPERATOR = 31;
VQFlowParser.LOGICAL_OR_OPERATOR = 32;
VQFlowParser.BITWISE_OR_OPERATOR = 33;
VQFlowParser.DOT_SYMBOL = 34;
VQFlowParser.COMMA_SYMBOL = 35;
VQFlowParser.SEMICOLON_SYMBOL = 36;
VQFlowParser.COLON_SYMBOL = 37;
VQFlowParser.OPEN_PAR_SYMBOL = 38;
VQFlowParser.CLOSE_PAR_SYMBOL = 39;
VQFlowParser.OPEN_CURLY_SYMBOL = 40;
VQFlowParser.CLOSE_CURLY_SYMBOL = 41;
VQFlowParser.UNDERLINE_SYMBOL = 42;
VQFlowParser.JSON_SEPARATOR_SYMBOL = 43;
VQFlowParser.JSON_UNQUOTED_SEPARATOR_SYMBOL = 44;
VQFlowParser.AT_SIGN_SYMBOL = 45;
VQFlowParser.AT_TEXT_SUFFIX = 46;
VQFlowParser.AT_AT_SIGN_SYMBOL = 47;
VQFlowParser.NULL2_SYMBOL = 48;
VQFlowParser.PARAM_MARKER = 49;
VQFlowParser.HEX_NUMBER = 50;
VQFlowParser.BIN_NUMBER = 51;
VQFlowParser.DECIMAL_NUMBER = 52;
VQFlowParser.FLOAT_NUMBER = 53;
VQFlowParser.DOT_IDENTIFIER = 54;
VQFlowParser.ACCESSIBLE_SYMBOL = 55;
VQFlowParser.ACCOUNT_SYMBOL = 56;
VQFlowParser.ACTION_SYMBOL = 57;
VQFlowParser.ADD_SYMBOL = 58;
VQFlowParser.ADDDATE_SYMBOL = 59;
VQFlowParser.AFTER_SYMBOL = 60;
VQFlowParser.AGAINST_SYMBOL = 61;
VQFlowParser.AGGREGATE_SYMBOL = 62;
VQFlowParser.ALGORITHM_SYMBOL = 63;
VQFlowParser.ALL_SYMBOL = 64;
VQFlowParser.ALTER_SYMBOL = 65;
VQFlowParser.ALWAYS_SYMBOL = 66;
VQFlowParser.ANALYSE_SYMBOL = 67;
VQFlowParser.ANALYZE_SYMBOL = 68;
VQFlowParser.AND_SYMBOL = 69;
VQFlowParser.ANY_SYMBOL = 70;
VQFlowParser.AS_SYMBOL = 71;
VQFlowParser.ASC_SYMBOL = 72;
VQFlowParser.ASCII_SYMBOL = 73;
VQFlowParser.ASENSITIVE_SYMBOL = 74;
VQFlowParser.AT_SYMBOL = 75;
VQFlowParser.AUTHORS_SYMBOL = 76;
VQFlowParser.AUTOEXTEND_SIZE_SYMBOL = 77;
VQFlowParser.AUTO_INCREMENT_SYMBOL = 78;
VQFlowParser.AVG_ROW_LENGTH_SYMBOL = 79;
VQFlowParser.AVG_SYMBOL = 80;
VQFlowParser.BACKUP_SYMBOL = 81;
VQFlowParser.BEFORE_SYMBOL = 82;
VQFlowParser.BEGIN_SYMBOL = 83;
VQFlowParser.BETWEEN_SYMBOL = 84;
VQFlowParser.BIGINT_SYMBOL = 85;
VQFlowParser.BINARY_SYMBOL = 86;
VQFlowParser.BINLOG_SYMBOL = 87;
VQFlowParser.BIN_NUM_SYMBOL = 88;
VQFlowParser.BIT_AND_SYMBOL = 89;
VQFlowParser.BIT_OR_SYMBOL = 90;
VQFlowParser.BIT_SYMBOL = 91;
VQFlowParser.BIT_XOR_SYMBOL = 92;
VQFlowParser.BLOB_SYMBOL = 93;
VQFlowParser.BLOCK_SYMBOL = 94;
VQFlowParser.BOOLEAN_SYMBOL = 95;
VQFlowParser.BOOL_SYMBOL = 96;
VQFlowParser.BOTH_SYMBOL = 97;
VQFlowParser.BTREE_SYMBOL = 98;
VQFlowParser.BY_SYMBOL = 99;
VQFlowParser.BYTE_SYMBOL = 100;
VQFlowParser.CACHE_SYMBOL = 101;
VQFlowParser.CALL_SYMBOL = 102;
VQFlowParser.CASCADE_SYMBOL = 103;
VQFlowParser.CASCADED_SYMBOL = 104;
VQFlowParser.CASE_SYMBOL = 105;
VQFlowParser.CAST_SYMBOL = 106;
VQFlowParser.CATALOG_NAME_SYMBOL = 107;
VQFlowParser.CHAIN_SYMBOL = 108;
VQFlowParser.CHANGE_SYMBOL = 109;
VQFlowParser.CHANGED_SYMBOL = 110;
VQFlowParser.CHANNEL_SYMBOL = 111;
VQFlowParser.CHARSET_SYMBOL = 112;
VQFlowParser.CHAR_SYMBOL = 113;
VQFlowParser.CHECKSUM_SYMBOL = 114;
VQFlowParser.CHECK_SYMBOL = 115;
VQFlowParser.CIPHER_SYMBOL = 116;
VQFlowParser.CLASS_ORIGIN_SYMBOL = 117;
VQFlowParser.CLIENT_SYMBOL = 118;
VQFlowParser.CLOSE_SYMBOL = 119;
VQFlowParser.COALESCE_SYMBOL = 120;
VQFlowParser.CODE_SYMBOL = 121;
VQFlowParser.COLLATE_SYMBOL = 122;
VQFlowParser.COLLATION_SYMBOL = 123;
VQFlowParser.COLUMNS_SYMBOL = 124;
VQFlowParser.COLUMN_SYMBOL = 125;
VQFlowParser.COLUMN_NAME_SYMBOL = 126;
VQFlowParser.COLUMN_FORMAT_SYMBOL = 127;
VQFlowParser.COMMENT_SYMBOL = 128;
VQFlowParser.COMMITTED_SYMBOL = 129;
VQFlowParser.COMMIT_SYMBOL = 130;
VQFlowParser.COMPACT_SYMBOL = 131;
VQFlowParser.COMPLETION_SYMBOL = 132;
VQFlowParser.COMPRESSED_SYMBOL = 133;
VQFlowParser.COMPRESSION_SYMBOL = 134;
VQFlowParser.CONCURRENT_SYMBOL = 135;
VQFlowParser.CONDITION_SYMBOL = 136;
VQFlowParser.CONNECTION_SYMBOL = 137;
VQFlowParser.CONSISTENT_SYMBOL = 138;
VQFlowParser.CONSTRAINT_SYMBOL = 139;
VQFlowParser.CONSTRAINT_CATALOG_SYMBOL = 140;
VQFlowParser.CONSTRAINT_NAME_SYMBOL = 141;
VQFlowParser.CONSTRAINT_SCHEMA_SYMBOL = 142;
VQFlowParser.CONTAINS_SYMBOL = 143;
VQFlowParser.CONTEXT_SYMBOL = 144;
VQFlowParser.CONTINUE_SYMBOL = 145;
VQFlowParser.CONTRIBUTORS_SYMBOL = 146;
VQFlowParser.CONVERT_SYMBOL = 147;
VQFlowParser.COUNT_SYMBOL = 148;
VQFlowParser.CPU_SYMBOL = 149;
VQFlowParser.CREATE_SYMBOL = 150;
VQFlowParser.CROSS_SYMBOL = 151;
VQFlowParser.CUBE_SYMBOL = 152;
VQFlowParser.CURDATE_SYMBOL = 153;
VQFlowParser.CURRENT_SYMBOL = 154;
VQFlowParser.CURRENT_DATE_SYMBOL = 155;
VQFlowParser.CURRENT_TIME_SYMBOL = 156;
VQFlowParser.CURRENT_USER_SYMBOL = 157;
VQFlowParser.CURSOR_SYMBOL = 158;
VQFlowParser.CURSOR_NAME_SYMBOL = 159;
VQFlowParser.CURTIME_SYMBOL = 160;
VQFlowParser.DATABASE_SYMBOL = 161;
VQFlowParser.DATABASES_SYMBOL = 162;
VQFlowParser.DATAFILE_SYMBOL = 163;
VQFlowParser.DATA_SYMBOL = 164;
VQFlowParser.DATETIME_SYMBOL = 165;
VQFlowParser.DATE_ADD_SYMBOL = 166;
VQFlowParser.DATE_SUB_SYMBOL = 167;
VQFlowParser.DATE_SYMBOL = 168;
VQFlowParser.DAY_HOUR_SYMBOL = 169;
VQFlowParser.DAY_MICROSECOND_SYMBOL = 170;
VQFlowParser.DAY_MINUTE_SYMBOL = 171;
VQFlowParser.DAY_SECOND_SYMBOL = 172;
VQFlowParser.DAY_SYMBOL = 173;
VQFlowParser.DEALLOCATE_SYMBOL = 174;
VQFlowParser.DECIMAL_NUM_SYMBOL = 175;
VQFlowParser.DECIMAL_SYMBOL = 176;
VQFlowParser.DECLARE_SYMBOL = 177;
VQFlowParser.DEFAULT_SYMBOL = 178;
VQFlowParser.DEFAULT_AUTH_SYMBOL = 179;
VQFlowParser.DEFINER_SYMBOL = 180;
VQFlowParser.DELAYED_SYMBOL = 181;
VQFlowParser.DELAY_KEY_WRITE_SYMBOL = 182;
VQFlowParser.DELETE_SYMBOL = 183;
VQFlowParser.DESC_SYMBOL = 184;
VQFlowParser.DESCRIBE_SYMBOL = 185;
VQFlowParser.DES_KEY_FILE_SYMBOL = 186;
VQFlowParser.DETERMINISTIC_SYMBOL = 187;
VQFlowParser.DIAGNOSTICS_SYMBOL = 188;
VQFlowParser.DIRECTORY_SYMBOL = 189;
VQFlowParser.DISABLE_SYMBOL = 190;
VQFlowParser.DISCARD_SYMBOL = 191;
VQFlowParser.DISK_SYMBOL = 192;
VQFlowParser.DISTINCT_SYMBOL = 193;
VQFlowParser.DIV_SYMBOL = 194;
VQFlowParser.DOUBLE_SYMBOL = 195;
VQFlowParser.DO_SYMBOL = 196;
VQFlowParser.DROP_SYMBOL = 197;
VQFlowParser.DUAL_SYMBOL = 198;
VQFlowParser.DUMPFILE_SYMBOL = 199;
VQFlowParser.DUPLICATE_SYMBOL = 200;
VQFlowParser.DYNAMIC_SYMBOL = 201;
VQFlowParser.EACH_SYMBOL = 202;
VQFlowParser.ELSE_SYMBOL = 203;
VQFlowParser.ELSEIF_SYMBOL = 204;
VQFlowParser.ENABLE_SYMBOL = 205;
VQFlowParser.ENCLOSED_SYMBOL = 206;
VQFlowParser.ENCRYPTION_SYMBOL = 207;
VQFlowParser.END_SYMBOL = 208;
VQFlowParser.ENDS_SYMBOL = 209;
VQFlowParser.END_OF_INPUT_SYMBOL = 210;
VQFlowParser.ENGINES_SYMBOL = 211;
VQFlowParser.ENGINE_SYMBOL = 212;
VQFlowParser.ENUM_SYMBOL = 213;
VQFlowParser.ERROR_SYMBOL = 214;
VQFlowParser.ERRORS_SYMBOL = 215;
VQFlowParser.ESCAPED_SYMBOL = 216;
VQFlowParser.ESCAPE_SYMBOL = 217;
VQFlowParser.EVENTS_SYMBOL = 218;
VQFlowParser.EVENT_SYMBOL = 219;
VQFlowParser.EVERY_SYMBOL = 220;
VQFlowParser.EXCHANGE_SYMBOL = 221;
VQFlowParser.EXECUTE_SYMBOL = 222;
VQFlowParser.EXISTS_SYMBOL = 223;
VQFlowParser.EXIT_SYMBOL = 224;
VQFlowParser.EXPANSION_SYMBOL = 225;
VQFlowParser.EXPIRE_SYMBOL = 226;
VQFlowParser.EXPLAIN_SYMBOL = 227;
VQFlowParser.EXPORT_SYMBOL = 228;
VQFlowParser.EXTENDED_SYMBOL = 229;
VQFlowParser.EXTENT_SIZE_SYMBOL = 230;
VQFlowParser.EXTRACT_SYMBOL = 231;
VQFlowParser.FALSE_SYMBOL = 232;
VQFlowParser.FAST_SYMBOL = 233;
VQFlowParser.FAULTS_SYMBOL = 234;
VQFlowParser.FETCH_SYMBOL = 235;
VQFlowParser.FILE_SYMBOL = 236;
VQFlowParser.FILE_BLOCK_SIZE_SYMBOL = 237;
VQFlowParser.FILTER_SYMBOL = 238;
VQFlowParser.FIRST_SYMBOL = 239;
VQFlowParser.FIXED_SYMBOL = 240;
VQFlowParser.FLOAT_SYMBOL = 241;
VQFlowParser.FLUSH_SYMBOL = 242;
VQFlowParser.FOLLOWS_SYMBOL = 243;
VQFlowParser.FORCE_SYMBOL = 244;
VQFlowParser.FOREIGN_SYMBOL = 245;
VQFlowParser.FOR_SYMBOL = 246;
VQFlowParser.FORMAT_SYMBOL = 247;
VQFlowParser.FOUND_SYMBOL = 248;
VQFlowParser.FROM_SYMBOL = 249;
VQFlowParser.FULL_SYMBOL = 250;
VQFlowParser.FULLTEXT_SYMBOL = 251;
VQFlowParser.FUNCTION_SYMBOL = 252;
VQFlowParser.GET_SYMBOL = 253;
VQFlowParser.GENERAL_SYMBOL = 254;
VQFlowParser.GENERATED_SYMBOL = 255;
VQFlowParser.GROUP_REPLICATION_SYMBOL = 256;
VQFlowParser.GEOMETRYCOLLECTION_SYMBOL = 257;
VQFlowParser.GEOMETRY_SYMBOL = 258;
VQFlowParser.GET_FORMAT_SYMBOL = 259;
VQFlowParser.GLOBAL_SYMBOL = 260;
VQFlowParser.GRANT_SYMBOL = 261;
VQFlowParser.GRANTS_SYMBOL = 262;
VQFlowParser.GROUP_SYMBOL = 263;
VQFlowParser.GROUP_CONCAT_SYMBOL = 264;
VQFlowParser.HANDLER_SYMBOL = 265;
VQFlowParser.HASH_SYMBOL = 266;
VQFlowParser.HAVING_SYMBOL = 267;
VQFlowParser.HELP_SYMBOL = 268;
VQFlowParser.HIGH_PRIORITY_SYMBOL = 269;
VQFlowParser.HOST_SYMBOL = 270;
VQFlowParser.HOSTS_SYMBOL = 271;
VQFlowParser.HOUR_MICROSECOND_SYMBOL = 272;
VQFlowParser.HOUR_MINUTE_SYMBOL = 273;
VQFlowParser.HOUR_SECOND_SYMBOL = 274;
VQFlowParser.HOUR_SYMBOL = 275;
VQFlowParser.IDENTIFIED_SYMBOL = 276;
VQFlowParser.IF_SYMBOL = 277;
VQFlowParser.IGNORE_SYMBOL = 278;
VQFlowParser.IGNORE_SERVER_IDS_SYMBOL = 279;
VQFlowParser.IMPORT_SYMBOL = 280;
VQFlowParser.INDEXES_SYMBOL = 281;
VQFlowParser.INDEX_SYMBOL = 282;
VQFlowParser.INFILE_SYMBOL = 283;
VQFlowParser.INITIAL_SIZE_SYMBOL = 284;
VQFlowParser.INNER_SYMBOL = 285;
VQFlowParser.INOUT_SYMBOL = 286;
VQFlowParser.INSENSITIVE_SYMBOL = 287;
VQFlowParser.INSERT_SYMBOL = 288;
VQFlowParser.INSERT_METHOD_SYMBOL = 289;
VQFlowParser.INSTANCE_SYMBOL = 290;
VQFlowParser.INSTALL_SYMBOL = 291;
VQFlowParser.INTERVAL_SYMBOL = 292;
VQFlowParser.INTO_SYMBOL = 293;
VQFlowParser.INT_SYMBOL = 294;
VQFlowParser.INVOKER_SYMBOL = 295;
VQFlowParser.IN_SYMBOL = 296;
VQFlowParser.IO_AFTER_GTIDS_SYMBOL = 297;
VQFlowParser.IO_BEFORE_GTIDS_SYMBOL = 298;
VQFlowParser.IO_SYMBOL = 299;
VQFlowParser.IPC_SYMBOL = 300;
VQFlowParser.IS_SYMBOL = 301;
VQFlowParser.ISOLATION_SYMBOL = 302;
VQFlowParser.ISSUER_SYMBOL = 303;
VQFlowParser.ITERATE_SYMBOL = 304;
VQFlowParser.JOIN_SYMBOL = 305;
VQFlowParser.JSON_SYMBOL = 306;
VQFlowParser.KEYS_SYMBOL = 307;
VQFlowParser.KEY_BLOCK_SIZE_SYMBOL = 308;
VQFlowParser.KEY_SYMBOL = 309;
VQFlowParser.KILL_SYMBOL = 310;
VQFlowParser.LANGUAGE_SYMBOL = 311;
VQFlowParser.LAST_SYMBOL = 312;
VQFlowParser.LEADING_SYMBOL = 313;
VQFlowParser.LEAVES_SYMBOL = 314;
VQFlowParser.LEAVE_SYMBOL = 315;
VQFlowParser.LEFT_SYMBOL = 316;
VQFlowParser.LESS_SYMBOL = 317;
VQFlowParser.LEVEL_SYMBOL = 318;
VQFlowParser.LIKE_SYMBOL = 319;
VQFlowParser.LIMIT_SYMBOL = 320;
VQFlowParser.LINEAR_SYMBOL = 321;
VQFlowParser.LINES_SYMBOL = 322;
VQFlowParser.LINESTRING_SYMBOL = 323;
VQFlowParser.LIST_SYMBOL = 324;
VQFlowParser.LOAD_SYMBOL = 325;
VQFlowParser.LOCAL_SYMBOL = 326;
VQFlowParser.LOCATOR_SYMBOL = 327;
VQFlowParser.LOCKS_SYMBOL = 328;
VQFlowParser.LOCK_SYMBOL = 329;
VQFlowParser.LOGFILE_SYMBOL = 330;
VQFlowParser.LOGS_SYMBOL = 331;
VQFlowParser.LONGBLOB_SYMBOL = 332;
VQFlowParser.LONGTEXT_SYMBOL = 333;
VQFlowParser.LONG_NUM_SYMBOL = 334;
VQFlowParser.LONG_SYMBOL = 335;
VQFlowParser.LOOP_SYMBOL = 336;
VQFlowParser.LOW_PRIORITY_SYMBOL = 337;
VQFlowParser.MASTER_AUTO_POSITION_SYMBOL = 338;
VQFlowParser.MASTER_BIND_SYMBOL = 339;
VQFlowParser.MASTER_CONNECT_RETRY_SYMBOL = 340;
VQFlowParser.MASTER_DELAY_SYMBOL = 341;
VQFlowParser.MASTER_HOST_SYMBOL = 342;
VQFlowParser.MASTER_LOG_FILE_SYMBOL = 343;
VQFlowParser.MASTER_LOG_POS_SYMBOL = 344;
VQFlowParser.MASTER_PASSWORD_SYMBOL = 345;
VQFlowParser.MASTER_PORT_SYMBOL = 346;
VQFlowParser.MASTER_RETRY_COUNT_SYMBOL = 347;
VQFlowParser.MASTER_SERVER_ID_SYMBOL = 348;
VQFlowParser.MASTER_SSL_CAPATH_SYMBOL = 349;
VQFlowParser.MASTER_SSL_CA_SYMBOL = 350;
VQFlowParser.MASTER_SSL_CERT_SYMBOL = 351;
VQFlowParser.MASTER_SSL_CIPHER_SYMBOL = 352;
VQFlowParser.MASTER_SSL_CRL_SYMBOL = 353;
VQFlowParser.MASTER_SSL_CRLPATH_SYMBOL = 354;
VQFlowParser.MASTER_SSL_KEY_SYMBOL = 355;
VQFlowParser.MASTER_SSL_SYMBOL = 356;
VQFlowParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 357;
VQFlowParser.MASTER_SYMBOL = 358;
VQFlowParser.MASTER_TLS_VERSION_SYMBOL = 359;
VQFlowParser.MASTER_USER_SYMBOL = 360;
VQFlowParser.MASTER_HEARTBEAT_PERIOD_SYMBOL = 361;
VQFlowParser.MATCH_SYMBOL = 362;
VQFlowParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL = 363;
VQFlowParser.MAX_QUERIES_PER_HOUR_SYMBOL = 364;
VQFlowParser.MAX_ROWS_SYMBOL = 365;
VQFlowParser.MAX_SIZE_SYMBOL = 366;
VQFlowParser.MAX_STATEMENT_TIME_SYMBOL = 367;
VQFlowParser.MAX_SYMBOL = 368;
VQFlowParser.MAX_UPDATES_PER_HOUR_SYMBOL = 369;
VQFlowParser.MAX_USER_CONNECTIONS_SYMBOL = 370;
VQFlowParser.MAXVALUE_SYMBOL = 371;
VQFlowParser.MEDIUMBLOB_SYMBOL = 372;
VQFlowParser.MEDIUMINT_SYMBOL = 373;
VQFlowParser.MEDIUMTEXT_SYMBOL = 374;
VQFlowParser.MEDIUM_SYMBOL = 375;
VQFlowParser.MEMORY_SYMBOL = 376;
VQFlowParser.MERGE_SYMBOL = 377;
VQFlowParser.MESSAGE_TEXT_SYMBOL = 378;
VQFlowParser.MICROSECOND_SYMBOL = 379;
VQFlowParser.MID_SYMBOL = 380;
VQFlowParser.MIGRATE_SYMBOL = 381;
VQFlowParser.MINUTE_MICROSECOND_SYMBOL = 382;
VQFlowParser.MINUTE_SECOND_SYMBOL = 383;
VQFlowParser.MINUTE_SYMBOL = 384;
VQFlowParser.MIN_ROWS_SYMBOL = 385;
VQFlowParser.MIN_SYMBOL = 386;
VQFlowParser.MODE_SYMBOL = 387;
VQFlowParser.MODIFIES_SYMBOL = 388;
VQFlowParser.MODIFY_SYMBOL = 389;
VQFlowParser.MOD_SYMBOL = 390;
VQFlowParser.MONTH_SYMBOL = 391;
VQFlowParser.MULTILINESTRING_SYMBOL = 392;
VQFlowParser.MULTIPOINT_SYMBOL = 393;
VQFlowParser.MULTIPOLYGON_SYMBOL = 394;
VQFlowParser.MUTEX_SYMBOL = 395;
VQFlowParser.MYSQL_ERRNO_SYMBOL = 396;
VQFlowParser.NAMES_SYMBOL = 397;
VQFlowParser.NAME_SYMBOL = 398;
VQFlowParser.NATIONAL_SYMBOL = 399;
VQFlowParser.NATURAL_SYMBOL = 400;
VQFlowParser.NCHAR_STRING_SYMBOL = 401;
VQFlowParser.NCHAR_SYMBOL = 402;
VQFlowParser.NDBCLUSTER_SYMBOL = 403;
VQFlowParser.NEG_SYMBOL = 404;
VQFlowParser.NEVER_SYMBOL = 405;
VQFlowParser.NEW_SYMBOL = 406;
VQFlowParser.NEXT_SYMBOL = 407;
VQFlowParser.NODEGROUP_SYMBOL = 408;
VQFlowParser.NONE_SYMBOL = 409;
VQFlowParser.NONBLOCKING_SYMBOL = 410;
VQFlowParser.NOT_SYMBOL = 411;
VQFlowParser.NOW_SYMBOL = 412;
VQFlowParser.NO_SYMBOL = 413;
VQFlowParser.NO_WAIT_SYMBOL = 414;
VQFlowParser.NO_WRITE_TO_BINLOG_SYMBOL = 415;
VQFlowParser.NULL_SYMBOL = 416;
VQFlowParser.NUMBER_SYMBOL = 417;
VQFlowParser.NUMERIC_SYMBOL = 418;
VQFlowParser.NVARCHAR_SYMBOL = 419;
VQFlowParser.OFFLINE_SYMBOL = 420;
VQFlowParser.OFFSET_SYMBOL = 421;
VQFlowParser.OLD_PASSWORD_SYMBOL = 422;
VQFlowParser.ON_SYMBOL = 423;
VQFlowParser.ONE_SYMBOL = 424;
VQFlowParser.ONLINE_SYMBOL = 425;
VQFlowParser.ONLY_SYMBOL = 426;
VQFlowParser.OPEN_SYMBOL = 427;
VQFlowParser.OPTIMIZE_SYMBOL = 428;
VQFlowParser.OPTIMIZER_COSTS_SYMBOL = 429;
VQFlowParser.OPTIONS_SYMBOL = 430;
VQFlowParser.OPTION_SYMBOL = 431;
VQFlowParser.OPTIONALLY_SYMBOL = 432;
VQFlowParser.ORDER_SYMBOL = 433;
VQFlowParser.OR_SYMBOL = 434;
VQFlowParser.OUTER_SYMBOL = 435;
VQFlowParser.OUTFILE_SYMBOL = 436;
VQFlowParser.OUT_SYMBOL = 437;
VQFlowParser.OWNER_SYMBOL = 438;
VQFlowParser.PACK_KEYS_SYMBOL = 439;
VQFlowParser.PAGE_SYMBOL = 440;
VQFlowParser.PARSER_SYMBOL = 441;
VQFlowParser.PARTIAL_SYMBOL = 442;
VQFlowParser.PARTITIONING_SYMBOL = 443;
VQFlowParser.PARTITIONS_SYMBOL = 444;
VQFlowParser.PARTITION_SYMBOL = 445;
VQFlowParser.PASSWORD_SYMBOL = 446;
VQFlowParser.PHASE_SYMBOL = 447;
VQFlowParser.PLUGINS_SYMBOL = 448;
VQFlowParser.PLUGIN_DIR_SYMBOL = 449;
VQFlowParser.PLUGIN_SYMBOL = 450;
VQFlowParser.POINT_SYMBOL = 451;
VQFlowParser.POLYGON_SYMBOL = 452;
VQFlowParser.PORT_SYMBOL = 453;
VQFlowParser.POSITION_SYMBOL = 454;
VQFlowParser.PRECEDES_SYMBOL = 455;
VQFlowParser.PRECISION_SYMBOL = 456;
VQFlowParser.PREPARE_SYMBOL = 457;
VQFlowParser.PRESERVE_SYMBOL = 458;
VQFlowParser.PREV_SYMBOL = 459;
VQFlowParser.PRIMARY_SYMBOL = 460;
VQFlowParser.PRIVILEGES_SYMBOL = 461;
VQFlowParser.PROCEDURE_SYMBOL = 462;
VQFlowParser.PROCESS_SYMBOL = 463;
VQFlowParser.PROCESSLIST_SYMBOL = 464;
VQFlowParser.PROFILE_SYMBOL = 465;
VQFlowParser.PROFILES_SYMBOL = 466;
VQFlowParser.PROXY_SYMBOL = 467;
VQFlowParser.PURGE_SYMBOL = 468;
VQFlowParser.QUARTER_SYMBOL = 469;
VQFlowParser.QUERY_SYMBOL = 470;
VQFlowParser.QUICK_SYMBOL = 471;
VQFlowParser.RANGE_SYMBOL = 472;
VQFlowParser.READS_SYMBOL = 473;
VQFlowParser.READ_ONLY_SYMBOL = 474;
VQFlowParser.READ_SYMBOL = 475;
VQFlowParser.READ_WRITE_SYMBOL = 476;
VQFlowParser.REAL_SYMBOL = 477;
VQFlowParser.REBUILD_SYMBOL = 478;
VQFlowParser.RECOVER_SYMBOL = 479;
VQFlowParser.REDOFILE_SYMBOL = 480;
VQFlowParser.REDO_BUFFER_SIZE_SYMBOL = 481;
VQFlowParser.REDUNDANT_SYMBOL = 482;
VQFlowParser.REFERENCES_SYMBOL = 483;
VQFlowParser.REGEXP_SYMBOL = 484;
VQFlowParser.RELAY_SYMBOL = 485;
VQFlowParser.RELAYLOG_SYMBOL = 486;
VQFlowParser.RELAY_LOG_FILE_SYMBOL = 487;
VQFlowParser.RELAY_LOG_POS_SYMBOL = 488;
VQFlowParser.RELAY_THREAD_SYMBOL = 489;
VQFlowParser.RELEASE_SYMBOL = 490;
VQFlowParser.RELOAD_SYMBOL = 491;
VQFlowParser.REMOVE_SYMBOL = 492;
VQFlowParser.RENAME_SYMBOL = 493;
VQFlowParser.REORGANIZE_SYMBOL = 494;
VQFlowParser.REPAIR_SYMBOL = 495;
VQFlowParser.REPEATABLE_SYMBOL = 496;
VQFlowParser.REPEAT_SYMBOL = 497;
VQFlowParser.REPLACE_SYMBOL = 498;
VQFlowParser.REPLICATION_SYMBOL = 499;
VQFlowParser.REPLICATE_DO_DB_SYMBOL = 500;
VQFlowParser.REPLICATE_IGNORE_DB_SYMBOL = 501;
VQFlowParser.REPLICATE_DO_TABLE_SYMBOL = 502;
VQFlowParser.REPLICATE_IGNORE_TABLE_SYMBOL = 503;
VQFlowParser.REPLICATE_WILD_DO_TABLE_SYMBOL = 504;
VQFlowParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 505;
VQFlowParser.REPLICATE_REWRITE_DB_SYMBOL = 506;
VQFlowParser.REQUIRE_SYMBOL = 507;
VQFlowParser.RESET_SYMBOL = 508;
VQFlowParser.RESIGNAL_SYMBOL = 509;
VQFlowParser.RESTORE_SYMBOL = 510;
VQFlowParser.RESTRICT_SYMBOL = 511;
VQFlowParser.RESUME_SYMBOL = 512;
VQFlowParser.RETURNED_SQLSTATE_SYMBOL = 513;
VQFlowParser.RETURNS_SYMBOL = 514;
VQFlowParser.RETURN_SYMBOL = 515;
VQFlowParser.REVERSE_SYMBOL = 516;
VQFlowParser.REVOKE_SYMBOL = 517;
VQFlowParser.RIGHT_SYMBOL = 518;
VQFlowParser.ROLLBACK_SYMBOL = 519;
VQFlowParser.ROLLUP_SYMBOL = 520;
VQFlowParser.ROTATE_SYMBOL = 521;
VQFlowParser.ROUTINE_SYMBOL = 522;
VQFlowParser.ROWS_SYMBOL = 523;
VQFlowParser.ROW_COUNT_SYMBOL = 524;
VQFlowParser.ROW_FORMAT_SYMBOL = 525;
VQFlowParser.ROW_SYMBOL = 526;
VQFlowParser.RTREE_SYMBOL = 527;
VQFlowParser.SAVEPOINT_SYMBOL = 528;
VQFlowParser.SCHEDULE_SYMBOL = 529;
VQFlowParser.SCHEMA_NAME_SYMBOL = 530;
VQFlowParser.SECOND_MICROSECOND_SYMBOL = 531;
VQFlowParser.SECOND_SYMBOL = 532;
VQFlowParser.SECURITY_SYMBOL = 533;
VQFlowParser.SELECT_SYMBOL = 534;
VQFlowParser.SENSITIVE_SYMBOL = 535;
VQFlowParser.SEPARATOR_SYMBOL = 536;
VQFlowParser.SERIALIZABLE_SYMBOL = 537;
VQFlowParser.SERIAL_SYMBOL = 538;
VQFlowParser.SESSION_SYMBOL = 539;
VQFlowParser.SERVER_SYMBOL = 540;
VQFlowParser.SERVER_OPTIONS_SYMBOL = 541;
VQFlowParser.SESSION_USER_SYMBOL = 542;
VQFlowParser.SET_SYMBOL = 543;
VQFlowParser.SET_VAR_SYMBOL = 544;
VQFlowParser.SHARE_SYMBOL = 545;
VQFlowParser.SHOW_SYMBOL = 546;
VQFlowParser.SHUTDOWN_SYMBOL = 547;
VQFlowParser.SIGNAL_SYMBOL = 548;
VQFlowParser.SIGNED_SYMBOL = 549;
VQFlowParser.SIMPLE_SYMBOL = 550;
VQFlowParser.SLAVE_SYMBOL = 551;
VQFlowParser.SLOW_SYMBOL = 552;
VQFlowParser.SMALLINT_SYMBOL = 553;
VQFlowParser.SNAPSHOT_SYMBOL = 554;
VQFlowParser.SOCKET_SYMBOL = 555;
VQFlowParser.SONAME_SYMBOL = 556;
VQFlowParser.SOUNDS_SYMBOL = 557;
VQFlowParser.SOURCE_SYMBOL = 558;
VQFlowParser.SPATIAL_SYMBOL = 559;
VQFlowParser.SPECIFIC_SYMBOL = 560;
VQFlowParser.SQLEXCEPTION_SYMBOL = 561;
VQFlowParser.SQLSTATE_SYMBOL = 562;
VQFlowParser.SQLWARNING_SYMBOL = 563;
VQFlowParser.SQL_AFTER_GTIDS_SYMBOL = 564;
VQFlowParser.SQL_AFTER_MTS_GAPS_SYMBOL = 565;
VQFlowParser.SQL_BEFORE_GTIDS_SYMBOL = 566;
VQFlowParser.SQL_BIG_RESULT_SYMBOL = 567;
VQFlowParser.SQL_BUFFER_RESULT_SYMBOL = 568;
VQFlowParser.SQL_CACHE_SYMBOL = 569;
VQFlowParser.SQL_CALC_FOUND_ROWS_SYMBOL = 570;
VQFlowParser.SQL_NO_CACHE_SYMBOL = 571;
VQFlowParser.SQL_SMALL_RESULT_SYMBOL = 572;
VQFlowParser.SQL_SYMBOL = 573;
VQFlowParser.SQL_THREAD_SYMBOL = 574;
VQFlowParser.SSL_SYMBOL = 575;
VQFlowParser.STACKED_SYMBOL = 576;
VQFlowParser.STARTING_SYMBOL = 577;
VQFlowParser.STARTS_SYMBOL = 578;
VQFlowParser.START_SYMBOL = 579;
VQFlowParser.STATS_AUTO_RECALC_SYMBOL = 580;
VQFlowParser.STATS_PERSISTENT_SYMBOL = 581;
VQFlowParser.STATS_SAMPLE_PAGES_SYMBOL = 582;
VQFlowParser.STATUS_SYMBOL = 583;
VQFlowParser.STDDEV_SAMP_SYMBOL = 584;
VQFlowParser.STDDEV_SYMBOL = 585;
VQFlowParser.STDDEV_POP_SYMBOL = 586;
VQFlowParser.STD_SYMBOL = 587;
VQFlowParser.STOP_SYMBOL = 588;
VQFlowParser.STORAGE_SYMBOL = 589;
VQFlowParser.STORED_SYMBOL = 590;
VQFlowParser.STRAIGHT_JOIN_SYMBOL = 591;
VQFlowParser.STRING_SYMBOL = 592;
VQFlowParser.SUBCLASS_ORIGIN_SYMBOL = 593;
VQFlowParser.SUBDATE_SYMBOL = 594;
VQFlowParser.SUBJECT_SYMBOL = 595;
VQFlowParser.SUBPARTITIONS_SYMBOL = 596;
VQFlowParser.SUBPARTITION_SYMBOL = 597;
VQFlowParser.SUBSTR_SYMBOL = 598;
VQFlowParser.SUBSTRING_SYMBOL = 599;
VQFlowParser.SUM_SYMBOL = 600;
VQFlowParser.SUPER_SYMBOL = 601;
VQFlowParser.SUSPEND_SYMBOL = 602;
VQFlowParser.SWAPS_SYMBOL = 603;
VQFlowParser.SWITCHES_SYMBOL = 604;
VQFlowParser.SYSDATE_SYMBOL = 605;
VQFlowParser.SYSTEM_USER_SYMBOL = 606;
VQFlowParser.TABLES_SYMBOL = 607;
VQFlowParser.TABLESPACE_SYMBOL = 608;
VQFlowParser.TABLE_REF_PRIORITY_SYMBOL = 609;
VQFlowParser.TABLE_SYMBOL = 610;
VQFlowParser.TABLE_CHECKSUM_SYMBOL = 611;
VQFlowParser.TABLE_NAME_SYMBOL = 612;
VQFlowParser.TEMPORARY_SYMBOL = 613;
VQFlowParser.TEMPTABLE_SYMBOL = 614;
VQFlowParser.TERMINATED_SYMBOL = 615;
VQFlowParser.TEXT_SYMBOL = 616;
VQFlowParser.THAN_SYMBOL = 617;
VQFlowParser.THEN_SYMBOL = 618;
VQFlowParser.TIMESTAMP_SYMBOL = 619;
VQFlowParser.TIMESTAMP_ADD_SYMBOL = 620;
VQFlowParser.TIMESTAMP_DIFF_SYMBOL = 621;
VQFlowParser.TIME_SYMBOL = 622;
VQFlowParser.TINYBLOB_SYMBOL = 623;
VQFlowParser.TINYINT_SYMBOL = 624;
VQFlowParser.TINYTEXT_SYMBOL = 625;
VQFlowParser.TO_SYMBOL = 626;
VQFlowParser.TRAILING_SYMBOL = 627;
VQFlowParser.TRANSACTION_SYMBOL = 628;
VQFlowParser.TRIGGERS_SYMBOL = 629;
VQFlowParser.TRIGGER_SYMBOL = 630;
VQFlowParser.TRIM_SYMBOL = 631;
VQFlowParser.TRUE_SYMBOL = 632;
VQFlowParser.TRUNCATE_SYMBOL = 633;
VQFlowParser.TYPES_SYMBOL = 634;
VQFlowParser.TYPE_SYMBOL = 635;
VQFlowParser.UDF_RETURNS_SYMBOL = 636;
VQFlowParser.UNCOMMITTED_SYMBOL = 637;
VQFlowParser.UNDEFINED_SYMBOL = 638;
VQFlowParser.UNDOFILE_SYMBOL = 639;
VQFlowParser.UNDO_BUFFER_SIZE_SYMBOL = 640;
VQFlowParser.UNDO_SYMBOL = 641;
VQFlowParser.UNICODE_SYMBOL = 642;
VQFlowParser.UNINSTALL_SYMBOL = 643;
VQFlowParser.UNION_SYMBOL = 644;
VQFlowParser.UNIQUE_SYMBOL = 645;
VQFlowParser.UNKNOWN_SYMBOL = 646;
VQFlowParser.UNLOCK_SYMBOL = 647;
VQFlowParser.UNSIGNED_SYMBOL = 648;
VQFlowParser.UNTIL_SYMBOL = 649;
VQFlowParser.UPDATE_SYMBOL = 650;
VQFlowParser.UPGRADE_SYMBOL = 651;
VQFlowParser.USAGE_SYMBOL = 652;
VQFlowParser.USER_RESOURCES_SYMBOL = 653;
VQFlowParser.USER_SYMBOL = 654;
VQFlowParser.USE_FRM_SYMBOL = 655;
VQFlowParser.USE_SYMBOL = 656;
VQFlowParser.USING_SYMBOL = 657;
VQFlowParser.UTC_DATE_SYMBOL = 658;
VQFlowParser.UTC_TIMESTAMP_SYMBOL = 659;
VQFlowParser.UTC_TIME_SYMBOL = 660;
VQFlowParser.VALIDATION_SYMBOL = 661;
VQFlowParser.VALUES_SYMBOL = 662;
VQFlowParser.VALUE_SYMBOL = 663;
VQFlowParser.VARBINARY_SYMBOL = 664;
VQFlowParser.VARCHAR_SYMBOL = 665;
VQFlowParser.VARIABLES_SYMBOL = 666;
VQFlowParser.VARIANCE_SYMBOL = 667;
VQFlowParser.VARYING_SYMBOL = 668;
VQFlowParser.VAR_POP_SYMBOL = 669;
VQFlowParser.VAR_SAMP_SYMBOL = 670;
VQFlowParser.VIEW_SYMBOL = 671;
VQFlowParser.VIRTUAL_SYMBOL = 672;
VQFlowParser.WAIT_SYMBOL = 673;
VQFlowParser.WARNINGS_SYMBOL = 674;
VQFlowParser.WEEK_SYMBOL = 675;
VQFlowParser.WEIGHT_STRING_SYMBOL = 676;
VQFlowParser.WHEN_SYMBOL = 677;
VQFlowParser.WHERE_SYMBOL = 678;
VQFlowParser.WHILE_SYMBOL = 679;
VQFlowParser.WITH_SYMBOL = 680;
VQFlowParser.WITHOUT_SYMBOL = 681;
VQFlowParser.WORK_SYMBOL = 682;
VQFlowParser.WRAPPER_SYMBOL = 683;
VQFlowParser.WRITE_SYMBOL = 684;
VQFlowParser.X509_SYMBOL = 685;
VQFlowParser.XA_SYMBOL = 686;
VQFlowParser.XID_SYMBOL = 687;
VQFlowParser.XML_SYMBOL = 688;
VQFlowParser.XOR_SYMBOL = 689;
VQFlowParser.YEAR_MONTH_SYMBOL = 690;
VQFlowParser.YEAR_SYMBOL = 691;
VQFlowParser.ZEROFILL_SYMBOL = 692;
VQFlowParser.PERSIST_SYMBOL = 693;
VQFlowParser.ROLE_SYMBOL = 694;
VQFlowParser.ADMIN_SYMBOL = 695;
VQFlowParser.INVISIBLE_SYMBOL = 696;
VQFlowParser.VISIBLE_SYMBOL = 697;
VQFlowParser.EXCEPT_SYMBOL = 698;
VQFlowParser.COMPONENT_SYMBOL = 699;
VQFlowParser.RECURSIVE_SYMBOL = 700;
VQFlowParser.JSON_OBJECTAGG_SYMBOL = 701;
VQFlowParser.JSON_ARRAYAGG_SYMBOL = 702;
VQFlowParser.OF_SYMBOL = 703;
VQFlowParser.SKIP_SYMBOL = 704;
VQFlowParser.LOCKED_SYMBOL = 705;
VQFlowParser.NOWAIT_SYMBOL = 706;
VQFlowParser.GROUPING_SYMBOL = 707;
VQFlowParser.PERSIST_ONLY_SYMBOL = 708;
VQFlowParser.HISTOGRAM_SYMBOL = 709;
VQFlowParser.BUCKETS_SYMBOL = 710;
VQFlowParser.REMOTE_SYMBOL = 711;
VQFlowParser.CLONE_SYMBOL = 712;
VQFlowParser.CUME_DIST_SYMBOL = 713;
VQFlowParser.DENSE_RANK_SYMBOL = 714;
VQFlowParser.EXCLUDE_SYMBOL = 715;
VQFlowParser.FIRST_VALUE_SYMBOL = 716;
VQFlowParser.FOLLOWING_SYMBOL = 717;
VQFlowParser.GROUPS_SYMBOL = 718;
VQFlowParser.LAG_SYMBOL = 719;
VQFlowParser.LAST_VALUE_SYMBOL = 720;
VQFlowParser.LEAD_SYMBOL = 721;
VQFlowParser.NTH_VALUE_SYMBOL = 722;
VQFlowParser.NTILE_SYMBOL = 723;
VQFlowParser.NULLS_SYMBOL = 724;
VQFlowParser.OTHERS_SYMBOL = 725;
VQFlowParser.OVER_SYMBOL = 726;
VQFlowParser.PERCENT_RANK_SYMBOL = 727;
VQFlowParser.PRECEDING_SYMBOL = 728;
VQFlowParser.RANK_SYMBOL = 729;
VQFlowParser.RESPECT_SYMBOL = 730;
VQFlowParser.ROW_NUMBER_SYMBOL = 731;
VQFlowParser.TIES_SYMBOL = 732;
VQFlowParser.UNBOUNDED_SYMBOL = 733;
VQFlowParser.WINDOW_SYMBOL = 734;
VQFlowParser.EMPTY_SYMBOL = 735;
VQFlowParser.JSON_TABLE_SYMBOL = 736;
VQFlowParser.NESTED_SYMBOL = 737;
VQFlowParser.ORDINALITY_SYMBOL = 738;
VQFlowParser.PATH_SYMBOL = 739;
VQFlowParser.HISTORY_SYMBOL = 740;
VQFlowParser.REUSE_SYMBOL = 741;
VQFlowParser.SRID_SYMBOL = 742;
VQFlowParser.THREAD_PRIORITY_SYMBOL = 743;
VQFlowParser.RESOURCE_SYMBOL = 744;
VQFlowParser.SYSTEM_SYMBOL = 745;
VQFlowParser.VCPU_SYMBOL = 746;
VQFlowParser.MASTER_PUBLIC_KEY_PATH_SYMBOL = 747;
VQFlowParser.GET_MASTER_PUBLIC_KEY_SYMBOL = 748;
VQFlowParser.RESTART_SYMBOL = 749;
VQFlowParser.DEFINITION_SYMBOL = 750;
VQFlowParser.DESCRIPTION_SYMBOL = 751;
VQFlowParser.ORGANIZATION_SYMBOL = 752;
VQFlowParser.REFERENCE_SYMBOL = 753;
VQFlowParser.OPTIONAL_SYMBOL = 754;
VQFlowParser.SECONDARY_SYMBOL = 755;
VQFlowParser.SECONDARY_ENGINE_SYMBOL = 756;
VQFlowParser.SECONDARY_LOAD_SYMBOL = 757;
VQFlowParser.SECONDARY_UNLOAD_SYMBOL = 758;
VQFlowParser.ACTIVE_SYMBOL = 759;
VQFlowParser.INACTIVE_SYMBOL = 760;
VQFlowParser.LATERAL_SYMBOL = 761;
VQFlowParser.RETAIN_SYMBOL = 762;
VQFlowParser.OLD_SYMBOL = 763;
VQFlowParser.NETWORK_NAMESPACE_SYMBOL = 764;
VQFlowParser.ENFORCED_SYMBOL = 765;
VQFlowParser.ARRAY_SYMBOL = 766;
VQFlowParser.OJ_SYMBOL = 767;
VQFlowParser.MEMBER_SYMBOL = 768;
VQFlowParser.RANDOM_SYMBOL = 769;
VQFlowParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL = 770;
VQFlowParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 771;
VQFlowParser.PRIVILEGE_CHECKS_USER_SYMBOL = 772;
VQFlowParser.MASTER_TLS_CIPHERSUITES_SYMBOL = 773;
VQFlowParser.REQUIRE_ROW_FORMAT_SYMBOL = 774;
VQFlowParser.PASSWORD_LOCK_TIME_SYMBOL = 775;
VQFlowParser.FAILED_LOGIN_ATTEMPTS_SYMBOL = 776;
VQFlowParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL = 777;
VQFlowParser.STREAM_SYMBOL = 778;
VQFlowParser.OFF_SYMBOL = 779;
VQFlowParser.WHITESPACE = 780;
VQFlowParser.INVALID_INPUT = 781;
VQFlowParser.UNDERSCORE_CHARSET = 782;
VQFlowParser.IDENTIFIER = 783;
VQFlowParser.NCHAR_TEXT = 784;
VQFlowParser.BACK_TICK_QUOTED_ID = 785;
VQFlowParser.DOUBLE_QUOTED_TEXT = 786;
VQFlowParser.SINGLE_QUOTED_TEXT = 787;
VQFlowParser.VERSION_COMMENT_START = 788;
VQFlowParser.MYSQL_COMMENT_START = 789;
VQFlowParser.VERSION_COMMENT_END = 790;
VQFlowParser.BLOCK_COMMENT = 791;
VQFlowParser.POUND_COMMENT = 792;
VQFlowParser.DASHDASH_COMMENT = 793;
VQFlowParser.NOT_EQUAL2_OPERATOR = 794;

VQFlowParser.RULE_target = 0;
VQFlowParser.RULE_query = 1;
VQFlowParser.RULE_requirementsModule = 2;
VQFlowParser.RULE_miniQuery = 3;
VQFlowParser.RULE_singleTableRef = 4;
VQFlowParser.RULE_selectClause = 5;
VQFlowParser.RULE_filterExpr = 6;
VQFlowParser.RULE_queryBody = 7;
VQFlowParser.RULE_table = 8;
VQFlowParser.RULE_expandQuery = 9;
VQFlowParser.RULE_expandEdge = 10;
VQFlowParser.RULE_expandEdgeBody = 11;
VQFlowParser.RULE_cardinality = 12;
VQFlowParser.RULE_columnsToMatch = 13;
VQFlowParser.RULE_columnToMatch = 14;
VQFlowParser.RULE_unionQuery = 15;
VQFlowParser.RULE_unionEdge = 16;
VQFlowParser.RULE_description = 17;
VQFlowParser.RULE_selectStatement = 18;
VQFlowParser.RULE_queryExpressionParens = 19;
VQFlowParser.RULE_queryExpressionBody = 20;
VQFlowParser.RULE_queryExpression = 21;
VQFlowParser.RULE_selectItemList = 22;
VQFlowParser.RULE_selectItem = 23;
VQFlowParser.RULE_expr = 24;
VQFlowParser.RULE_boolPri = 25;
VQFlowParser.RULE_compOp = 26;
VQFlowParser.RULE_subquery = 27;
VQFlowParser.RULE_withClause = 28;
VQFlowParser.RULE_commonTableExpression = 29;
VQFlowParser.RULE_limitClause = 30;
VQFlowParser.RULE_limitOptions = 31;
VQFlowParser.RULE_limitOption = 32;
VQFlowParser.RULE_queryPrimary = 33;
VQFlowParser.RULE_tableRef = 34;
VQFlowParser.RULE_querySpecification = 35;
VQFlowParser.RULE_groupByClause = 36;
VQFlowParser.RULE_olapOption = 37;
VQFlowParser.RULE_havingClause = 38;
VQFlowParser.RULE_whereClause = 39;
VQFlowParser.RULE_fromClause = 40;
VQFlowParser.RULE_tableReferenceList = 41;
VQFlowParser.RULE_tableReference = 42;
VQFlowParser.RULE_escapedTableReference = 43;
VQFlowParser.RULE_joinedTable = 44;
VQFlowParser.RULE_naturalJoinType = 45;
VQFlowParser.RULE_innerJoinType = 46;
VQFlowParser.RULE_outerJoinType = 47;
VQFlowParser.RULE_tableFactor = 48;
VQFlowParser.RULE_singleTable = 49;
VQFlowParser.RULE_singleTableParens = 50;
VQFlowParser.RULE_identifierListWithParentheses = 51;
VQFlowParser.RULE_identifierList = 52;
VQFlowParser.RULE_derivedTable = 53;
VQFlowParser.RULE_columnInternalRefList = 54;
VQFlowParser.RULE_columnInternalRef = 55;
VQFlowParser.RULE_tableAlias = 56;
VQFlowParser.RULE_tableReferenceListParens = 57;
VQFlowParser.RULE_unionOption = 58;
VQFlowParser.RULE_notRule = 59;
VQFlowParser.RULE_predicate = 60;
VQFlowParser.RULE_predicateOperations = 61;
VQFlowParser.RULE_columnRef = 62;
VQFlowParser.RULE_fieldIdentifier = 63;
VQFlowParser.RULE_simpleExpr = 64;
VQFlowParser.RULE_runtimeFunctionCall = 65;
VQFlowParser.RULE_dateTimeTtype = 66;
VQFlowParser.RULE_trimFunction = 67;
VQFlowParser.RULE_timeFunctionParameters = 68;
VQFlowParser.RULE_substringFunction = 69;
VQFlowParser.RULE_fractionalPrecision = 70;
VQFlowParser.RULE_real_ulong_number = 71;
VQFlowParser.RULE_wsNumCodepoints = 72;
VQFlowParser.RULE_ulong_number = 73;
VQFlowParser.RULE_exprListWithParentheses = 74;
VQFlowParser.RULE_equal = 75;
VQFlowParser.RULE_qualifiedIdentifier = 76;
VQFlowParser.RULE_udfExprList = 77;
VQFlowParser.RULE_udfExpr = 78;
VQFlowParser.RULE_selectAlias = 79;
VQFlowParser.RULE_functionCall = 80;
VQFlowParser.RULE_fulltextOptions = 81;
VQFlowParser.RULE_literal = 82;
VQFlowParser.RULE_numLiteral = 83;
VQFlowParser.RULE_boolLiteral = 84;
VQFlowParser.RULE_nullLiteral = 85;
VQFlowParser.RULE_temporalLiteral = 86;
VQFlowParser.RULE_textLiteral = 87;
VQFlowParser.RULE_sumExpr = 88;
VQFlowParser.RULE_textString = 89;
VQFlowParser.RULE_inSumExpr = 90;
VQFlowParser.RULE_variable = 91;
VQFlowParser.RULE_arrayCast = 92;
VQFlowParser.RULE_exprWithParentheses = 93;
VQFlowParser.RULE_parentheses = 94;
VQFlowParser.RULE_orderList = 95;
VQFlowParser.RULE_orderClause = 96;
VQFlowParser.RULE_orderExpression = 97;
VQFlowParser.RULE_direction = 98;
VQFlowParser.RULE_simpleExprWithParentheses = 99;
VQFlowParser.RULE_userVariable = 100;
VQFlowParser.RULE_systemVariable = 101;
VQFlowParser.RULE_varIdentType = 102;
VQFlowParser.RULE_groupingOperation = 103;
VQFlowParser.RULE_exprList = 104;
VQFlowParser.RULE_castType = 105;
VQFlowParser.RULE_floatOptions = 106;
VQFlowParser.RULE_standardFloatOptions = 107;
VQFlowParser.RULE_precision = 108;
VQFlowParser.RULE_ascii = 109;
VQFlowParser.RULE_unicode = 110;
VQFlowParser.RULE_textStringLiteral = 111;
VQFlowParser.RULE_charsetName = 112;
VQFlowParser.RULE_textOrIdentifier = 113;
VQFlowParser.RULE_charset = 114;
VQFlowParser.RULE_charsetWithOptBinary = 115;
VQFlowParser.RULE_typeDatetimePrecision = 116;
VQFlowParser.RULE_nchar = 117;
VQFlowParser.RULE_realType = 118;
VQFlowParser.RULE_fieldLength = 119;
VQFlowParser.RULE_real_ulonglong_number = 120;
VQFlowParser.RULE_intervalTimeStamp = 121;
VQFlowParser.RULE_interval = 122;
VQFlowParser.RULE_identListArg = 123;
VQFlowParser.RULE_identList = 124;
VQFlowParser.RULE_not2Rule = 125;
VQFlowParser.RULE_simpleIdentifier = 126;
VQFlowParser.RULE_dotIdentifier = 127;
VQFlowParser.RULE_whenExpression = 128;
VQFlowParser.RULE_thenExpression = 129;
VQFlowParser.RULE_elseExpression = 130;
VQFlowParser.RULE_bitExpr = 131;
VQFlowParser.RULE_tableWild = 132;
VQFlowParser.RULE_pureIdentifier = 133;
VQFlowParser.RULE_identifier = 134;
VQFlowParser.RULE_identifierKeyword = 135;
VQFlowParser.RULE_roleOrIdentifierKeyword = 136;
VQFlowParser.RULE_roleOrLabelKeyword = 137;
VQFlowParser.RULE_labelKeyword = 138;
VQFlowParser.RULE_identifierKeywordsAmbiguous4SystemVariables = 139;
VQFlowParser.RULE_identifierKeywordsAmbiguous3Roles = 140;
VQFlowParser.RULE_identifierKeywordsUnambiguous = 141;
VQFlowParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels = 142;
VQFlowParser.RULE_identifierKeywordsAmbiguous2Labels = 143;

class TargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_target;
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	EOF() {
	    return this.getToken(VQFlowParser.EOF, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	SEMICOLON_SYMBOL() {
	    return this.getToken(VQFlowParser.SEMICOLON_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTarget(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTarget(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_query;
    }

	TARGET_QUERY() {
	    return this.getToken(VQFlowParser.TARGET_QUERY, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	queryBody() {
	    return this.getTypedRuleContext(QueryBodyContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	description() {
	    return this.getTypedRuleContext(DescriptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RequirementsModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_requirementsModule;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	REQUIREMENT_MODULE() {
	    return this.getToken(VQFlowParser.REQUIREMENT_MODULE, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	queryBody() {
	    return this.getTypedRuleContext(QueryBodyContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	description() {
	    return this.getTypedRuleContext(DescriptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterRequirementsModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitRequirementsModule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitRequirementsModule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MiniQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_miniQuery;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	MINI_QUERY() {
	    return this.getToken(VQFlowParser.MINI_QUERY, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	singleTableRef() {
	    return this.getTypedRuleContext(SingleTableRefContext,0);
	};

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	filterExpr() {
	    return this.getTypedRuleContext(FilterExprContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterMiniQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitMiniQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitMiniQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleTableRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_singleTableRef;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSingleTableRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSingleTableRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSingleTableRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_selectClause;
    }

	selectItemList() {
	    return this.getTypedRuleContext(SelectItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSelectClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSelectClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSelectClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_filterExpr;
    }

	FILTER_SYMBOL() {
	    return this.getToken(VQFlowParser.FILTER_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterFilterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitFilterExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitFilterExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_queryBody;
    }

	table = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableContext);
	    } else {
	        return this.getTypedRuleContext(TableContext,i);
	    }
	};

	expandQuery() {
	    return this.getTypedRuleContext(ExpandQueryContext,0);
	};

	unionQuery() {
	    return this.getTypedRuleContext(UnionQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterQueryBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitQueryBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitQueryBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_table;
    }

	requirementsModule() {
	    return this.getTypedRuleContext(RequirementsModuleContext,0);
	};

	miniQuery() {
	    return this.getTypedRuleContext(MiniQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpandQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_expandQuery;
    }

	table = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableContext);
	    } else {
	        return this.getTypedRuleContext(TableContext,i);
	    }
	};

	expandEdge = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpandEdgeContext);
	    } else {
	        return this.getTypedRuleContext(ExpandEdgeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExpandQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExpandQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExpandQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpandEdgeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_expandEdge;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	JSON_SEPARATOR_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.JSON_SEPARATOR_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.JSON_SEPARATOR_SYMBOL, i);
	    }
	};


	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	expandEdgeBody() {
	    return this.getTypedRuleContext(ExpandEdgeBodyContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExpandEdge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExpandEdge(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExpandEdge(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpandEdgeBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_expandEdgeBody;
    }

	cardinality() {
	    return this.getTypedRuleContext(CardinalityContext,0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMA_SYMBOL, 0);
	};

	columnsToMatch() {
	    return this.getTypedRuleContext(ColumnsToMatchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExpandEdgeBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExpandEdgeBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExpandEdgeBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_cardinality;
    }

	ONE() {
	    return this.getToken(VQFlowParser.ONE, 0);
	};

	CARDINALITYN() {
	    return this.getToken(VQFlowParser.CARDINALITYN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitCardinality(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitCardinality(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnsToMatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_columnsToMatch;
    }

	columnToMatch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnToMatchContext);
	    } else {
	        return this.getTypedRuleContext(ColumnToMatchContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterColumnsToMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitColumnsToMatch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitColumnsToMatch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnToMatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_columnToMatch;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterColumnToMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitColumnToMatch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitColumnToMatch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_unionQuery;
    }

	table = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableContext);
	    } else {
	        return this.getTypedRuleContext(TableContext,i);
	    }
	};

	unionEdge() {
	    return this.getTypedRuleContext(UnionEdgeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterUnionQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitUnionQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitUnionQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionEdgeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_unionEdge;
    }

	UNION_SYMBOL() {
	    return this.getToken(VQFlowParser.UNION_SYMBOL, 0);
	};

	unionOption() {
	    return this.getTypedRuleContext(UnionOptionContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterUnionEdge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitUnionEdge(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitUnionEdge(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescriptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_description;
    }

	DOUBLE_QUOTED_TEXT() {
	    return this.getToken(VQFlowParser.DOUBLE_QUOTED_TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterDescription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitDescription(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitDescription(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_selectStatement;
    }

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	queryExpressionParens() {
	    return this.getTypedRuleContext(QueryExpressionParensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSelectStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSelectStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryExpressionParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_queryExpressionParens;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	queryExpressionParens() {
	    return this.getTypedRuleContext(QueryExpressionParensContext,0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterQueryExpressionParens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitQueryExpressionParens(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitQueryExpressionParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryExpressionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_queryExpressionBody;
    }

	queryPrimary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryPrimaryContext);
	    } else {
	        return this.getTypedRuleContext(QueryPrimaryContext,i);
	    }
	};

	queryExpressionParens = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryExpressionParensContext);
	    } else {
	        return this.getTypedRuleContext(QueryExpressionParensContext,i);
	    }
	};

	UNION_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.UNION_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.UNION_SYMBOL, i);
	    }
	};


	unionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionOptionContext);
	    } else {
	        return this.getTypedRuleContext(UnionOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterQueryExpressionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitQueryExpressionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitQueryExpressionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_queryExpression;
    }

	queryExpressionBody() {
	    return this.getTypedRuleContext(QueryExpressionBodyContext,0);
	};

	queryExpressionParens() {
	    return this.getTypedRuleContext(QueryExpressionParensContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitQueryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitQueryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_selectItemList;
    }

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	MULT_OPERATOR() {
	    return this.getToken(VQFlowParser.MULT_OPERATOR, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSelectItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSelectItemList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSelectItemList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_selectItem;
    }

	tableWild() {
	    return this.getTypedRuleContext(TableWildContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	selectAlias() {
	    return this.getTypedRuleContext(SelectAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSelectItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSelectItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSelectItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_expr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExprOrContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	OR_SYMBOL() {
	    return this.getToken(VQFlowParser.OR_SYMBOL, 0);
	};

	LOGICAL_OR_OPERATOR() {
	    return this.getToken(VQFlowParser.LOGICAL_OR_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExprOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExprOr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExprOr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.ExprOrContext = ExprOrContext;

class ExprNotContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT_SYMBOL() {
	    return this.getToken(VQFlowParser.NOT_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExprNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExprNot(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExprNot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.ExprNotContext = ExprNotContext;

class ExprIsContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.type = null; // Token;
        super.copyFrom(ctx);
    }

	boolPri() {
	    return this.getTypedRuleContext(BoolPriContext,0);
	};

	IS_SYMBOL() {
	    return this.getToken(VQFlowParser.IS_SYMBOL, 0);
	};

	TRUE_SYMBOL() {
	    return this.getToken(VQFlowParser.TRUE_SYMBOL, 0);
	};

	FALSE_SYMBOL() {
	    return this.getToken(VQFlowParser.FALSE_SYMBOL, 0);
	};

	UNKNOWN_SYMBOL() {
	    return this.getToken(VQFlowParser.UNKNOWN_SYMBOL, 0);
	};

	notRule() {
	    return this.getTypedRuleContext(NotRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExprIs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExprIs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExprIs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.ExprIsContext = ExprIsContext;

class ExprAndContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	AND_SYMBOL() {
	    return this.getToken(VQFlowParser.AND_SYMBOL, 0);
	};

	LOGICAL_AND_OPERATOR() {
	    return this.getToken(VQFlowParser.LOGICAL_AND_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExprAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExprAnd(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExprAnd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.ExprAndContext = ExprAndContext;

class ExprXorContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	XOR_SYMBOL() {
	    return this.getToken(VQFlowParser.XOR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExprXor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExprXor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExprXor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.ExprXorContext = ExprXorContext;

class BoolPriContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_boolPri;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PrimaryExprPredicateContext extends BoolPriContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPrimaryExprPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPrimaryExprPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPrimaryExprPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.PrimaryExprPredicateContext = PrimaryExprPredicateContext;

class PrimaryExprCompareContext extends BoolPriContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	boolPri() {
	    return this.getTypedRuleContext(BoolPriContext,0);
	};

	compOp() {
	    return this.getTypedRuleContext(CompOpContext,0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPrimaryExprCompare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPrimaryExprCompare(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPrimaryExprCompare(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.PrimaryExprCompareContext = PrimaryExprCompareContext;

class PrimaryExprAllAnyContext extends BoolPriContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	boolPri() {
	    return this.getTypedRuleContext(BoolPriContext,0);
	};

	compOp() {
	    return this.getTypedRuleContext(CompOpContext,0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	ALL_SYMBOL() {
	    return this.getToken(VQFlowParser.ALL_SYMBOL, 0);
	};

	ANY_SYMBOL() {
	    return this.getToken(VQFlowParser.ANY_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPrimaryExprAllAny(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPrimaryExprAllAny(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPrimaryExprAllAny(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.PrimaryExprAllAnyContext = PrimaryExprAllAnyContext;

class PrimaryExprIsNullContext extends BoolPriContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	boolPri() {
	    return this.getTypedRuleContext(BoolPriContext,0);
	};

	IS_SYMBOL() {
	    return this.getToken(VQFlowParser.IS_SYMBOL, 0);
	};

	NULL_SYMBOL() {
	    return this.getToken(VQFlowParser.NULL_SYMBOL, 0);
	};

	notRule() {
	    return this.getTypedRuleContext(NotRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPrimaryExprIsNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPrimaryExprIsNull(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPrimaryExprIsNull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.PrimaryExprIsNullContext = PrimaryExprIsNullContext;

class CompOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_compOp;
    }

	EQUAL_OPERATOR() {
	    return this.getToken(VQFlowParser.EQUAL_OPERATOR, 0);
	};

	NULL_SAFE_EQUAL_OPERATOR() {
	    return this.getToken(VQFlowParser.NULL_SAFE_EQUAL_OPERATOR, 0);
	};

	GREATER_OR_EQUAL_OPERATOR() {
	    return this.getToken(VQFlowParser.GREATER_OR_EQUAL_OPERATOR, 0);
	};

	GREATER_THAN_OPERATOR() {
	    return this.getToken(VQFlowParser.GREATER_THAN_OPERATOR, 0);
	};

	LESS_OR_EQUAL_OPERATOR() {
	    return this.getToken(VQFlowParser.LESS_OR_EQUAL_OPERATOR, 0);
	};

	LESS_THAN_OPERATOR() {
	    return this.getToken(VQFlowParser.LESS_THAN_OPERATOR, 0);
	};

	NOT_EQUAL_OPERATOR() {
	    return this.getToken(VQFlowParser.NOT_EQUAL_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterCompOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitCompOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitCompOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_subquery;
    }

	queryExpressionParens() {
	    return this.getTypedRuleContext(QueryExpressionParensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSubquery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSubquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_withClause;
    }

	WITH_SYMBOL() {
	    return this.getToken(VQFlowParser.WITH_SYMBOL, 0);
	};

	commonTableExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommonTableExpressionContext);
	    } else {
	        return this.getTypedRuleContext(CommonTableExpressionContext,i);
	    }
	};

	RECURSIVE_SYMBOL() {
	    return this.getToken(VQFlowParser.RECURSIVE_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterWithClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitWithClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitWithClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommonTableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_commonTableExpression;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(VQFlowParser.AS_SYMBOL, 0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	columnInternalRefList() {
	    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterCommonTableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitCommonTableExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitCommonTableExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_limitClause;
    }

	LIMIT_SYMBOL() {
	    return this.getToken(VQFlowParser.LIMIT_SYMBOL, 0);
	};

	limitOptions() {
	    return this.getTypedRuleContext(LimitOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitLimitClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_limitOptions;
    }

	limitOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LimitOptionContext);
	    } else {
	        return this.getTypedRuleContext(LimitOptionContext,i);
	    }
	};

	COMMA_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMA_SYMBOL, 0);
	};

	OFFSET_SYMBOL() {
	    return this.getToken(VQFlowParser.OFFSET_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterLimitOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitLimitOptions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitLimitOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_limitOption;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PARAM_MARKER() {
	    return this.getToken(VQFlowParser.PARAM_MARKER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(VQFlowParser.ULONGLONG_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(VQFlowParser.LONG_NUMBER, 0);
	};

	INT_NUMBER() {
	    return this.getToken(VQFlowParser.INT_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterLimitOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitLimitOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitLimitOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_queryPrimary;
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterQueryPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitQueryPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitQueryPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_tableRef;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTableRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTableRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTableRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_querySpecification;
    }

	SELECT_SYMBOL() {
	    return this.getToken(VQFlowParser.SELECT_SYMBOL, 0);
	};

	selectItemList() {
	    return this.getTypedRuleContext(SelectItemListContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitQuerySpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitQuerySpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_groupByClause;
    }

	GROUP_SYMBOL() {
	    return this.getToken(VQFlowParser.GROUP_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(VQFlowParser.BY_SYMBOL, 0);
	};

	orderList() {
	    return this.getTypedRuleContext(OrderListContext,0);
	};

	olapOption() {
	    return this.getTypedRuleContext(OlapOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitGroupByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OlapOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_olapOption;
    }

	WITH_SYMBOL() {
	    return this.getToken(VQFlowParser.WITH_SYMBOL, 0);
	};

	ROLLUP_SYMBOL() {
	    return this.getToken(VQFlowParser.ROLLUP_SYMBOL, 0);
	};

	CUBE_SYMBOL() {
	    return this.getToken(VQFlowParser.CUBE_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterOlapOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitOlapOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitOlapOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_havingClause;
    }

	HAVING_SYMBOL() {
	    return this.getToken(VQFlowParser.HAVING_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitHavingClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitHavingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_whereClause;
    }

	WHERE_SYMBOL() {
	    return this.getToken(VQFlowParser.WHERE_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_fromClause;
    }

	FROM_SYMBOL() {
	    return this.getToken(VQFlowParser.FROM_SYMBOL, 0);
	};

	DUAL_SYMBOL() {
	    return this.getToken(VQFlowParser.DUAL_SYMBOL, 0);
	};

	tableReferenceList() {
	    return this.getTypedRuleContext(TableReferenceListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterFromClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitFromClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitFromClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableReferenceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_tableReferenceList;
    }

	tableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(TableReferenceContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTableReferenceList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTableReferenceList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTableReferenceList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_tableReference;
    }

	tableFactor() {
	    return this.getTypedRuleContext(TableFactorContext,0);
	};

	OPEN_CURLY_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_CURLY_SYMBOL, 0);
	};

	escapedTableReference() {
	    return this.getTypedRuleContext(EscapedTableReferenceContext,0);
	};

	CLOSE_CURLY_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_CURLY_SYMBOL, 0);
	};

	joinedTable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinedTableContext);
	    } else {
	        return this.getTypedRuleContext(JoinedTableContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OJ_SYMBOL() {
	    return this.getToken(VQFlowParser.OJ_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTableReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTableReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EscapedTableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_escapedTableReference;
    }

	tableFactor() {
	    return this.getTypedRuleContext(TableFactorContext,0);
	};

	joinedTable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinedTableContext);
	    } else {
	        return this.getTypedRuleContext(JoinedTableContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterEscapedTableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitEscapedTableReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitEscapedTableReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinedTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_joinedTable;
    }

	innerJoinType() {
	    return this.getTypedRuleContext(InnerJoinTypeContext,0);
	};

	tableReference() {
	    return this.getTypedRuleContext(TableReferenceContext,0);
	};

	ON_SYMBOL() {
	    return this.getToken(VQFlowParser.ON_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	USING_SYMBOL() {
	    return this.getToken(VQFlowParser.USING_SYMBOL, 0);
	};

	identifierListWithParentheses() {
	    return this.getTypedRuleContext(IdentifierListWithParenthesesContext,0);
	};

	outerJoinType() {
	    return this.getTypedRuleContext(OuterJoinTypeContext,0);
	};

	naturalJoinType() {
	    return this.getTypedRuleContext(NaturalJoinTypeContext,0);
	};

	tableFactor() {
	    return this.getTypedRuleContext(TableFactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterJoinedTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitJoinedTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitJoinedTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NaturalJoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_naturalJoinType;
    }

	NATURAL_SYMBOL() {
	    return this.getToken(VQFlowParser.NATURAL_SYMBOL, 0);
	};

	JOIN_SYMBOL() {
	    return this.getToken(VQFlowParser.JOIN_SYMBOL, 0);
	};

	INNER_SYMBOL() {
	    return this.getToken(VQFlowParser.INNER_SYMBOL, 0);
	};

	LEFT_SYMBOL() {
	    return this.getToken(VQFlowParser.LEFT_SYMBOL, 0);
	};

	RIGHT_SYMBOL() {
	    return this.getToken(VQFlowParser.RIGHT_SYMBOL, 0);
	};

	OUTER_SYMBOL() {
	    return this.getToken(VQFlowParser.OUTER_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterNaturalJoinType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitNaturalJoinType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitNaturalJoinType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InnerJoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_innerJoinType;
        this.type = null; // Token
    }

	JOIN_SYMBOL() {
	    return this.getToken(VQFlowParser.JOIN_SYMBOL, 0);
	};

	INNER_SYMBOL() {
	    return this.getToken(VQFlowParser.INNER_SYMBOL, 0);
	};

	CROSS_SYMBOL() {
	    return this.getToken(VQFlowParser.CROSS_SYMBOL, 0);
	};

	STRAIGHT_JOIN_SYMBOL() {
	    return this.getToken(VQFlowParser.STRAIGHT_JOIN_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterInnerJoinType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitInnerJoinType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitInnerJoinType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OuterJoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_outerJoinType;
        this.type = null; // Token
    }

	JOIN_SYMBOL() {
	    return this.getToken(VQFlowParser.JOIN_SYMBOL, 0);
	};

	LEFT_SYMBOL() {
	    return this.getToken(VQFlowParser.LEFT_SYMBOL, 0);
	};

	RIGHT_SYMBOL() {
	    return this.getToken(VQFlowParser.RIGHT_SYMBOL, 0);
	};

	OUTER_SYMBOL() {
	    return this.getToken(VQFlowParser.OUTER_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterOuterJoinType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitOuterJoinType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitOuterJoinType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_tableFactor;
    }

	singleTable() {
	    return this.getTypedRuleContext(SingleTableContext,0);
	};

	singleTableParens() {
	    return this.getTypedRuleContext(SingleTableParensContext,0);
	};

	derivedTable() {
	    return this.getTypedRuleContext(DerivedTableContext,0);
	};

	tableReferenceListParens() {
	    return this.getTypedRuleContext(TableReferenceListParensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTableFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTableFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTableFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_singleTable;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSingleTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSingleTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSingleTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleTableParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_singleTableParens;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	singleTable() {
	    return this.getTypedRuleContext(SingleTableContext,0);
	};

	singleTableParens() {
	    return this.getTypedRuleContext(SingleTableParensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSingleTableParens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSingleTableParens(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSingleTableParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierListWithParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identifierListWithParentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentifierListWithParentheses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentifierListWithParentheses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentifierListWithParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentifierList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DerivedTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_derivedTable;
    }

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	columnInternalRefList() {
	    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
	};

	LATERAL_SYMBOL() {
	    return this.getToken(VQFlowParser.LATERAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterDerivedTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitDerivedTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitDerivedTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnInternalRefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_columnInternalRefList;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	columnInternalRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnInternalRefContext);
	    } else {
	        return this.getTypedRuleContext(ColumnInternalRefContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterColumnInternalRefList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitColumnInternalRefList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitColumnInternalRefList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnInternalRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_columnInternalRef;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterColumnInternalRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitColumnInternalRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitColumnInternalRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_tableAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(VQFlowParser.AS_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(VQFlowParser.EQUAL_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTableAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTableAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTableAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableReferenceListParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_tableReferenceListParens;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	tableReferenceList() {
	    return this.getTypedRuleContext(TableReferenceListContext,0);
	};

	tableReferenceListParens() {
	    return this.getTypedRuleContext(TableReferenceListParensContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTableReferenceListParens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTableReferenceListParens(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTableReferenceListParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_unionOption;
    }

	DISTINCT_SYMBOL() {
	    return this.getToken(VQFlowParser.DISTINCT_SYMBOL, 0);
	};

	ALL_SYMBOL() {
	    return this.getToken(VQFlowParser.ALL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterUnionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitUnionOption(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitUnionOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NotRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_notRule;
    }

	NOT_SYMBOL() {
	    return this.getToken(VQFlowParser.NOT_SYMBOL, 0);
	};

	NOT2_SYMBOL() {
	    return this.getToken(VQFlowParser.NOT2_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterNotRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitNotRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitNotRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_predicate;
    }

	bitExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitExprContext);
	    } else {
	        return this.getTypedRuleContext(BitExprContext,i);
	    }
	};

	predicateOperations() {
	    return this.getTypedRuleContext(PredicateOperationsContext,0);
	};

	MEMBER_SYMBOL() {
	    return this.getToken(VQFlowParser.MEMBER_SYMBOL, 0);
	};

	simpleExprWithParentheses() {
	    return this.getTypedRuleContext(SimpleExprWithParenthesesContext,0);
	};

	SOUNDS_SYMBOL() {
	    return this.getToken(VQFlowParser.SOUNDS_SYMBOL, 0);
	};

	LIKE_SYMBOL() {
	    return this.getToken(VQFlowParser.LIKE_SYMBOL, 0);
	};

	notRule() {
	    return this.getTypedRuleContext(NotRuleContext,0);
	};

	OF_SYMBOL() {
	    return this.getToken(VQFlowParser.OF_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicateOperationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_predicateOperations;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PredicateExprRegexContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REGEXP_SYMBOL() {
	    return this.getToken(VQFlowParser.REGEXP_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPredicateExprRegex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPredicateExprRegex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPredicateExprRegex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.PredicateExprRegexContext = PredicateExprRegexContext;

class PredicateExprBetweenContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BETWEEN_SYMBOL() {
	    return this.getToken(VQFlowParser.BETWEEN_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	AND_SYMBOL() {
	    return this.getToken(VQFlowParser.AND_SYMBOL, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPredicateExprBetween(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPredicateExprBetween(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPredicateExprBetween(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.PredicateExprBetweenContext = PredicateExprBetweenContext;

class PredicateExprInContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN_SYMBOL() {
	    return this.getToken(VQFlowParser.IN_SYMBOL, 0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPredicateExprIn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPredicateExprIn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPredicateExprIn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.PredicateExprInContext = PredicateExprInContext;

class PredicateExprLikeContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LIKE_SYMBOL() {
	    return this.getToken(VQFlowParser.LIKE_SYMBOL, 0);
	};

	simpleExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleExprContext);
	    } else {
	        return this.getTypedRuleContext(SimpleExprContext,i);
	    }
	};

	ESCAPE_SYMBOL() {
	    return this.getToken(VQFlowParser.ESCAPE_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPredicateExprLike(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPredicateExprLike(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPredicateExprLike(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.PredicateExprLikeContext = PredicateExprLikeContext;

class ColumnRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_columnRef;
    }

	fieldIdentifier() {
	    return this.getTypedRuleContext(FieldIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterColumnRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitColumnRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitColumnRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_fieldIdentifier;
    }

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterFieldIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitFieldIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitFieldIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_simpleExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SimpleExprConvertContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONVERT_SYMBOL() {
	    return this.getToken(VQFlowParser.CONVERT_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMA_SYMBOL, 0);
	};

	castType() {
	    return this.getTypedRuleContext(CastTypeContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprConvert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprConvert(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprConvert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprConvertContext = SimpleExprConvertContext;

class SimpleExprVariableContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprVariableContext = SimpleExprVariableContext;

class SimpleExprColumnRefContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnRef() {
	    return this.getTypedRuleContext(ColumnRefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprColumnRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprColumnRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprColumnRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprColumnRefContext = SimpleExprColumnRefContext;

class SimpleExprParamMarkerContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARAM_MARKER() {
	    return this.getToken(VQFlowParser.PARAM_MARKER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprParamMarker(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprParamMarker(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprParamMarker(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprParamMarkerContext = SimpleExprParamMarkerContext;

class SimpleExprSumContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sumExpr() {
	    return this.getTypedRuleContext(SumExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprSum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprSum(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprSum(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprSumContext = SimpleExprSumContext;

class SimpleExprCastContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CAST_SYMBOL() {
	    return this.getToken(VQFlowParser.CAST_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(VQFlowParser.AS_SYMBOL, 0);
	};

	castType() {
	    return this.getTypedRuleContext(CastTypeContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	arrayCast() {
	    return this.getTypedRuleContext(ArrayCastContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprCast(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprCast(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprCastContext = SimpleExprCastContext;

class SimpleExprUnaryContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	PLUS_OPERATOR() {
	    return this.getToken(VQFlowParser.PLUS_OPERATOR, 0);
	};

	MINUS_OPERATOR() {
	    return this.getToken(VQFlowParser.MINUS_OPERATOR, 0);
	};

	BITWISE_NOT_OPERATOR() {
	    return this.getToken(VQFlowParser.BITWISE_NOT_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprUnary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprUnary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprUnary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprUnaryContext = SimpleExprUnaryContext;

class SimpleExprConvertUsingContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONVERT_SYMBOL() {
	    return this.getToken(VQFlowParser.CONVERT_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	USING_SYMBOL() {
	    return this.getToken(VQFlowParser.USING_SYMBOL, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprConvertUsing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprConvertUsing(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprConvertUsing(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprConvertUsingContext = SimpleExprConvertUsingContext;

class SimpleExprSubQueryContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	EXISTS_SYMBOL() {
	    return this.getToken(VQFlowParser.EXISTS_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprSubQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprSubQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprSubQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprSubQueryContext = SimpleExprSubQueryContext;

class SimpleExprGroupingOperationContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	groupingOperation() {
	    return this.getTypedRuleContext(GroupingOperationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprGroupingOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprGroupingOperation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprGroupingOperation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprGroupingOperationContext = SimpleExprGroupingOperationContext;

class SimpleExprNotContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	not2Rule() {
	    return this.getTypedRuleContext(Not2RuleContext,0);
	};

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprNot(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprNot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprNotContext = SimpleExprNotContext;

class SimpleExprOdbcContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_CURLY_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_CURLY_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_CURLY_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_CURLY_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprOdbc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprOdbc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprOdbc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprOdbcContext = SimpleExprOdbcContext;

class SimpleExprValuesContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUES_SYMBOL() {
	    return this.getToken(VQFlowParser.VALUES_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	simpleIdentifier() {
	    return this.getTypedRuleContext(SimpleIdentifierContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprValuesContext = SimpleExprValuesContext;

class SimpleExprRuntimeFunctionContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	runtimeFunctionCall() {
	    return this.getTypedRuleContext(RuntimeFunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprRuntimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprRuntimeFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprRuntimeFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprRuntimeFunctionContext = SimpleExprRuntimeFunctionContext;

class SimpleExprDefaultContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DEFAULT_SYMBOL() {
	    return this.getToken(VQFlowParser.DEFAULT_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	simpleIdentifier() {
	    return this.getTypedRuleContext(SimpleIdentifierContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprDefaultContext = SimpleExprDefaultContext;

class SimpleExprFunctionContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprFunctionContext = SimpleExprFunctionContext;

class SimpleExprCollateContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	COLLATE_SYMBOL() {
	    return this.getToken(VQFlowParser.COLLATE_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprCollate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprCollate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprCollate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprCollateContext = SimpleExprCollateContext;

class SimpleExprMatchContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MATCH_SYMBOL() {
	    return this.getToken(VQFlowParser.MATCH_SYMBOL, 0);
	};

	identListArg() {
	    return this.getTypedRuleContext(IdentListArgContext,0);
	};

	AGAINST_SYMBOL() {
	    return this.getToken(VQFlowParser.AGAINST_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	fulltextOptions() {
	    return this.getTypedRuleContext(FulltextOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprMatch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprMatch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprMatchContext = SimpleExprMatchContext;

class SimpleExprListContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	ROW_SYMBOL() {
	    return this.getToken(VQFlowParser.ROW_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprListContext = SimpleExprListContext;

class SimpleExprIntervalContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTERVAL_SYMBOL() {
	    return this.getToken(VQFlowParser.INTERVAL_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	PLUS_OPERATOR() {
	    return this.getToken(VQFlowParser.PLUS_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprIntervalContext = SimpleExprIntervalContext;

class SimpleExprCaseContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CASE_SYMBOL() {
	    return this.getToken(VQFlowParser.CASE_SYMBOL, 0);
	};

	END_SYMBOL() {
	    return this.getToken(VQFlowParser.END_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	whenExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenExpressionContext);
	    } else {
	        return this.getTypedRuleContext(WhenExpressionContext,i);
	    }
	};

	thenExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThenExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ThenExpressionContext,i);
	    }
	};

	elseExpression() {
	    return this.getTypedRuleContext(ElseExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprCaseContext = SimpleExprCaseContext;

class SimpleExprConcatContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simpleExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleExprContext);
	    } else {
	        return this.getTypedRuleContext(SimpleExprContext,i);
	    }
	};

	CONCAT_PIPES_SYMBOL() {
	    return this.getToken(VQFlowParser.CONCAT_PIPES_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprConcat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprConcat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprConcat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprConcatContext = SimpleExprConcatContext;

class SimpleExprLiteralContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprLiteralContext = SimpleExprLiteralContext;

class SimpleExprBinaryContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BINARY_SYMBOL() {
	    return this.getToken(VQFlowParser.BINARY_SYMBOL, 0);
	};

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprBinary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprBinary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

VQFlowParser.SimpleExprBinaryContext = SimpleExprBinaryContext;

class RuntimeFunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_runtimeFunctionCall;
        this.name = null; // Token
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	CHAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CHAR_SYMBOL, 0);
	};

	USING_SYMBOL() {
	    return this.getToken(VQFlowParser.USING_SYMBOL, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CURRENT_USER_SYMBOL() {
	    return this.getToken(VQFlowParser.CURRENT_USER_SYMBOL, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	exprWithParentheses() {
	    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
	};

	DATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DATE_SYMBOL, 0);
	};

	DAY_SYMBOL() {
	    return this.getToken(VQFlowParser.DAY_SYMBOL, 0);
	};

	HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.HOUR_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	INSERT_SYMBOL() {
	    return this.getToken(VQFlowParser.INSERT_SYMBOL, 0);
	};

	INTERVAL_SYMBOL() {
	    return this.getToken(VQFlowParser.INTERVAL_SYMBOL, 0);
	};

	LEFT_SYMBOL() {
	    return this.getToken(VQFlowParser.LEFT_SYMBOL, 0);
	};

	MINUTE_SYMBOL() {
	    return this.getToken(VQFlowParser.MINUTE_SYMBOL, 0);
	};

	MONTH_SYMBOL() {
	    return this.getToken(VQFlowParser.MONTH_SYMBOL, 0);
	};

	RIGHT_SYMBOL() {
	    return this.getToken(VQFlowParser.RIGHT_SYMBOL, 0);
	};

	SECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.SECOND_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(VQFlowParser.TIME_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_SYMBOL, 0);
	};

	trimFunction() {
	    return this.getTypedRuleContext(TrimFunctionContext,0);
	};

	USER_SYMBOL() {
	    return this.getToken(VQFlowParser.USER_SYMBOL, 0);
	};

	VALUES_SYMBOL() {
	    return this.getToken(VQFlowParser.VALUES_SYMBOL, 0);
	};

	YEAR_SYMBOL() {
	    return this.getToken(VQFlowParser.YEAR_SYMBOL, 0);
	};

	ADDDATE_SYMBOL() {
	    return this.getToken(VQFlowParser.ADDDATE_SYMBOL, 0);
	};

	SUBDATE_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBDATE_SYMBOL, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	CURDATE_SYMBOL() {
	    return this.getToken(VQFlowParser.CURDATE_SYMBOL, 0);
	};

	CURTIME_SYMBOL() {
	    return this.getToken(VQFlowParser.CURTIME_SYMBOL, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	DATE_ADD_SYMBOL() {
	    return this.getToken(VQFlowParser.DATE_ADD_SYMBOL, 0);
	};

	DATE_SUB_SYMBOL() {
	    return this.getToken(VQFlowParser.DATE_SUB_SYMBOL, 0);
	};

	FROM_SYMBOL() {
	    return this.getToken(VQFlowParser.FROM_SYMBOL, 0);
	};

	EXTRACT_SYMBOL() {
	    return this.getToken(VQFlowParser.EXTRACT_SYMBOL, 0);
	};

	dateTimeTtype() {
	    return this.getTypedRuleContext(DateTimeTtypeContext,0);
	};

	GET_FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.GET_FORMAT_SYMBOL, 0);
	};

	NOW_SYMBOL() {
	    return this.getToken(VQFlowParser.NOW_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	IN_SYMBOL() {
	    return this.getToken(VQFlowParser.IN_SYMBOL, 0);
	};

	POSITION_SYMBOL() {
	    return this.getToken(VQFlowParser.POSITION_SYMBOL, 0);
	};

	substringFunction() {
	    return this.getTypedRuleContext(SubstringFunctionContext,0);
	};

	SYSDATE_SYMBOL() {
	    return this.getToken(VQFlowParser.SYSDATE_SYMBOL, 0);
	};

	intervalTimeStamp() {
	    return this.getTypedRuleContext(IntervalTimeStampContext,0);
	};

	TIMESTAMP_ADD_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_ADD_SYMBOL, 0);
	};

	TIMESTAMP_DIFF_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_DIFF_SYMBOL, 0);
	};

	UTC_DATE_SYMBOL() {
	    return this.getToken(VQFlowParser.UTC_DATE_SYMBOL, 0);
	};

	UTC_TIME_SYMBOL() {
	    return this.getToken(VQFlowParser.UTC_TIME_SYMBOL, 0);
	};

	UTC_TIMESTAMP_SYMBOL() {
	    return this.getToken(VQFlowParser.UTC_TIMESTAMP_SYMBOL, 0);
	};

	ASCII_SYMBOL() {
	    return this.getToken(VQFlowParser.ASCII_SYMBOL, 0);
	};

	CHARSET_SYMBOL() {
	    return this.getToken(VQFlowParser.CHARSET_SYMBOL, 0);
	};

	exprListWithParentheses() {
	    return this.getTypedRuleContext(ExprListWithParenthesesContext,0);
	};

	COALESCE_SYMBOL() {
	    return this.getToken(VQFlowParser.COALESCE_SYMBOL, 0);
	};

	COLLATION_SYMBOL() {
	    return this.getToken(VQFlowParser.COLLATION_SYMBOL, 0);
	};

	DATABASE_SYMBOL() {
	    return this.getToken(VQFlowParser.DATABASE_SYMBOL, 0);
	};

	IF_SYMBOL() {
	    return this.getToken(VQFlowParser.IF_SYMBOL, 0);
	};

	FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.FORMAT_SYMBOL, 0);
	};

	MICROSECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.MICROSECOND_SYMBOL, 0);
	};

	MOD_SYMBOL() {
	    return this.getToken(VQFlowParser.MOD_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	OLD_PASSWORD_SYMBOL() {
	    return this.getToken(VQFlowParser.OLD_PASSWORD_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(VQFlowParser.PASSWORD_SYMBOL, 0);
	};

	QUARTER_SYMBOL() {
	    return this.getToken(VQFlowParser.QUARTER_SYMBOL, 0);
	};

	REPEAT_SYMBOL() {
	    return this.getToken(VQFlowParser.REPEAT_SYMBOL, 0);
	};

	REPLACE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLACE_SYMBOL, 0);
	};

	REVERSE_SYMBOL() {
	    return this.getToken(VQFlowParser.REVERSE_SYMBOL, 0);
	};

	ROW_COUNT_SYMBOL() {
	    return this.getToken(VQFlowParser.ROW_COUNT_SYMBOL, 0);
	};

	TRUNCATE_SYMBOL() {
	    return this.getToken(VQFlowParser.TRUNCATE_SYMBOL, 0);
	};

	WEEK_SYMBOL() {
	    return this.getToken(VQFlowParser.WEEK_SYMBOL, 0);
	};

	WEIGHT_STRING_SYMBOL() {
	    return this.getToken(VQFlowParser.WEIGHT_STRING_SYMBOL, 0);
	};

	AS_SYMBOL() {
	    return this.getToken(VQFlowParser.AS_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(VQFlowParser.BINARY_SYMBOL, 0);
	};

	wsNumCodepoints() {
	    return this.getTypedRuleContext(WsNumCodepointsContext,0);
	};

	ulong_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ulong_numberContext);
	    } else {
	        return this.getTypedRuleContext(Ulong_numberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterRuntimeFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitRuntimeFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitRuntimeFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeTtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_dateTimeTtype;
    }

	DATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DATE_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(VQFlowParser.TIME_SYMBOL, 0);
	};

	DATETIME_SYMBOL() {
	    return this.getToken(VQFlowParser.DATETIME_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterDateTimeTtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitDateTimeTtype(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitDateTimeTtype(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_trimFunction;
    }

	TRIM_SYMBOL() {
	    return this.getToken(VQFlowParser.TRIM_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	LEADING_SYMBOL() {
	    return this.getToken(VQFlowParser.LEADING_SYMBOL, 0);
	};

	FROM_SYMBOL() {
	    return this.getToken(VQFlowParser.FROM_SYMBOL, 0);
	};

	TRAILING_SYMBOL() {
	    return this.getToken(VQFlowParser.TRAILING_SYMBOL, 0);
	};

	BOTH_SYMBOL() {
	    return this.getToken(VQFlowParser.BOTH_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTrimFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTrimFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_timeFunctionParameters;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	fractionalPrecision() {
	    return this.getTypedRuleContext(FractionalPrecisionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTimeFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTimeFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubstringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_substringFunction;
    }

	SUBSTRING_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBSTRING_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	FROM_SYMBOL() {
	    return this.getToken(VQFlowParser.FROM_SYMBOL, 0);
	};

	FOR_SYMBOL() {
	    return this.getToken(VQFlowParser.FOR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSubstringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSubstringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSubstringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FractionalPrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_fractionalPrecision;
    }

	INT_NUMBER() {
	    return this.getToken(VQFlowParser.INT_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterFractionalPrecision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitFractionalPrecision(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitFractionalPrecision(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Real_ulong_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_real_ulong_number;
    }

	INT_NUMBER() {
	    return this.getToken(VQFlowParser.INT_NUMBER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(VQFlowParser.HEX_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(VQFlowParser.LONG_NUMBER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(VQFlowParser.ULONGLONG_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterReal_ulong_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitReal_ulong_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitReal_ulong_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WsNumCodepointsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_wsNumCodepoints;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterWsNumCodepoints(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitWsNumCodepoints(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitWsNumCodepoints(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ulong_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_ulong_number;
    }

	INT_NUMBER() {
	    return this.getToken(VQFlowParser.INT_NUMBER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(VQFlowParser.HEX_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(VQFlowParser.LONG_NUMBER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(VQFlowParser.ULONGLONG_NUMBER, 0);
	};

	DECIMAL_NUMBER() {
	    return this.getToken(VQFlowParser.DECIMAL_NUMBER, 0);
	};

	FLOAT_NUMBER() {
	    return this.getToken(VQFlowParser.FLOAT_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterUlong_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitUlong_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitUlong_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprListWithParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_exprListWithParentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExprListWithParentheses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExprListWithParentheses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExprListWithParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EqualContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_equal;
    }

	EQUAL_OPERATOR() {
	    return this.getToken(VQFlowParser.EQUAL_OPERATOR, 0);
	};

	ASSIGN_OPERATOR() {
	    return this.getToken(VQFlowParser.ASSIGN_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterEqual(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitEqual(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitEqual(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_qualifiedIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterQualifiedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitQualifiedIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitQualifiedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UdfExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_udfExprList;
    }

	udfExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UdfExprContext);
	    } else {
	        return this.getTypedRuleContext(UdfExprContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterUdfExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitUdfExprList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitUdfExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UdfExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_udfExpr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	selectAlias() {
	    return this.getTypedRuleContext(SelectAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterUdfExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitUdfExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitUdfExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_selectAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(VQFlowParser.AS_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSelectAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSelectAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSelectAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_functionCall;
    }

	pureIdentifier() {
	    return this.getTypedRuleContext(PureIdentifierContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	udfExprList() {
	    return this.getTypedRuleContext(UdfExprListContext,0);
	};

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitFunctionCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FulltextOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_fulltextOptions;
    }

	IN_SYMBOL() {
	    return this.getToken(VQFlowParser.IN_SYMBOL, 0);
	};

	BOOLEAN_SYMBOL() {
	    return this.getToken(VQFlowParser.BOOLEAN_SYMBOL, 0);
	};

	MODE_SYMBOL() {
	    return this.getToken(VQFlowParser.MODE_SYMBOL, 0);
	};

	NATURAL_SYMBOL() {
	    return this.getToken(VQFlowParser.NATURAL_SYMBOL, 0);
	};

	LANGUAGE_SYMBOL() {
	    return this.getToken(VQFlowParser.LANGUAGE_SYMBOL, 0);
	};

	WITH_SYMBOL() {
	    return this.getToken(VQFlowParser.WITH_SYMBOL, 0);
	};

	QUERY_SYMBOL() {
	    return this.getToken(VQFlowParser.QUERY_SYMBOL, 0);
	};

	EXPANSION_SYMBOL() {
	    return this.getToken(VQFlowParser.EXPANSION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterFulltextOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitFulltextOptions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitFulltextOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_literal;
    }

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	numLiteral() {
	    return this.getTypedRuleContext(NumLiteralContext,0);
	};

	temporalLiteral() {
	    return this.getTypedRuleContext(TemporalLiteralContext,0);
	};

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	HEX_NUMBER() {
	    return this.getToken(VQFlowParser.HEX_NUMBER, 0);
	};

	BIN_NUMBER() {
	    return this.getToken(VQFlowParser.BIN_NUMBER, 0);
	};

	UNDERSCORE_CHARSET() {
	    return this.getToken(VQFlowParser.UNDERSCORE_CHARSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_numLiteral;
    }

	INT_NUMBER() {
	    return this.getToken(VQFlowParser.INT_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(VQFlowParser.LONG_NUMBER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(VQFlowParser.ULONGLONG_NUMBER, 0);
	};

	DECIMAL_NUMBER() {
	    return this.getToken(VQFlowParser.DECIMAL_NUMBER, 0);
	};

	FLOAT_NUMBER() {
	    return this.getToken(VQFlowParser.FLOAT_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterNumLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitNumLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitNumLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BoolLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_boolLiteral;
    }

	TRUE_SYMBOL() {
	    return this.getToken(VQFlowParser.TRUE_SYMBOL, 0);
	};

	FALSE_SYMBOL() {
	    return this.getToken(VQFlowParser.FALSE_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterBoolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitBoolLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitBoolLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_nullLiteral;
    }

	NULL_SYMBOL() {
	    return this.getToken(VQFlowParser.NULL_SYMBOL, 0);
	};

	NULL2_SYMBOL() {
	    return this.getToken(VQFlowParser.NULL2_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitNullLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitNullLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemporalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_temporalLiteral;
    }

	DATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DATE_SYMBOL, 0);
	};

	SINGLE_QUOTED_TEXT() {
	    return this.getToken(VQFlowParser.SINGLE_QUOTED_TEXT, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(VQFlowParser.TIME_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTemporalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTemporalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTemporalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_textLiteral;
    }

	textStringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextStringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(TextStringLiteralContext,i);
	    }
	};

	NCHAR_TEXT() {
	    return this.getToken(VQFlowParser.NCHAR_TEXT, 0);
	};

	UNDERSCORE_CHARSET() {
	    return this.getToken(VQFlowParser.UNDERSCORE_CHARSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTextLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTextLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTextLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SumExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_sumExpr;
        this.name = null; // Token
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	inSumExpr() {
	    return this.getTypedRuleContext(InSumExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	AVG_SYMBOL() {
	    return this.getToken(VQFlowParser.AVG_SYMBOL, 0);
	};

	DISTINCT_SYMBOL() {
	    return this.getToken(VQFlowParser.DISTINCT_SYMBOL, 0);
	};

	BIT_AND_SYMBOL() {
	    return this.getToken(VQFlowParser.BIT_AND_SYMBOL, 0);
	};

	BIT_OR_SYMBOL() {
	    return this.getToken(VQFlowParser.BIT_OR_SYMBOL, 0);
	};

	BIT_XOR_SYMBOL() {
	    return this.getToken(VQFlowParser.BIT_XOR_SYMBOL, 0);
	};

	MULT_OPERATOR() {
	    return this.getToken(VQFlowParser.MULT_OPERATOR, 0);
	};

	COUNT_SYMBOL() {
	    return this.getToken(VQFlowParser.COUNT_SYMBOL, 0);
	};

	ALL_SYMBOL() {
	    return this.getToken(VQFlowParser.ALL_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	MIN_SYMBOL() {
	    return this.getToken(VQFlowParser.MIN_SYMBOL, 0);
	};

	MAX_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_SYMBOL, 0);
	};

	STD_SYMBOL() {
	    return this.getToken(VQFlowParser.STD_SYMBOL, 0);
	};

	VARIANCE_SYMBOL() {
	    return this.getToken(VQFlowParser.VARIANCE_SYMBOL, 0);
	};

	STDDEV_SAMP_SYMBOL() {
	    return this.getToken(VQFlowParser.STDDEV_SAMP_SYMBOL, 0);
	};

	VAR_SAMP_SYMBOL() {
	    return this.getToken(VQFlowParser.VAR_SAMP_SYMBOL, 0);
	};

	SUM_SYMBOL() {
	    return this.getToken(VQFlowParser.SUM_SYMBOL, 0);
	};

	GROUP_CONCAT_SYMBOL() {
	    return this.getToken(VQFlowParser.GROUP_CONCAT_SYMBOL, 0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	SEPARATOR_SYMBOL() {
	    return this.getToken(VQFlowParser.SEPARATOR_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSumExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSumExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSumExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_textString;
    }

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	HEX_NUMBER() {
	    return this.getToken(VQFlowParser.HEX_NUMBER, 0);
	};

	BIN_NUMBER() {
	    return this.getToken(VQFlowParser.BIN_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTextString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTextString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTextString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InSumExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_inSumExpr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ALL_SYMBOL() {
	    return this.getToken(VQFlowParser.ALL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterInSumExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitInSumExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitInSumExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_variable;
    }

	userVariable() {
	    return this.getTypedRuleContext(UserVariableContext,0);
	};

	systemVariable() {
	    return this.getTypedRuleContext(SystemVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayCastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_arrayCast;
    }

	ARRAY_SYMBOL() {
	    return this.getToken(VQFlowParser.ARRAY_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterArrayCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitArrayCast(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitArrayCast(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprWithParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_exprWithParentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExprWithParentheses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExprWithParentheses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExprWithParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_parentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterParentheses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitParentheses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_orderList;
    }

	orderExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OrderExpressionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterOrderList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitOrderList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitOrderList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_orderClause;
    }

	ORDER_SYMBOL() {
	    return this.getToken(VQFlowParser.ORDER_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(VQFlowParser.BY_SYMBOL, 0);
	};

	orderList() {
	    return this.getTypedRuleContext(OrderListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterOrderClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitOrderClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitOrderClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_orderExpression;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	direction() {
	    return this.getTypedRuleContext(DirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterOrderExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitOrderExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitOrderExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_direction;
    }

	ASC_SYMBOL() {
	    return this.getToken(VQFlowParser.ASC_SYMBOL, 0);
	};

	DESC_SYMBOL() {
	    return this.getToken(VQFlowParser.DESC_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitDirection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitDirection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleExprWithParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_simpleExprWithParentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleExprWithParentheses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleExprWithParentheses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleExprWithParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_userVariable;
    }

	AT_SIGN_SYMBOL() {
	    return this.getToken(VQFlowParser.AT_SIGN_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	AT_TEXT_SUFFIX() {
	    return this.getToken(VQFlowParser.AT_TEXT_SUFFIX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterUserVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitUserVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitUserVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SystemVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_systemVariable;
    }

	AT_AT_SIGN_SYMBOL() {
	    return this.getToken(VQFlowParser.AT_AT_SIGN_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	varIdentType() {
	    return this.getTypedRuleContext(VarIdentTypeContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSystemVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSystemVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSystemVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarIdentTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_varIdentType;
    }

	GLOBAL_SYMBOL() {
	    return this.getToken(VQFlowParser.GLOBAL_SYMBOL, 0);
	};

	DOT_SYMBOL() {
	    return this.getToken(VQFlowParser.DOT_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(VQFlowParser.LOCAL_SYMBOL, 0);
	};

	SESSION_SYMBOL() {
	    return this.getToken(VQFlowParser.SESSION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterVarIdentType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitVarIdentType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitVarIdentType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingOperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_groupingOperation;
    }

	GROUPING_SYMBOL() {
	    return this.getToken(VQFlowParser.GROUPING_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterGroupingOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitGroupingOperation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitGroupingOperation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_exprList;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitExprList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_castType;
    }

	BINARY_SYMBOL() {
	    return this.getToken(VQFlowParser.BINARY_SYMBOL, 0);
	};

	fieldLength() {
	    return this.getTypedRuleContext(FieldLengthContext,0);
	};

	CHAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CHAR_SYMBOL, 0);
	};

	charsetWithOptBinary() {
	    return this.getTypedRuleContext(CharsetWithOptBinaryContext,0);
	};

	nchar() {
	    return this.getTypedRuleContext(NcharContext,0);
	};

	SIGNED_SYMBOL() {
	    return this.getToken(VQFlowParser.SIGNED_SYMBOL, 0);
	};

	INT_SYMBOL() {
	    return this.getToken(VQFlowParser.INT_SYMBOL, 0);
	};

	UNSIGNED_SYMBOL() {
	    return this.getToken(VQFlowParser.UNSIGNED_SYMBOL, 0);
	};

	DATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DATE_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(VQFlowParser.TIME_SYMBOL, 0);
	};

	typeDatetimePrecision() {
	    return this.getTypedRuleContext(TypeDatetimePrecisionContext,0);
	};

	DATETIME_SYMBOL() {
	    return this.getToken(VQFlowParser.DATETIME_SYMBOL, 0);
	};

	DECIMAL_SYMBOL() {
	    return this.getToken(VQFlowParser.DECIMAL_SYMBOL, 0);
	};

	floatOptions() {
	    return this.getTypedRuleContext(FloatOptionsContext,0);
	};

	JSON_SYMBOL() {
	    return this.getToken(VQFlowParser.JSON_SYMBOL, 0);
	};

	realType() {
	    return this.getTypedRuleContext(RealTypeContext,0);
	};

	FLOAT_SYMBOL() {
	    return this.getToken(VQFlowParser.FLOAT_SYMBOL, 0);
	};

	standardFloatOptions() {
	    return this.getTypedRuleContext(StandardFloatOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterCastType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitCastType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitCastType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloatOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_floatOptions;
    }

	fieldLength() {
	    return this.getTypedRuleContext(FieldLengthContext,0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterFloatOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitFloatOptions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitFloatOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StandardFloatOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_standardFloatOptions;
    }

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterStandardFloatOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitStandardFloatOptions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitStandardFloatOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_precision;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	INT_NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.INT_NUMBER);
	    } else {
	        return this.getToken(VQFlowParser.INT_NUMBER, i);
	    }
	};


	COMMA_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMA_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPrecision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPrecision(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPrecision(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AsciiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_ascii;
    }

	ASCII_SYMBOL() {
	    return this.getToken(VQFlowParser.ASCII_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(VQFlowParser.BINARY_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterAscii(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitAscii(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitAscii(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnicodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_unicode;
    }

	UNICODE_SYMBOL() {
	    return this.getToken(VQFlowParser.UNICODE_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(VQFlowParser.BINARY_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterUnicode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitUnicode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitUnicode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_textStringLiteral;
        this.value = null; // Token
    }

	SINGLE_QUOTED_TEXT() {
	    return this.getToken(VQFlowParser.SINGLE_QUOTED_TEXT, 0);
	};

	DOUBLE_QUOTED_TEXT() {
	    return this.getToken(VQFlowParser.DOUBLE_QUOTED_TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTextStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTextStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTextStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharsetNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_charsetName;
    }

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(VQFlowParser.BINARY_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(VQFlowParser.DEFAULT_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterCharsetName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitCharsetName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitCharsetName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextOrIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_textOrIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTextOrIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTextOrIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTextOrIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_charset;
    }

	CHAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CHAR_SYMBOL, 0);
	};

	SET_SYMBOL() {
	    return this.getToken(VQFlowParser.SET_SYMBOL, 0);
	};

	CHARSET_SYMBOL() {
	    return this.getToken(VQFlowParser.CHARSET_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitCharset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitCharset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharsetWithOptBinaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_charsetWithOptBinary;
    }

	ascii() {
	    return this.getTypedRuleContext(AsciiContext,0);
	};

	unicode() {
	    return this.getTypedRuleContext(UnicodeContext,0);
	};

	BYTE_SYMBOL() {
	    return this.getToken(VQFlowParser.BYTE_SYMBOL, 0);
	};

	charset() {
	    return this.getTypedRuleContext(CharsetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(VQFlowParser.BINARY_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterCharsetWithOptBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitCharsetWithOptBinary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitCharsetWithOptBinary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDatetimePrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_typeDatetimePrecision;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	INT_NUMBER() {
	    return this.getToken(VQFlowParser.INT_NUMBER, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTypeDatetimePrecision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTypeDatetimePrecision(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTypeDatetimePrecision(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NcharContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_nchar;
        this.type = null; // Token
    }

	NCHAR_SYMBOL() {
	    return this.getToken(VQFlowParser.NCHAR_SYMBOL, 0);
	};

	CHAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CHAR_SYMBOL, 0);
	};

	NATIONAL_SYMBOL() {
	    return this.getToken(VQFlowParser.NATIONAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterNchar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitNchar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitNchar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_realType;
        this.type = null; // Token
    }

	REAL_SYMBOL() {
	    return this.getToken(VQFlowParser.REAL_SYMBOL, 0);
	};

	DOUBLE_SYMBOL() {
	    return this.getToken(VQFlowParser.DOUBLE_SYMBOL, 0);
	};

	PRECISION_SYMBOL() {
	    return this.getToken(VQFlowParser.PRECISION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterRealType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitRealType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitRealType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_fieldLength;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	real_ulonglong_number() {
	    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
	};

	DECIMAL_NUMBER() {
	    return this.getToken(VQFlowParser.DECIMAL_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterFieldLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitFieldLength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitFieldLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Real_ulonglong_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_real_ulonglong_number;
    }

	INT_NUMBER() {
	    return this.getToken(VQFlowParser.INT_NUMBER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(VQFlowParser.HEX_NUMBER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(VQFlowParser.ULONGLONG_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(VQFlowParser.LONG_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterReal_ulonglong_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitReal_ulonglong_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitReal_ulonglong_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalTimeStampContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_intervalTimeStamp;
    }

	MICROSECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.MICROSECOND_SYMBOL, 0);
	};

	SECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.SECOND_SYMBOL, 0);
	};

	MINUTE_SYMBOL() {
	    return this.getToken(VQFlowParser.MINUTE_SYMBOL, 0);
	};

	HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.HOUR_SYMBOL, 0);
	};

	DAY_SYMBOL() {
	    return this.getToken(VQFlowParser.DAY_SYMBOL, 0);
	};

	WEEK_SYMBOL() {
	    return this.getToken(VQFlowParser.WEEK_SYMBOL, 0);
	};

	MONTH_SYMBOL() {
	    return this.getToken(VQFlowParser.MONTH_SYMBOL, 0);
	};

	QUARTER_SYMBOL() {
	    return this.getToken(VQFlowParser.QUARTER_SYMBOL, 0);
	};

	YEAR_SYMBOL() {
	    return this.getToken(VQFlowParser.YEAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIntervalTimeStamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIntervalTimeStamp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIntervalTimeStamp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_interval;
    }

	intervalTimeStamp() {
	    return this.getTypedRuleContext(IntervalTimeStampContext,0);
	};

	SECOND_MICROSECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.SECOND_MICROSECOND_SYMBOL, 0);
	};

	MINUTE_MICROSECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.MINUTE_MICROSECOND_SYMBOL, 0);
	};

	MINUTE_SECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.MINUTE_SECOND_SYMBOL, 0);
	};

	HOUR_MICROSECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.HOUR_MICROSECOND_SYMBOL, 0);
	};

	HOUR_SECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.HOUR_SECOND_SYMBOL, 0);
	};

	HOUR_MINUTE_SYMBOL() {
	    return this.getToken(VQFlowParser.HOUR_MINUTE_SYMBOL, 0);
	};

	DAY_MICROSECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.DAY_MICROSECOND_SYMBOL, 0);
	};

	DAY_SECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.DAY_SECOND_SYMBOL, 0);
	};

	DAY_MINUTE_SYMBOL() {
	    return this.getToken(VQFlowParser.DAY_MINUTE_SYMBOL, 0);
	};

	DAY_HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.DAY_HOUR_SYMBOL, 0);
	};

	YEAR_MONTH_SYMBOL() {
	    return this.getToken(VQFlowParser.YEAR_MONTH_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentListArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identListArg;
    }

	identList() {
	    return this.getTypedRuleContext(IdentListContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_PAR_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentListArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentListArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentListArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identList;
    }

	simpleIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(SimpleIdentifierContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.COMMA_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Not2RuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_not2Rule;
    }

	LOGICAL_NOT_OPERATOR() {
	    return this.getToken(VQFlowParser.LOGICAL_NOT_OPERATOR, 0);
	};

	NOT2_SYMBOL() {
	    return this.getToken(VQFlowParser.NOT2_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterNot2Rule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitNot2Rule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitNot2Rule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_simpleIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dotIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DotIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(DotIdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterSimpleIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitSimpleIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitSimpleIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DotIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_dotIdentifier;
    }

	DOT_IDENTIFIER() {
	    return this.getToken(VQFlowParser.DOT_IDENTIFIER, 0);
	};

	DOT_SYMBOL() {
	    return this.getToken(VQFlowParser.DOT_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterDotIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitDotIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitDotIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_whenExpression;
    }

	WHEN_SYMBOL() {
	    return this.getToken(VQFlowParser.WHEN_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterWhenExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitWhenExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitWhenExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThenExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_thenExpression;
    }

	THEN_SYMBOL() {
	    return this.getToken(VQFlowParser.THEN_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterThenExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitThenExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitThenExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_elseExpression;
    }

	ELSE_SYMBOL() {
	    return this.getToken(VQFlowParser.ELSE_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterElseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitElseExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitElseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BitExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_bitExpr;
        this.op = null; // Token
    }

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	bitExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitExprContext);
	    } else {
	        return this.getTypedRuleContext(BitExprContext,i);
	    }
	};

	BITWISE_XOR_OPERATOR() {
	    return this.getToken(VQFlowParser.BITWISE_XOR_OPERATOR, 0);
	};

	MULT_OPERATOR() {
	    return this.getToken(VQFlowParser.MULT_OPERATOR, 0);
	};

	DIV_OPERATOR() {
	    return this.getToken(VQFlowParser.DIV_OPERATOR, 0);
	};

	MOD_OPERATOR() {
	    return this.getToken(VQFlowParser.MOD_OPERATOR, 0);
	};

	DIV_SYMBOL() {
	    return this.getToken(VQFlowParser.DIV_SYMBOL, 0);
	};

	MOD_SYMBOL() {
	    return this.getToken(VQFlowParser.MOD_SYMBOL, 0);
	};

	PLUS_OPERATOR() {
	    return this.getToken(VQFlowParser.PLUS_OPERATOR, 0);
	};

	MINUS_OPERATOR() {
	    return this.getToken(VQFlowParser.MINUS_OPERATOR, 0);
	};

	SHIFT_LEFT_OPERATOR() {
	    return this.getToken(VQFlowParser.SHIFT_LEFT_OPERATOR, 0);
	};

	SHIFT_RIGHT_OPERATOR() {
	    return this.getToken(VQFlowParser.SHIFT_RIGHT_OPERATOR, 0);
	};

	BITWISE_AND_OPERATOR() {
	    return this.getToken(VQFlowParser.BITWISE_AND_OPERATOR, 0);
	};

	BITWISE_OR_OPERATOR() {
	    return this.getToken(VQFlowParser.BITWISE_OR_OPERATOR, 0);
	};

	INTERVAL_SYMBOL() {
	    return this.getToken(VQFlowParser.INTERVAL_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterBitExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitBitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitBitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableWildContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_tableWild;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(VQFlowParser.DOT_SYMBOL);
	    } else {
	        return this.getToken(VQFlowParser.DOT_SYMBOL, i);
	    }
	};


	MULT_OPERATOR() {
	    return this.getToken(VQFlowParser.MULT_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterTableWild(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitTableWild(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitTableWild(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PureIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_pureIdentifier;
    }

	IDENTIFIER() {
	    return this.getToken(VQFlowParser.IDENTIFIER, 0);
	};

	BACK_TICK_QUOTED_ID() {
	    return this.getToken(VQFlowParser.BACK_TICK_QUOTED_ID, 0);
	};

	DOUBLE_QUOTED_TEXT() {
	    return this.getToken(VQFlowParser.DOUBLE_QUOTED_TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterPureIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitPureIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitPureIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identifier;
    }

	pureIdentifier() {
	    return this.getTypedRuleContext(PureIdentifierContext,0);
	};

	identifierKeyword() {
	    return this.getTypedRuleContext(IdentifierKeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identifierKeyword;
    }

	labelKeyword() {
	    return this.getTypedRuleContext(LabelKeywordContext,0);
	};

	roleOrIdentifierKeyword() {
	    return this.getTypedRuleContext(RoleOrIdentifierKeywordContext,0);
	};

	EXECUTE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXECUTE_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(VQFlowParser.SHUTDOWN_SYMBOL, 0);
	};

	RESTART_SYMBOL() {
	    return this.getToken(VQFlowParser.RESTART_SYMBOL, 0);
	};

	identifierKeywordsUnambiguous() {
	    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
	};

	identifierKeywordsAmbiguous1RolesAndLabels() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0);
	};

	identifierKeywordsAmbiguous2Labels() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext,0);
	};

	identifierKeywordsAmbiguous3Roles() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext,0);
	};

	identifierKeywordsAmbiguous4SystemVariables() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentifierKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentifierKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentifierKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleOrIdentifierKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_roleOrIdentifierKeyword;
    }

	ACCOUNT_SYMBOL() {
	    return this.getToken(VQFlowParser.ACCOUNT_SYMBOL, 0);
	};

	ASCII_SYMBOL() {
	    return this.getToken(VQFlowParser.ASCII_SYMBOL, 0);
	};

	ALWAYS_SYMBOL() {
	    return this.getToken(VQFlowParser.ALWAYS_SYMBOL, 0);
	};

	BACKUP_SYMBOL() {
	    return this.getToken(VQFlowParser.BACKUP_SYMBOL, 0);
	};

	BEGIN_SYMBOL() {
	    return this.getToken(VQFlowParser.BEGIN_SYMBOL, 0);
	};

	BYTE_SYMBOL() {
	    return this.getToken(VQFlowParser.BYTE_SYMBOL, 0);
	};

	CACHE_SYMBOL() {
	    return this.getToken(VQFlowParser.CACHE_SYMBOL, 0);
	};

	CHARSET_SYMBOL() {
	    return this.getToken(VQFlowParser.CHARSET_SYMBOL, 0);
	};

	CHECKSUM_SYMBOL() {
	    return this.getToken(VQFlowParser.CHECKSUM_SYMBOL, 0);
	};

	CLONE_SYMBOL() {
	    return this.getToken(VQFlowParser.CLONE_SYMBOL, 0);
	};

	CLOSE_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_SYMBOL, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMENT_SYMBOL, 0);
	};

	COMMIT_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMIT_SYMBOL, 0);
	};

	CONTAINS_SYMBOL() {
	    return this.getToken(VQFlowParser.CONTAINS_SYMBOL, 0);
	};

	DEALLOCATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DEALLOCATE_SYMBOL, 0);
	};

	DO_SYMBOL() {
	    return this.getToken(VQFlowParser.DO_SYMBOL, 0);
	};

	END_SYMBOL() {
	    return this.getToken(VQFlowParser.END_SYMBOL, 0);
	};

	FLUSH_SYMBOL() {
	    return this.getToken(VQFlowParser.FLUSH_SYMBOL, 0);
	};

	FOLLOWS_SYMBOL() {
	    return this.getToken(VQFlowParser.FOLLOWS_SYMBOL, 0);
	};

	FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.FORMAT_SYMBOL, 0);
	};

	GROUP_REPLICATION_SYMBOL() {
	    return this.getToken(VQFlowParser.GROUP_REPLICATION_SYMBOL, 0);
	};

	HANDLER_SYMBOL() {
	    return this.getToken(VQFlowParser.HANDLER_SYMBOL, 0);
	};

	HELP_SYMBOL() {
	    return this.getToken(VQFlowParser.HELP_SYMBOL, 0);
	};

	HOST_SYMBOL() {
	    return this.getToken(VQFlowParser.HOST_SYMBOL, 0);
	};

	INSTALL_SYMBOL() {
	    return this.getToken(VQFlowParser.INSTALL_SYMBOL, 0);
	};

	INVISIBLE_SYMBOL() {
	    return this.getToken(VQFlowParser.INVISIBLE_SYMBOL, 0);
	};

	LANGUAGE_SYMBOL() {
	    return this.getToken(VQFlowParser.LANGUAGE_SYMBOL, 0);
	};

	NO_SYMBOL() {
	    return this.getToken(VQFlowParser.NO_SYMBOL, 0);
	};

	OPEN_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_SYMBOL, 0);
	};

	OPTIONS_SYMBOL() {
	    return this.getToken(VQFlowParser.OPTIONS_SYMBOL, 0);
	};

	OWNER_SYMBOL() {
	    return this.getToken(VQFlowParser.OWNER_SYMBOL, 0);
	};

	PARSER_SYMBOL() {
	    return this.getToken(VQFlowParser.PARSER_SYMBOL, 0);
	};

	PARTITION_SYMBOL() {
	    return this.getToken(VQFlowParser.PARTITION_SYMBOL, 0);
	};

	PORT_SYMBOL() {
	    return this.getToken(VQFlowParser.PORT_SYMBOL, 0);
	};

	PRECEDES_SYMBOL() {
	    return this.getToken(VQFlowParser.PRECEDES_SYMBOL, 0);
	};

	PREPARE_SYMBOL() {
	    return this.getToken(VQFlowParser.PREPARE_SYMBOL, 0);
	};

	REMOVE_SYMBOL() {
	    return this.getToken(VQFlowParser.REMOVE_SYMBOL, 0);
	};

	REPAIR_SYMBOL() {
	    return this.getToken(VQFlowParser.REPAIR_SYMBOL, 0);
	};

	RESET_SYMBOL() {
	    return this.getToken(VQFlowParser.RESET_SYMBOL, 0);
	};

	RESTORE_SYMBOL() {
	    return this.getToken(VQFlowParser.RESTORE_SYMBOL, 0);
	};

	ROLE_SYMBOL() {
	    return this.getToken(VQFlowParser.ROLE_SYMBOL, 0);
	};

	ROLLBACK_SYMBOL() {
	    return this.getToken(VQFlowParser.ROLLBACK_SYMBOL, 0);
	};

	SAVEPOINT_SYMBOL() {
	    return this.getToken(VQFlowParser.SAVEPOINT_SYMBOL, 0);
	};

	SECONDARY_SYMBOL() {
	    return this.getToken(VQFlowParser.SECONDARY_SYMBOL, 0);
	};

	SECONDARY_ENGINE_SYMBOL() {
	    return this.getToken(VQFlowParser.SECONDARY_ENGINE_SYMBOL, 0);
	};

	SECONDARY_LOAD_SYMBOL() {
	    return this.getToken(VQFlowParser.SECONDARY_LOAD_SYMBOL, 0);
	};

	SECONDARY_UNLOAD_SYMBOL() {
	    return this.getToken(VQFlowParser.SECONDARY_UNLOAD_SYMBOL, 0);
	};

	SECURITY_SYMBOL() {
	    return this.getToken(VQFlowParser.SECURITY_SYMBOL, 0);
	};

	SERVER_SYMBOL() {
	    return this.getToken(VQFlowParser.SERVER_SYMBOL, 0);
	};

	SIGNED_SYMBOL() {
	    return this.getToken(VQFlowParser.SIGNED_SYMBOL, 0);
	};

	SOCKET_SYMBOL() {
	    return this.getToken(VQFlowParser.SOCKET_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(VQFlowParser.SLAVE_SYMBOL, 0);
	};

	SONAME_SYMBOL() {
	    return this.getToken(VQFlowParser.SONAME_SYMBOL, 0);
	};

	START_SYMBOL() {
	    return this.getToken(VQFlowParser.START_SYMBOL, 0);
	};

	STOP_SYMBOL() {
	    return this.getToken(VQFlowParser.STOP_SYMBOL, 0);
	};

	TRUNCATE_SYMBOL() {
	    return this.getToken(VQFlowParser.TRUNCATE_SYMBOL, 0);
	};

	UNICODE_SYMBOL() {
	    return this.getToken(VQFlowParser.UNICODE_SYMBOL, 0);
	};

	UNINSTALL_SYMBOL() {
	    return this.getToken(VQFlowParser.UNINSTALL_SYMBOL, 0);
	};

	UPGRADE_SYMBOL() {
	    return this.getToken(VQFlowParser.UPGRADE_SYMBOL, 0);
	};

	VISIBLE_SYMBOL() {
	    return this.getToken(VQFlowParser.VISIBLE_SYMBOL, 0);
	};

	WRAPPER_SYMBOL() {
	    return this.getToken(VQFlowParser.WRAPPER_SYMBOL, 0);
	};

	XA_SYMBOL() {
	    return this.getToken(VQFlowParser.XA_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(VQFlowParser.SHUTDOWN_SYMBOL, 0);
	};

	IMPORT_SYMBOL() {
	    return this.getToken(VQFlowParser.IMPORT_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterRoleOrIdentifierKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitRoleOrIdentifierKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitRoleOrIdentifierKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleOrLabelKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_roleOrLabelKeyword;
    }

	ACTION_SYMBOL() {
	    return this.getToken(VQFlowParser.ACTION_SYMBOL, 0);
	};

	ACTIVE_SYMBOL() {
	    return this.getToken(VQFlowParser.ACTIVE_SYMBOL, 0);
	};

	ADDDATE_SYMBOL() {
	    return this.getToken(VQFlowParser.ADDDATE_SYMBOL, 0);
	};

	AFTER_SYMBOL() {
	    return this.getToken(VQFlowParser.AFTER_SYMBOL, 0);
	};

	AGAINST_SYMBOL() {
	    return this.getToken(VQFlowParser.AGAINST_SYMBOL, 0);
	};

	AGGREGATE_SYMBOL() {
	    return this.getToken(VQFlowParser.AGGREGATE_SYMBOL, 0);
	};

	ALGORITHM_SYMBOL() {
	    return this.getToken(VQFlowParser.ALGORITHM_SYMBOL, 0);
	};

	ANALYSE_SYMBOL() {
	    return this.getToken(VQFlowParser.ANALYSE_SYMBOL, 0);
	};

	ANY_SYMBOL() {
	    return this.getToken(VQFlowParser.ANY_SYMBOL, 0);
	};

	AT_SYMBOL() {
	    return this.getToken(VQFlowParser.AT_SYMBOL, 0);
	};

	AUTHORS_SYMBOL() {
	    return this.getToken(VQFlowParser.AUTHORS_SYMBOL, 0);
	};

	AUTO_INCREMENT_SYMBOL() {
	    return this.getToken(VQFlowParser.AUTO_INCREMENT_SYMBOL, 0);
	};

	AUTOEXTEND_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.AUTOEXTEND_SIZE_SYMBOL, 0);
	};

	AVG_ROW_LENGTH_SYMBOL() {
	    return this.getToken(VQFlowParser.AVG_ROW_LENGTH_SYMBOL, 0);
	};

	AVG_SYMBOL() {
	    return this.getToken(VQFlowParser.AVG_SYMBOL, 0);
	};

	BINLOG_SYMBOL() {
	    return this.getToken(VQFlowParser.BINLOG_SYMBOL, 0);
	};

	BIT_SYMBOL() {
	    return this.getToken(VQFlowParser.BIT_SYMBOL, 0);
	};

	BLOCK_SYMBOL() {
	    return this.getToken(VQFlowParser.BLOCK_SYMBOL, 0);
	};

	BOOL_SYMBOL() {
	    return this.getToken(VQFlowParser.BOOL_SYMBOL, 0);
	};

	BOOLEAN_SYMBOL() {
	    return this.getToken(VQFlowParser.BOOLEAN_SYMBOL, 0);
	};

	BTREE_SYMBOL() {
	    return this.getToken(VQFlowParser.BTREE_SYMBOL, 0);
	};

	BUCKETS_SYMBOL() {
	    return this.getToken(VQFlowParser.BUCKETS_SYMBOL, 0);
	};

	CASCADED_SYMBOL() {
	    return this.getToken(VQFlowParser.CASCADED_SYMBOL, 0);
	};

	CATALOG_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.CATALOG_NAME_SYMBOL, 0);
	};

	CHAIN_SYMBOL() {
	    return this.getToken(VQFlowParser.CHAIN_SYMBOL, 0);
	};

	CHANGED_SYMBOL() {
	    return this.getToken(VQFlowParser.CHANGED_SYMBOL, 0);
	};

	CHANNEL_SYMBOL() {
	    return this.getToken(VQFlowParser.CHANNEL_SYMBOL, 0);
	};

	CIPHER_SYMBOL() {
	    return this.getToken(VQFlowParser.CIPHER_SYMBOL, 0);
	};

	CLIENT_SYMBOL() {
	    return this.getToken(VQFlowParser.CLIENT_SYMBOL, 0);
	};

	CLASS_ORIGIN_SYMBOL() {
	    return this.getToken(VQFlowParser.CLASS_ORIGIN_SYMBOL, 0);
	};

	COALESCE_SYMBOL() {
	    return this.getToken(VQFlowParser.COALESCE_SYMBOL, 0);
	};

	CODE_SYMBOL() {
	    return this.getToken(VQFlowParser.CODE_SYMBOL, 0);
	};

	COLLATION_SYMBOL() {
	    return this.getToken(VQFlowParser.COLLATION_SYMBOL, 0);
	};

	COLUMN_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.COLUMN_NAME_SYMBOL, 0);
	};

	COLUMN_FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.COLUMN_FORMAT_SYMBOL, 0);
	};

	COLUMNS_SYMBOL() {
	    return this.getToken(VQFlowParser.COLUMNS_SYMBOL, 0);
	};

	COMMITTED_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMITTED_SYMBOL, 0);
	};

	COMPACT_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPACT_SYMBOL, 0);
	};

	COMPLETION_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPLETION_SYMBOL, 0);
	};

	COMPONENT_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPONENT_SYMBOL, 0);
	};

	COMPRESSED_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPRESSED_SYMBOL, 0);
	};

	COMPRESSION_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPRESSION_SYMBOL, 0);
	};

	CONCURRENT_SYMBOL() {
	    return this.getToken(VQFlowParser.CONCURRENT_SYMBOL, 0);
	};

	CONNECTION_SYMBOL() {
	    return this.getToken(VQFlowParser.CONNECTION_SYMBOL, 0);
	};

	CONSISTENT_SYMBOL() {
	    return this.getToken(VQFlowParser.CONSISTENT_SYMBOL, 0);
	};

	CONSTRAINT_CATALOG_SYMBOL() {
	    return this.getToken(VQFlowParser.CONSTRAINT_CATALOG_SYMBOL, 0);
	};

	CONSTRAINT_SCHEMA_SYMBOL() {
	    return this.getToken(VQFlowParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
	};

	CONSTRAINT_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.CONSTRAINT_NAME_SYMBOL, 0);
	};

	CONTEXT_SYMBOL() {
	    return this.getToken(VQFlowParser.CONTEXT_SYMBOL, 0);
	};

	CONTRIBUTORS_SYMBOL() {
	    return this.getToken(VQFlowParser.CONTRIBUTORS_SYMBOL, 0);
	};

	CPU_SYMBOL() {
	    return this.getToken(VQFlowParser.CPU_SYMBOL, 0);
	};

	CURRENT_SYMBOL() {
	    return this.getToken(VQFlowParser.CURRENT_SYMBOL, 0);
	};

	CURSOR_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.CURSOR_NAME_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(VQFlowParser.DATA_SYMBOL, 0);
	};

	DATAFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.DATAFILE_SYMBOL, 0);
	};

	DATETIME_SYMBOL() {
	    return this.getToken(VQFlowParser.DATETIME_SYMBOL, 0);
	};

	DATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DATE_SYMBOL, 0);
	};

	DAY_SYMBOL() {
	    return this.getToken(VQFlowParser.DAY_SYMBOL, 0);
	};

	DEFAULT_AUTH_SYMBOL() {
	    return this.getToken(VQFlowParser.DEFAULT_AUTH_SYMBOL, 0);
	};

	DEFINER_SYMBOL() {
	    return this.getToken(VQFlowParser.DEFINER_SYMBOL, 0);
	};

	DELAY_KEY_WRITE_SYMBOL() {
	    return this.getToken(VQFlowParser.DELAY_KEY_WRITE_SYMBOL, 0);
	};

	DES_KEY_FILE_SYMBOL() {
	    return this.getToken(VQFlowParser.DES_KEY_FILE_SYMBOL, 0);
	};

	DESCRIPTION_SYMBOL() {
	    return this.getToken(VQFlowParser.DESCRIPTION_SYMBOL, 0);
	};

	DIAGNOSTICS_SYMBOL() {
	    return this.getToken(VQFlowParser.DIAGNOSTICS_SYMBOL, 0);
	};

	DIRECTORY_SYMBOL() {
	    return this.getToken(VQFlowParser.DIRECTORY_SYMBOL, 0);
	};

	DISABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.DISABLE_SYMBOL, 0);
	};

	DISCARD_SYMBOL() {
	    return this.getToken(VQFlowParser.DISCARD_SYMBOL, 0);
	};

	DISK_SYMBOL() {
	    return this.getToken(VQFlowParser.DISK_SYMBOL, 0);
	};

	DUMPFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.DUMPFILE_SYMBOL, 0);
	};

	DUPLICATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DUPLICATE_SYMBOL, 0);
	};

	DYNAMIC_SYMBOL() {
	    return this.getToken(VQFlowParser.DYNAMIC_SYMBOL, 0);
	};

	ENCRYPTION_SYMBOL() {
	    return this.getToken(VQFlowParser.ENCRYPTION_SYMBOL, 0);
	};

	ENDS_SYMBOL() {
	    return this.getToken(VQFlowParser.ENDS_SYMBOL, 0);
	};

	ENUM_SYMBOL() {
	    return this.getToken(VQFlowParser.ENUM_SYMBOL, 0);
	};

	ENGINE_SYMBOL() {
	    return this.getToken(VQFlowParser.ENGINE_SYMBOL, 0);
	};

	ENGINES_SYMBOL() {
	    return this.getToken(VQFlowParser.ENGINES_SYMBOL, 0);
	};

	ERROR_SYMBOL() {
	    return this.getToken(VQFlowParser.ERROR_SYMBOL, 0);
	};

	ERRORS_SYMBOL() {
	    return this.getToken(VQFlowParser.ERRORS_SYMBOL, 0);
	};

	ESCAPE_SYMBOL() {
	    return this.getToken(VQFlowParser.ESCAPE_SYMBOL, 0);
	};

	EVENTS_SYMBOL() {
	    return this.getToken(VQFlowParser.EVENTS_SYMBOL, 0);
	};

	EVERY_SYMBOL() {
	    return this.getToken(VQFlowParser.EVERY_SYMBOL, 0);
	};

	EXCLUDE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXCLUDE_SYMBOL, 0);
	};

	EXPANSION_SYMBOL() {
	    return this.getToken(VQFlowParser.EXPANSION_SYMBOL, 0);
	};

	EXPORT_SYMBOL() {
	    return this.getToken(VQFlowParser.EXPORT_SYMBOL, 0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(VQFlowParser.EXTENDED_SYMBOL, 0);
	};

	EXTENT_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXTENT_SIZE_SYMBOL, 0);
	};

	FAULTS_SYMBOL() {
	    return this.getToken(VQFlowParser.FAULTS_SYMBOL, 0);
	};

	FAST_SYMBOL() {
	    return this.getToken(VQFlowParser.FAST_SYMBOL, 0);
	};

	FOLLOWING_SYMBOL() {
	    return this.getToken(VQFlowParser.FOLLOWING_SYMBOL, 0);
	};

	FOUND_SYMBOL() {
	    return this.getToken(VQFlowParser.FOUND_SYMBOL, 0);
	};

	ENABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.ENABLE_SYMBOL, 0);
	};

	FULL_SYMBOL() {
	    return this.getToken(VQFlowParser.FULL_SYMBOL, 0);
	};

	FILE_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.FILE_BLOCK_SIZE_SYMBOL, 0);
	};

	FILTER_SYMBOL() {
	    return this.getToken(VQFlowParser.FILTER_SYMBOL, 0);
	};

	FIRST_SYMBOL() {
	    return this.getToken(VQFlowParser.FIRST_SYMBOL, 0);
	};

	FIXED_SYMBOL() {
	    return this.getToken(VQFlowParser.FIXED_SYMBOL, 0);
	};

	GENERAL_SYMBOL() {
	    return this.getToken(VQFlowParser.GENERAL_SYMBOL, 0);
	};

	GEOMETRY_SYMBOL() {
	    return this.getToken(VQFlowParser.GEOMETRY_SYMBOL, 0);
	};

	GEOMETRYCOLLECTION_SYMBOL() {
	    return this.getToken(VQFlowParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	};

	GET_FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.GET_FORMAT_SYMBOL, 0);
	};

	GRANTS_SYMBOL() {
	    return this.getToken(VQFlowParser.GRANTS_SYMBOL, 0);
	};

	GLOBAL_SYMBOL() {
	    return this.getToken(VQFlowParser.GLOBAL_SYMBOL, 0);
	};

	HASH_SYMBOL() {
	    return this.getToken(VQFlowParser.HASH_SYMBOL, 0);
	};

	HISTOGRAM_SYMBOL() {
	    return this.getToken(VQFlowParser.HISTOGRAM_SYMBOL, 0);
	};

	HISTORY_SYMBOL() {
	    return this.getToken(VQFlowParser.HISTORY_SYMBOL, 0);
	};

	HOSTS_SYMBOL() {
	    return this.getToken(VQFlowParser.HOSTS_SYMBOL, 0);
	};

	HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.HOUR_SYMBOL, 0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(VQFlowParser.IDENTIFIED_SYMBOL, 0);
	};

	IGNORE_SERVER_IDS_SYMBOL() {
	    return this.getToken(VQFlowParser.IGNORE_SERVER_IDS_SYMBOL, 0);
	};

	INVOKER_SYMBOL() {
	    return this.getToken(VQFlowParser.INVOKER_SYMBOL, 0);
	};

	INDEXES_SYMBOL() {
	    return this.getToken(VQFlowParser.INDEXES_SYMBOL, 0);
	};

	INITIAL_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.INITIAL_SIZE_SYMBOL, 0);
	};

	INSTANCE_SYMBOL() {
	    return this.getToken(VQFlowParser.INSTANCE_SYMBOL, 0);
	};

	INACTIVE_SYMBOL() {
	    return this.getToken(VQFlowParser.INACTIVE_SYMBOL, 0);
	};

	IO_SYMBOL() {
	    return this.getToken(VQFlowParser.IO_SYMBOL, 0);
	};

	IPC_SYMBOL() {
	    return this.getToken(VQFlowParser.IPC_SYMBOL, 0);
	};

	ISOLATION_SYMBOL() {
	    return this.getToken(VQFlowParser.ISOLATION_SYMBOL, 0);
	};

	ISSUER_SYMBOL() {
	    return this.getToken(VQFlowParser.ISSUER_SYMBOL, 0);
	};

	INSERT_METHOD_SYMBOL() {
	    return this.getToken(VQFlowParser.INSERT_METHOD_SYMBOL, 0);
	};

	JSON_SYMBOL() {
	    return this.getToken(VQFlowParser.JSON_SYMBOL, 0);
	};

	KEY_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	};

	LAST_SYMBOL() {
	    return this.getToken(VQFlowParser.LAST_SYMBOL, 0);
	};

	LEAVES_SYMBOL() {
	    return this.getToken(VQFlowParser.LEAVES_SYMBOL, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(VQFlowParser.LESS_SYMBOL, 0);
	};

	LEVEL_SYMBOL() {
	    return this.getToken(VQFlowParser.LEVEL_SYMBOL, 0);
	};

	LINESTRING_SYMBOL() {
	    return this.getToken(VQFlowParser.LINESTRING_SYMBOL, 0);
	};

	LIST_SYMBOL() {
	    return this.getToken(VQFlowParser.LIST_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(VQFlowParser.LOCAL_SYMBOL, 0);
	};

	LOCKED_SYMBOL() {
	    return this.getToken(VQFlowParser.LOCKED_SYMBOL, 0);
	};

	LOCKS_SYMBOL() {
	    return this.getToken(VQFlowParser.LOCKS_SYMBOL, 0);
	};

	LOGFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.LOGFILE_SYMBOL, 0);
	};

	LOGS_SYMBOL() {
	    return this.getToken(VQFlowParser.LOGS_SYMBOL, 0);
	};

	MAX_ROWS_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_ROWS_SYMBOL, 0);
	};

	MASTER_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SYMBOL, 0);
	};

	MASTER_HEARTBEAT_PERIOD_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
	};

	MASTER_HOST_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_HOST_SYMBOL, 0);
	};

	MASTER_PORT_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_PORT_SYMBOL, 0);
	};

	MASTER_LOG_FILE_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_LOG_FILE_SYMBOL, 0);
	};

	MASTER_LOG_POS_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_LOG_POS_SYMBOL, 0);
	};

	MASTER_USER_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_USER_SYMBOL, 0);
	};

	MASTER_PASSWORD_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_PASSWORD_SYMBOL, 0);
	};

	MASTER_PUBLIC_KEY_PATH_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
	};

	MASTER_SERVER_ID_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SERVER_ID_SYMBOL, 0);
	};

	MASTER_CONNECT_RETRY_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
	};

	MASTER_RETRY_COUNT_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_RETRY_COUNT_SYMBOL, 0);
	};

	MASTER_DELAY_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_DELAY_SYMBOL, 0);
	};

	MASTER_SSL_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_SYMBOL, 0);
	};

	MASTER_SSL_CA_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CA_SYMBOL, 0);
	};

	MASTER_SSL_CAPATH_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CAPATH_SYMBOL, 0);
	};

	MASTER_TLS_VERSION_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_TLS_VERSION_SYMBOL, 0);
	};

	MASTER_SSL_CERT_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CERT_SYMBOL, 0);
	};

	MASTER_SSL_CIPHER_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CIPHER_SYMBOL, 0);
	};

	MASTER_SSL_CRL_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CRL_SYMBOL, 0);
	};

	MASTER_SSL_CRLPATH_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
	};

	MASTER_SSL_KEY_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_KEY_SYMBOL, 0);
	};

	MASTER_AUTO_POSITION_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_AUTO_POSITION_SYMBOL, 0);
	};

	MAX_CONNECTIONS_PER_HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
	};

	MAX_QUERIES_PER_HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
	};

	MAX_STATEMENT_TIME_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_STATEMENT_TIME_SYMBOL, 0);
	};

	MAX_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_SIZE_SYMBOL, 0);
	};

	MAX_UPDATES_PER_HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
	};

	MAX_USER_CONNECTIONS_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
	};

	MEDIUM_SYMBOL() {
	    return this.getToken(VQFlowParser.MEDIUM_SYMBOL, 0);
	};

	MEMORY_SYMBOL() {
	    return this.getToken(VQFlowParser.MEMORY_SYMBOL, 0);
	};

	MERGE_SYMBOL() {
	    return this.getToken(VQFlowParser.MERGE_SYMBOL, 0);
	};

	MESSAGE_TEXT_SYMBOL() {
	    return this.getToken(VQFlowParser.MESSAGE_TEXT_SYMBOL, 0);
	};

	MICROSECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.MICROSECOND_SYMBOL, 0);
	};

	MIGRATE_SYMBOL() {
	    return this.getToken(VQFlowParser.MIGRATE_SYMBOL, 0);
	};

	MINUTE_SYMBOL() {
	    return this.getToken(VQFlowParser.MINUTE_SYMBOL, 0);
	};

	MIN_ROWS_SYMBOL() {
	    return this.getToken(VQFlowParser.MIN_ROWS_SYMBOL, 0);
	};

	MODIFY_SYMBOL() {
	    return this.getToken(VQFlowParser.MODIFY_SYMBOL, 0);
	};

	MODE_SYMBOL() {
	    return this.getToken(VQFlowParser.MODE_SYMBOL, 0);
	};

	MONTH_SYMBOL() {
	    return this.getToken(VQFlowParser.MONTH_SYMBOL, 0);
	};

	MULTILINESTRING_SYMBOL() {
	    return this.getToken(VQFlowParser.MULTILINESTRING_SYMBOL, 0);
	};

	MULTIPOINT_SYMBOL() {
	    return this.getToken(VQFlowParser.MULTIPOINT_SYMBOL, 0);
	};

	MULTIPOLYGON_SYMBOL() {
	    return this.getToken(VQFlowParser.MULTIPOLYGON_SYMBOL, 0);
	};

	MUTEX_SYMBOL() {
	    return this.getToken(VQFlowParser.MUTEX_SYMBOL, 0);
	};

	MYSQL_ERRNO_SYMBOL() {
	    return this.getToken(VQFlowParser.MYSQL_ERRNO_SYMBOL, 0);
	};

	NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.NAME_SYMBOL, 0);
	};

	NAMES_SYMBOL() {
	    return this.getToken(VQFlowParser.NAMES_SYMBOL, 0);
	};

	NATIONAL_SYMBOL() {
	    return this.getToken(VQFlowParser.NATIONAL_SYMBOL, 0);
	};

	NCHAR_SYMBOL() {
	    return this.getToken(VQFlowParser.NCHAR_SYMBOL, 0);
	};

	NDBCLUSTER_SYMBOL() {
	    return this.getToken(VQFlowParser.NDBCLUSTER_SYMBOL, 0);
	};

	NESTED_SYMBOL() {
	    return this.getToken(VQFlowParser.NESTED_SYMBOL, 0);
	};

	NEVER_SYMBOL() {
	    return this.getToken(VQFlowParser.NEVER_SYMBOL, 0);
	};

	NEXT_SYMBOL() {
	    return this.getToken(VQFlowParser.NEXT_SYMBOL, 0);
	};

	NEW_SYMBOL() {
	    return this.getToken(VQFlowParser.NEW_SYMBOL, 0);
	};

	NO_WAIT_SYMBOL() {
	    return this.getToken(VQFlowParser.NO_WAIT_SYMBOL, 0);
	};

	NODEGROUP_SYMBOL() {
	    return this.getToken(VQFlowParser.NODEGROUP_SYMBOL, 0);
	};

	NULLS_SYMBOL() {
	    return this.getToken(VQFlowParser.NULLS_SYMBOL, 0);
	};

	NOWAIT_SYMBOL() {
	    return this.getToken(VQFlowParser.NOWAIT_SYMBOL, 0);
	};

	NUMBER_SYMBOL() {
	    return this.getToken(VQFlowParser.NUMBER_SYMBOL, 0);
	};

	NVARCHAR_SYMBOL() {
	    return this.getToken(VQFlowParser.NVARCHAR_SYMBOL, 0);
	};

	OFFSET_SYMBOL() {
	    return this.getToken(VQFlowParser.OFFSET_SYMBOL, 0);
	};

	OLD_SYMBOL() {
	    return this.getToken(VQFlowParser.OLD_SYMBOL, 0);
	};

	OLD_PASSWORD_SYMBOL() {
	    return this.getToken(VQFlowParser.OLD_PASSWORD_SYMBOL, 0);
	};

	ONE_SYMBOL() {
	    return this.getToken(VQFlowParser.ONE_SYMBOL, 0);
	};

	OPTIONAL_SYMBOL() {
	    return this.getToken(VQFlowParser.OPTIONAL_SYMBOL, 0);
	};

	ORDINALITY_SYMBOL() {
	    return this.getToken(VQFlowParser.ORDINALITY_SYMBOL, 0);
	};

	ORGANIZATION_SYMBOL() {
	    return this.getToken(VQFlowParser.ORGANIZATION_SYMBOL, 0);
	};

	OTHERS_SYMBOL() {
	    return this.getToken(VQFlowParser.OTHERS_SYMBOL, 0);
	};

	PACK_KEYS_SYMBOL() {
	    return this.getToken(VQFlowParser.PACK_KEYS_SYMBOL, 0);
	};

	PAGE_SYMBOL() {
	    return this.getToken(VQFlowParser.PAGE_SYMBOL, 0);
	};

	PARTIAL_SYMBOL() {
	    return this.getToken(VQFlowParser.PARTIAL_SYMBOL, 0);
	};

	PARTITIONING_SYMBOL() {
	    return this.getToken(VQFlowParser.PARTITIONING_SYMBOL, 0);
	};

	PARTITIONS_SYMBOL() {
	    return this.getToken(VQFlowParser.PARTITIONS_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(VQFlowParser.PASSWORD_SYMBOL, 0);
	};

	PATH_SYMBOL() {
	    return this.getToken(VQFlowParser.PATH_SYMBOL, 0);
	};

	PHASE_SYMBOL() {
	    return this.getToken(VQFlowParser.PHASE_SYMBOL, 0);
	};

	PLUGIN_DIR_SYMBOL() {
	    return this.getToken(VQFlowParser.PLUGIN_DIR_SYMBOL, 0);
	};

	PLUGIN_SYMBOL() {
	    return this.getToken(VQFlowParser.PLUGIN_SYMBOL, 0);
	};

	PLUGINS_SYMBOL() {
	    return this.getToken(VQFlowParser.PLUGINS_SYMBOL, 0);
	};

	POINT_SYMBOL() {
	    return this.getToken(VQFlowParser.POINT_SYMBOL, 0);
	};

	POLYGON_SYMBOL() {
	    return this.getToken(VQFlowParser.POLYGON_SYMBOL, 0);
	};

	PRECEDING_SYMBOL() {
	    return this.getToken(VQFlowParser.PRECEDING_SYMBOL, 0);
	};

	PRESERVE_SYMBOL() {
	    return this.getToken(VQFlowParser.PRESERVE_SYMBOL, 0);
	};

	PREV_SYMBOL() {
	    return this.getToken(VQFlowParser.PREV_SYMBOL, 0);
	};

	THREAD_PRIORITY_SYMBOL() {
	    return this.getToken(VQFlowParser.THREAD_PRIORITY_SYMBOL, 0);
	};

	PRIVILEGES_SYMBOL() {
	    return this.getToken(VQFlowParser.PRIVILEGES_SYMBOL, 0);
	};

	PROCESSLIST_SYMBOL() {
	    return this.getToken(VQFlowParser.PROCESSLIST_SYMBOL, 0);
	};

	PROFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.PROFILE_SYMBOL, 0);
	};

	PROFILES_SYMBOL() {
	    return this.getToken(VQFlowParser.PROFILES_SYMBOL, 0);
	};

	QUARTER_SYMBOL() {
	    return this.getToken(VQFlowParser.QUARTER_SYMBOL, 0);
	};

	QUERY_SYMBOL() {
	    return this.getToken(VQFlowParser.QUERY_SYMBOL, 0);
	};

	QUICK_SYMBOL() {
	    return this.getToken(VQFlowParser.QUICK_SYMBOL, 0);
	};

	READ_ONLY_SYMBOL() {
	    return this.getToken(VQFlowParser.READ_ONLY_SYMBOL, 0);
	};

	REBUILD_SYMBOL() {
	    return this.getToken(VQFlowParser.REBUILD_SYMBOL, 0);
	};

	RECOVER_SYMBOL() {
	    return this.getToken(VQFlowParser.RECOVER_SYMBOL, 0);
	};

	REDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.REDO_BUFFER_SIZE_SYMBOL, 0);
	};

	REDOFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.REDOFILE_SYMBOL, 0);
	};

	REDUNDANT_SYMBOL() {
	    return this.getToken(VQFlowParser.REDUNDANT_SYMBOL, 0);
	};

	RELAY_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAY_SYMBOL, 0);
	};

	RELAYLOG_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAYLOG_SYMBOL, 0);
	};

	RELAY_LOG_FILE_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAY_LOG_FILE_SYMBOL, 0);
	};

	RELAY_LOG_POS_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAY_LOG_POS_SYMBOL, 0);
	};

	RELAY_THREAD_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAY_THREAD_SYMBOL, 0);
	};

	REMOTE_SYMBOL() {
	    return this.getToken(VQFlowParser.REMOTE_SYMBOL, 0);
	};

	REORGANIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.REORGANIZE_SYMBOL, 0);
	};

	REPEATABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPEATABLE_SYMBOL, 0);
	};

	REPLICATE_DO_DB_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_DO_DB_SYMBOL, 0);
	};

	REPLICATE_IGNORE_DB_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
	};

	REPLICATE_DO_TABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_DO_TABLE_SYMBOL, 0);
	};

	REPLICATE_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
	};

	REPLICATE_WILD_DO_TABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
	};

	REPLICATE_WILD_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
	};

	REPLICATE_REWRITE_DB_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
	};

	USER_RESOURCES_SYMBOL() {
	    return this.getToken(VQFlowParser.USER_RESOURCES_SYMBOL, 0);
	};

	RESPECT_SYMBOL() {
	    return this.getToken(VQFlowParser.RESPECT_SYMBOL, 0);
	};

	RESUME_SYMBOL() {
	    return this.getToken(VQFlowParser.RESUME_SYMBOL, 0);
	};

	RETAIN_SYMBOL() {
	    return this.getToken(VQFlowParser.RETAIN_SYMBOL, 0);
	};

	RETURNED_SQLSTATE_SYMBOL() {
	    return this.getToken(VQFlowParser.RETURNED_SQLSTATE_SYMBOL, 0);
	};

	RETURNS_SYMBOL() {
	    return this.getToken(VQFlowParser.RETURNS_SYMBOL, 0);
	};

	REUSE_SYMBOL() {
	    return this.getToken(VQFlowParser.REUSE_SYMBOL, 0);
	};

	REVERSE_SYMBOL() {
	    return this.getToken(VQFlowParser.REVERSE_SYMBOL, 0);
	};

	ROLLUP_SYMBOL() {
	    return this.getToken(VQFlowParser.ROLLUP_SYMBOL, 0);
	};

	ROTATE_SYMBOL() {
	    return this.getToken(VQFlowParser.ROTATE_SYMBOL, 0);
	};

	ROUTINE_SYMBOL() {
	    return this.getToken(VQFlowParser.ROUTINE_SYMBOL, 0);
	};

	ROW_COUNT_SYMBOL() {
	    return this.getToken(VQFlowParser.ROW_COUNT_SYMBOL, 0);
	};

	ROW_FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.ROW_FORMAT_SYMBOL, 0);
	};

	RTREE_SYMBOL() {
	    return this.getToken(VQFlowParser.RTREE_SYMBOL, 0);
	};

	SCHEDULE_SYMBOL() {
	    return this.getToken(VQFlowParser.SCHEDULE_SYMBOL, 0);
	};

	SCHEMA_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.SCHEMA_NAME_SYMBOL, 0);
	};

	SECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.SECOND_SYMBOL, 0);
	};

	SERIAL_SYMBOL() {
	    return this.getToken(VQFlowParser.SERIAL_SYMBOL, 0);
	};

	SERIALIZABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.SERIALIZABLE_SYMBOL, 0);
	};

	SESSION_SYMBOL() {
	    return this.getToken(VQFlowParser.SESSION_SYMBOL, 0);
	};

	SHARE_SYMBOL() {
	    return this.getToken(VQFlowParser.SHARE_SYMBOL, 0);
	};

	SIMPLE_SYMBOL() {
	    return this.getToken(VQFlowParser.SIMPLE_SYMBOL, 0);
	};

	SKIP_SYMBOL() {
	    return this.getToken(VQFlowParser.SKIP_SYMBOL, 0);
	};

	SLOW_SYMBOL() {
	    return this.getToken(VQFlowParser.SLOW_SYMBOL, 0);
	};

	SNAPSHOT_SYMBOL() {
	    return this.getToken(VQFlowParser.SNAPSHOT_SYMBOL, 0);
	};

	SOUNDS_SYMBOL() {
	    return this.getToken(VQFlowParser.SOUNDS_SYMBOL, 0);
	};

	SOURCE_SYMBOL() {
	    return this.getToken(VQFlowParser.SOURCE_SYMBOL, 0);
	};

	SQL_AFTER_GTIDS_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_AFTER_GTIDS_SYMBOL, 0);
	};

	SQL_AFTER_MTS_GAPS_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
	};

	SQL_BEFORE_GTIDS_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
	};

	SQL_CACHE_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_CACHE_SYMBOL, 0);
	};

	SQL_BUFFER_RESULT_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	};

	SQL_NO_CACHE_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_NO_CACHE_SYMBOL, 0);
	};

	SQL_THREAD_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_THREAD_SYMBOL, 0);
	};

	SRID_SYMBOL() {
	    return this.getToken(VQFlowParser.SRID_SYMBOL, 0);
	};

	STACKED_SYMBOL() {
	    return this.getToken(VQFlowParser.STACKED_SYMBOL, 0);
	};

	STARTS_SYMBOL() {
	    return this.getToken(VQFlowParser.STARTS_SYMBOL, 0);
	};

	STATS_AUTO_RECALC_SYMBOL() {
	    return this.getToken(VQFlowParser.STATS_AUTO_RECALC_SYMBOL, 0);
	};

	STATS_PERSISTENT_SYMBOL() {
	    return this.getToken(VQFlowParser.STATS_PERSISTENT_SYMBOL, 0);
	};

	STATS_SAMPLE_PAGES_SYMBOL() {
	    return this.getToken(VQFlowParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
	};

	STATUS_SYMBOL() {
	    return this.getToken(VQFlowParser.STATUS_SYMBOL, 0);
	};

	STORAGE_SYMBOL() {
	    return this.getToken(VQFlowParser.STORAGE_SYMBOL, 0);
	};

	STRING_SYMBOL() {
	    return this.getToken(VQFlowParser.STRING_SYMBOL, 0);
	};

	SUBCLASS_ORIGIN_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBCLASS_ORIGIN_SYMBOL, 0);
	};

	SUBDATE_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBDATE_SYMBOL, 0);
	};

	SUBJECT_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBJECT_SYMBOL, 0);
	};

	SUBPARTITION_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBPARTITION_SYMBOL, 0);
	};

	SUBPARTITIONS_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBPARTITIONS_SYMBOL, 0);
	};

	SUPER_SYMBOL() {
	    return this.getToken(VQFlowParser.SUPER_SYMBOL, 0);
	};

	SUSPEND_SYMBOL() {
	    return this.getToken(VQFlowParser.SUSPEND_SYMBOL, 0);
	};

	SWAPS_SYMBOL() {
	    return this.getToken(VQFlowParser.SWAPS_SYMBOL, 0);
	};

	SWITCHES_SYMBOL() {
	    return this.getToken(VQFlowParser.SWITCHES_SYMBOL, 0);
	};

	TABLE_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.TABLE_NAME_SYMBOL, 0);
	};

	TABLES_SYMBOL() {
	    return this.getToken(VQFlowParser.TABLES_SYMBOL, 0);
	};

	TABLE_CHECKSUM_SYMBOL() {
	    return this.getToken(VQFlowParser.TABLE_CHECKSUM_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(VQFlowParser.TABLESPACE_SYMBOL, 0);
	};

	TEMPORARY_SYMBOL() {
	    return this.getToken(VQFlowParser.TEMPORARY_SYMBOL, 0);
	};

	TEMPTABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.TEMPTABLE_SYMBOL, 0);
	};

	TEXT_SYMBOL() {
	    return this.getToken(VQFlowParser.TEXT_SYMBOL, 0);
	};

	THAN_SYMBOL() {
	    return this.getToken(VQFlowParser.THAN_SYMBOL, 0);
	};

	TIES_SYMBOL() {
	    return this.getToken(VQFlowParser.TIES_SYMBOL, 0);
	};

	TRANSACTION_SYMBOL() {
	    return this.getToken(VQFlowParser.TRANSACTION_SYMBOL, 0);
	};

	TRIGGERS_SYMBOL() {
	    return this.getToken(VQFlowParser.TRIGGERS_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_SYMBOL, 0);
	};

	TIMESTAMP_ADD_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_ADD_SYMBOL, 0);
	};

	TIMESTAMP_DIFF_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_DIFF_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(VQFlowParser.TIME_SYMBOL, 0);
	};

	TYPES_SYMBOL() {
	    return this.getToken(VQFlowParser.TYPES_SYMBOL, 0);
	};

	TYPE_SYMBOL() {
	    return this.getToken(VQFlowParser.TYPE_SYMBOL, 0);
	};

	UDF_RETURNS_SYMBOL() {
	    return this.getToken(VQFlowParser.UDF_RETURNS_SYMBOL, 0);
	};

	UNBOUNDED_SYMBOL() {
	    return this.getToken(VQFlowParser.UNBOUNDED_SYMBOL, 0);
	};

	UNCOMMITTED_SYMBOL() {
	    return this.getToken(VQFlowParser.UNCOMMITTED_SYMBOL, 0);
	};

	UNDEFINED_SYMBOL() {
	    return this.getToken(VQFlowParser.UNDEFINED_SYMBOL, 0);
	};

	UNDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
	};

	UNDOFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.UNDOFILE_SYMBOL, 0);
	};

	UNKNOWN_SYMBOL() {
	    return this.getToken(VQFlowParser.UNKNOWN_SYMBOL, 0);
	};

	UNTIL_SYMBOL() {
	    return this.getToken(VQFlowParser.UNTIL_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(VQFlowParser.USER_SYMBOL, 0);
	};

	USE_FRM_SYMBOL() {
	    return this.getToken(VQFlowParser.USE_FRM_SYMBOL, 0);
	};

	VARIABLES_SYMBOL() {
	    return this.getToken(VQFlowParser.VARIABLES_SYMBOL, 0);
	};

	VCPU_SYMBOL() {
	    return this.getToken(VQFlowParser.VCPU_SYMBOL, 0);
	};

	VIEW_SYMBOL() {
	    return this.getToken(VQFlowParser.VIEW_SYMBOL, 0);
	};

	VALUE_SYMBOL() {
	    return this.getToken(VQFlowParser.VALUE_SYMBOL, 0);
	};

	WARNINGS_SYMBOL() {
	    return this.getToken(VQFlowParser.WARNINGS_SYMBOL, 0);
	};

	WAIT_SYMBOL() {
	    return this.getToken(VQFlowParser.WAIT_SYMBOL, 0);
	};

	WEEK_SYMBOL() {
	    return this.getToken(VQFlowParser.WEEK_SYMBOL, 0);
	};

	WORK_SYMBOL() {
	    return this.getToken(VQFlowParser.WORK_SYMBOL, 0);
	};

	WEIGHT_STRING_SYMBOL() {
	    return this.getToken(VQFlowParser.WEIGHT_STRING_SYMBOL, 0);
	};

	X509_SYMBOL() {
	    return this.getToken(VQFlowParser.X509_SYMBOL, 0);
	};

	XID_SYMBOL() {
	    return this.getToken(VQFlowParser.XID_SYMBOL, 0);
	};

	XML_SYMBOL() {
	    return this.getToken(VQFlowParser.XML_SYMBOL, 0);
	};

	YEAR_SYMBOL() {
	    return this.getToken(VQFlowParser.YEAR_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(VQFlowParser.SHUTDOWN_SYMBOL, 0);
	};

	CUBE_SYMBOL() {
	    return this.getToken(VQFlowParser.CUBE_SYMBOL, 0);
	};

	IMPORT_SYMBOL() {
	    return this.getToken(VQFlowParser.IMPORT_SYMBOL, 0);
	};

	FUNCTION_SYMBOL() {
	    return this.getToken(VQFlowParser.FUNCTION_SYMBOL, 0);
	};

	ROWS_SYMBOL() {
	    return this.getToken(VQFlowParser.ROWS_SYMBOL, 0);
	};

	ROW_SYMBOL() {
	    return this.getToken(VQFlowParser.ROW_SYMBOL, 0);
	};

	EXCHANGE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXCHANGE_SYMBOL, 0);
	};

	EXPIRE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXPIRE_SYMBOL, 0);
	};

	ONLY_SYMBOL() {
	    return this.getToken(VQFlowParser.ONLY_SYMBOL, 0);
	};

	VALIDATION_SYMBOL() {
	    return this.getToken(VQFlowParser.VALIDATION_SYMBOL, 0);
	};

	WITHOUT_SYMBOL() {
	    return this.getToken(VQFlowParser.WITHOUT_SYMBOL, 0);
	};

	ADMIN_SYMBOL() {
	    return this.getToken(VQFlowParser.ADMIN_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterRoleOrLabelKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitRoleOrLabelKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitRoleOrLabelKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_labelKeyword;
    }

	roleOrLabelKeyword() {
	    return this.getTypedRuleContext(RoleOrLabelKeywordContext,0);
	};

	EVENT_SYMBOL() {
	    return this.getToken(VQFlowParser.EVENT_SYMBOL, 0);
	};

	FILE_SYMBOL() {
	    return this.getToken(VQFlowParser.FILE_SYMBOL, 0);
	};

	NONE_SYMBOL() {
	    return this.getToken(VQFlowParser.NONE_SYMBOL, 0);
	};

	PROCESS_SYMBOL() {
	    return this.getToken(VQFlowParser.PROCESS_SYMBOL, 0);
	};

	PROXY_SYMBOL() {
	    return this.getToken(VQFlowParser.PROXY_SYMBOL, 0);
	};

	RELOAD_SYMBOL() {
	    return this.getToken(VQFlowParser.RELOAD_SYMBOL, 0);
	};

	REPLICATION_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATION_SYMBOL, 0);
	};

	RESOURCE_SYMBOL() {
	    return this.getToken(VQFlowParser.RESOURCE_SYMBOL, 0);
	};

	SUPER_SYMBOL() {
	    return this.getToken(VQFlowParser.SUPER_SYMBOL, 0);
	};

	identifierKeywordsUnambiguous() {
	    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
	};

	identifierKeywordsAmbiguous3Roles() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext,0);
	};

	identifierKeywordsAmbiguous4SystemVariables() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterLabelKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitLabelKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitLabelKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsAmbiguous4SystemVariablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identifierKeywordsAmbiguous4SystemVariables;
    }

	GLOBAL_SYMBOL() {
	    return this.getToken(VQFlowParser.GLOBAL_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(VQFlowParser.LOCAL_SYMBOL, 0);
	};

	PERSIST_SYMBOL() {
	    return this.getToken(VQFlowParser.PERSIST_SYMBOL, 0);
	};

	PERSIST_ONLY_SYMBOL() {
	    return this.getToken(VQFlowParser.PERSIST_ONLY_SYMBOL, 0);
	};

	SESSION_SYMBOL() {
	    return this.getToken(VQFlowParser.SESSION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentifierKeywordsAmbiguous4SystemVariables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsAmbiguous3RolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identifierKeywordsAmbiguous3Roles;
    }

	EVENT_SYMBOL() {
	    return this.getToken(VQFlowParser.EVENT_SYMBOL, 0);
	};

	FILE_SYMBOL() {
	    return this.getToken(VQFlowParser.FILE_SYMBOL, 0);
	};

	NONE_SYMBOL() {
	    return this.getToken(VQFlowParser.NONE_SYMBOL, 0);
	};

	PROCESS_SYMBOL() {
	    return this.getToken(VQFlowParser.PROCESS_SYMBOL, 0);
	};

	PROXY_SYMBOL() {
	    return this.getToken(VQFlowParser.PROXY_SYMBOL, 0);
	};

	RELOAD_SYMBOL() {
	    return this.getToken(VQFlowParser.RELOAD_SYMBOL, 0);
	};

	REPLICATION_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATION_SYMBOL, 0);
	};

	RESOURCE_SYMBOL() {
	    return this.getToken(VQFlowParser.RESOURCE_SYMBOL, 0);
	};

	SUPER_SYMBOL() {
	    return this.getToken(VQFlowParser.SUPER_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentifierKeywordsAmbiguous3Roles(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentifierKeywordsAmbiguous3Roles(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentifierKeywordsAmbiguous3Roles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsUnambiguousContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identifierKeywordsUnambiguous;
    }

	ACTION_SYMBOL() {
	    return this.getToken(VQFlowParser.ACTION_SYMBOL, 0);
	};

	ACCOUNT_SYMBOL() {
	    return this.getToken(VQFlowParser.ACCOUNT_SYMBOL, 0);
	};

	ACTIVE_SYMBOL() {
	    return this.getToken(VQFlowParser.ACTIVE_SYMBOL, 0);
	};

	ADDDATE_SYMBOL() {
	    return this.getToken(VQFlowParser.ADDDATE_SYMBOL, 0);
	};

	ADMIN_SYMBOL() {
	    return this.getToken(VQFlowParser.ADMIN_SYMBOL, 0);
	};

	AFTER_SYMBOL() {
	    return this.getToken(VQFlowParser.AFTER_SYMBOL, 0);
	};

	AGAINST_SYMBOL() {
	    return this.getToken(VQFlowParser.AGAINST_SYMBOL, 0);
	};

	AGGREGATE_SYMBOL() {
	    return this.getToken(VQFlowParser.AGGREGATE_SYMBOL, 0);
	};

	ALGORITHM_SYMBOL() {
	    return this.getToken(VQFlowParser.ALGORITHM_SYMBOL, 0);
	};

	ALWAYS_SYMBOL() {
	    return this.getToken(VQFlowParser.ALWAYS_SYMBOL, 0);
	};

	ANY_SYMBOL() {
	    return this.getToken(VQFlowParser.ANY_SYMBOL, 0);
	};

	AT_SYMBOL() {
	    return this.getToken(VQFlowParser.AT_SYMBOL, 0);
	};

	AUTOEXTEND_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.AUTOEXTEND_SIZE_SYMBOL, 0);
	};

	AUTO_INCREMENT_SYMBOL() {
	    return this.getToken(VQFlowParser.AUTO_INCREMENT_SYMBOL, 0);
	};

	AVG_ROW_LENGTH_SYMBOL() {
	    return this.getToken(VQFlowParser.AVG_ROW_LENGTH_SYMBOL, 0);
	};

	AVG_SYMBOL() {
	    return this.getToken(VQFlowParser.AVG_SYMBOL, 0);
	};

	BACKUP_SYMBOL() {
	    return this.getToken(VQFlowParser.BACKUP_SYMBOL, 0);
	};

	BINLOG_SYMBOL() {
	    return this.getToken(VQFlowParser.BINLOG_SYMBOL, 0);
	};

	BIT_SYMBOL() {
	    return this.getToken(VQFlowParser.BIT_SYMBOL, 0);
	};

	BLOCK_SYMBOL() {
	    return this.getToken(VQFlowParser.BLOCK_SYMBOL, 0);
	};

	BOOLEAN_SYMBOL() {
	    return this.getToken(VQFlowParser.BOOLEAN_SYMBOL, 0);
	};

	BOOL_SYMBOL() {
	    return this.getToken(VQFlowParser.BOOL_SYMBOL, 0);
	};

	BTREE_SYMBOL() {
	    return this.getToken(VQFlowParser.BTREE_SYMBOL, 0);
	};

	BUCKETS_SYMBOL() {
	    return this.getToken(VQFlowParser.BUCKETS_SYMBOL, 0);
	};

	CASCADED_SYMBOL() {
	    return this.getToken(VQFlowParser.CASCADED_SYMBOL, 0);
	};

	CATALOG_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.CATALOG_NAME_SYMBOL, 0);
	};

	CHAIN_SYMBOL() {
	    return this.getToken(VQFlowParser.CHAIN_SYMBOL, 0);
	};

	CHANGED_SYMBOL() {
	    return this.getToken(VQFlowParser.CHANGED_SYMBOL, 0);
	};

	CHANNEL_SYMBOL() {
	    return this.getToken(VQFlowParser.CHANNEL_SYMBOL, 0);
	};

	CIPHER_SYMBOL() {
	    return this.getToken(VQFlowParser.CIPHER_SYMBOL, 0);
	};

	CLASS_ORIGIN_SYMBOL() {
	    return this.getToken(VQFlowParser.CLASS_ORIGIN_SYMBOL, 0);
	};

	CLIENT_SYMBOL() {
	    return this.getToken(VQFlowParser.CLIENT_SYMBOL, 0);
	};

	CLOSE_SYMBOL() {
	    return this.getToken(VQFlowParser.CLOSE_SYMBOL, 0);
	};

	COALESCE_SYMBOL() {
	    return this.getToken(VQFlowParser.COALESCE_SYMBOL, 0);
	};

	CODE_SYMBOL() {
	    return this.getToken(VQFlowParser.CODE_SYMBOL, 0);
	};

	COLLATION_SYMBOL() {
	    return this.getToken(VQFlowParser.COLLATION_SYMBOL, 0);
	};

	COLUMNS_SYMBOL() {
	    return this.getToken(VQFlowParser.COLUMNS_SYMBOL, 0);
	};

	COLUMN_FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.COLUMN_FORMAT_SYMBOL, 0);
	};

	COLUMN_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.COLUMN_NAME_SYMBOL, 0);
	};

	COMMITTED_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMITTED_SYMBOL, 0);
	};

	COMPACT_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPACT_SYMBOL, 0);
	};

	COMPLETION_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPLETION_SYMBOL, 0);
	};

	COMPONENT_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPONENT_SYMBOL, 0);
	};

	COMPRESSED_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPRESSED_SYMBOL, 0);
	};

	COMPRESSION_SYMBOL() {
	    return this.getToken(VQFlowParser.COMPRESSION_SYMBOL, 0);
	};

	CONCURRENT_SYMBOL() {
	    return this.getToken(VQFlowParser.CONCURRENT_SYMBOL, 0);
	};

	CONNECTION_SYMBOL() {
	    return this.getToken(VQFlowParser.CONNECTION_SYMBOL, 0);
	};

	CONSISTENT_SYMBOL() {
	    return this.getToken(VQFlowParser.CONSISTENT_SYMBOL, 0);
	};

	CONSTRAINT_CATALOG_SYMBOL() {
	    return this.getToken(VQFlowParser.CONSTRAINT_CATALOG_SYMBOL, 0);
	};

	CONSTRAINT_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.CONSTRAINT_NAME_SYMBOL, 0);
	};

	CONSTRAINT_SCHEMA_SYMBOL() {
	    return this.getToken(VQFlowParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
	};

	CONTEXT_SYMBOL() {
	    return this.getToken(VQFlowParser.CONTEXT_SYMBOL, 0);
	};

	CPU_SYMBOL() {
	    return this.getToken(VQFlowParser.CPU_SYMBOL, 0);
	};

	CURRENT_SYMBOL() {
	    return this.getToken(VQFlowParser.CURRENT_SYMBOL, 0);
	};

	CURSOR_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.CURSOR_NAME_SYMBOL, 0);
	};

	DATAFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.DATAFILE_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(VQFlowParser.DATA_SYMBOL, 0);
	};

	DATETIME_SYMBOL() {
	    return this.getToken(VQFlowParser.DATETIME_SYMBOL, 0);
	};

	DATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DATE_SYMBOL, 0);
	};

	DAY_SYMBOL() {
	    return this.getToken(VQFlowParser.DAY_SYMBOL, 0);
	};

	DEFAULT_AUTH_SYMBOL() {
	    return this.getToken(VQFlowParser.DEFAULT_AUTH_SYMBOL, 0);
	};

	DEFINER_SYMBOL() {
	    return this.getToken(VQFlowParser.DEFINER_SYMBOL, 0);
	};

	DEFINITION_SYMBOL() {
	    return this.getToken(VQFlowParser.DEFINITION_SYMBOL, 0);
	};

	DELAY_KEY_WRITE_SYMBOL() {
	    return this.getToken(VQFlowParser.DELAY_KEY_WRITE_SYMBOL, 0);
	};

	DESCRIPTION_SYMBOL() {
	    return this.getToken(VQFlowParser.DESCRIPTION_SYMBOL, 0);
	};

	DIAGNOSTICS_SYMBOL() {
	    return this.getToken(VQFlowParser.DIAGNOSTICS_SYMBOL, 0);
	};

	DIRECTORY_SYMBOL() {
	    return this.getToken(VQFlowParser.DIRECTORY_SYMBOL, 0);
	};

	DISABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.DISABLE_SYMBOL, 0);
	};

	DISCARD_SYMBOL() {
	    return this.getToken(VQFlowParser.DISCARD_SYMBOL, 0);
	};

	DISK_SYMBOL() {
	    return this.getToken(VQFlowParser.DISK_SYMBOL, 0);
	};

	DUMPFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.DUMPFILE_SYMBOL, 0);
	};

	DUPLICATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DUPLICATE_SYMBOL, 0);
	};

	DYNAMIC_SYMBOL() {
	    return this.getToken(VQFlowParser.DYNAMIC_SYMBOL, 0);
	};

	ENABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.ENABLE_SYMBOL, 0);
	};

	ENCRYPTION_SYMBOL() {
	    return this.getToken(VQFlowParser.ENCRYPTION_SYMBOL, 0);
	};

	ENDS_SYMBOL() {
	    return this.getToken(VQFlowParser.ENDS_SYMBOL, 0);
	};

	ENFORCED_SYMBOL() {
	    return this.getToken(VQFlowParser.ENFORCED_SYMBOL, 0);
	};

	ENGINES_SYMBOL() {
	    return this.getToken(VQFlowParser.ENGINES_SYMBOL, 0);
	};

	ENGINE_SYMBOL() {
	    return this.getToken(VQFlowParser.ENGINE_SYMBOL, 0);
	};

	ENUM_SYMBOL() {
	    return this.getToken(VQFlowParser.ENUM_SYMBOL, 0);
	};

	ERRORS_SYMBOL() {
	    return this.getToken(VQFlowParser.ERRORS_SYMBOL, 0);
	};

	ERROR_SYMBOL() {
	    return this.getToken(VQFlowParser.ERROR_SYMBOL, 0);
	};

	ESCAPE_SYMBOL() {
	    return this.getToken(VQFlowParser.ESCAPE_SYMBOL, 0);
	};

	EVENTS_SYMBOL() {
	    return this.getToken(VQFlowParser.EVENTS_SYMBOL, 0);
	};

	EVERY_SYMBOL() {
	    return this.getToken(VQFlowParser.EVERY_SYMBOL, 0);
	};

	EXCHANGE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXCHANGE_SYMBOL, 0);
	};

	EXCLUDE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXCLUDE_SYMBOL, 0);
	};

	EXPANSION_SYMBOL() {
	    return this.getToken(VQFlowParser.EXPANSION_SYMBOL, 0);
	};

	EXPIRE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXPIRE_SYMBOL, 0);
	};

	EXPORT_SYMBOL() {
	    return this.getToken(VQFlowParser.EXPORT_SYMBOL, 0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(VQFlowParser.EXTENDED_SYMBOL, 0);
	};

	EXTENT_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXTENT_SIZE_SYMBOL, 0);
	};

	FAST_SYMBOL() {
	    return this.getToken(VQFlowParser.FAST_SYMBOL, 0);
	};

	FAULTS_SYMBOL() {
	    return this.getToken(VQFlowParser.FAULTS_SYMBOL, 0);
	};

	FILE_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.FILE_BLOCK_SIZE_SYMBOL, 0);
	};

	FILTER_SYMBOL() {
	    return this.getToken(VQFlowParser.FILTER_SYMBOL, 0);
	};

	FIRST_SYMBOL() {
	    return this.getToken(VQFlowParser.FIRST_SYMBOL, 0);
	};

	FIXED_SYMBOL() {
	    return this.getToken(VQFlowParser.FIXED_SYMBOL, 0);
	};

	FOLLOWING_SYMBOL() {
	    return this.getToken(VQFlowParser.FOLLOWING_SYMBOL, 0);
	};

	FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.FORMAT_SYMBOL, 0);
	};

	FOUND_SYMBOL() {
	    return this.getToken(VQFlowParser.FOUND_SYMBOL, 0);
	};

	FULL_SYMBOL() {
	    return this.getToken(VQFlowParser.FULL_SYMBOL, 0);
	};

	GENERAL_SYMBOL() {
	    return this.getToken(VQFlowParser.GENERAL_SYMBOL, 0);
	};

	GEOMETRYCOLLECTION_SYMBOL() {
	    return this.getToken(VQFlowParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	};

	GEOMETRY_SYMBOL() {
	    return this.getToken(VQFlowParser.GEOMETRY_SYMBOL, 0);
	};

	GET_FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.GET_FORMAT_SYMBOL, 0);
	};

	GET_MASTER_PUBLIC_KEY_SYMBOL() {
	    return this.getToken(VQFlowParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
	};

	GRANTS_SYMBOL() {
	    return this.getToken(VQFlowParser.GRANTS_SYMBOL, 0);
	};

	GROUP_REPLICATION_SYMBOL() {
	    return this.getToken(VQFlowParser.GROUP_REPLICATION_SYMBOL, 0);
	};

	HASH_SYMBOL() {
	    return this.getToken(VQFlowParser.HASH_SYMBOL, 0);
	};

	HISTOGRAM_SYMBOL() {
	    return this.getToken(VQFlowParser.HISTOGRAM_SYMBOL, 0);
	};

	HISTORY_SYMBOL() {
	    return this.getToken(VQFlowParser.HISTORY_SYMBOL, 0);
	};

	HOSTS_SYMBOL() {
	    return this.getToken(VQFlowParser.HOSTS_SYMBOL, 0);
	};

	HOST_SYMBOL() {
	    return this.getToken(VQFlowParser.HOST_SYMBOL, 0);
	};

	HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.HOUR_SYMBOL, 0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(VQFlowParser.IDENTIFIED_SYMBOL, 0);
	};

	IGNORE_SERVER_IDS_SYMBOL() {
	    return this.getToken(VQFlowParser.IGNORE_SERVER_IDS_SYMBOL, 0);
	};

	INACTIVE_SYMBOL() {
	    return this.getToken(VQFlowParser.INACTIVE_SYMBOL, 0);
	};

	INDEXES_SYMBOL() {
	    return this.getToken(VQFlowParser.INDEXES_SYMBOL, 0);
	};

	INITIAL_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.INITIAL_SIZE_SYMBOL, 0);
	};

	INSERT_METHOD_SYMBOL() {
	    return this.getToken(VQFlowParser.INSERT_METHOD_SYMBOL, 0);
	};

	INSTANCE_SYMBOL() {
	    return this.getToken(VQFlowParser.INSTANCE_SYMBOL, 0);
	};

	INVISIBLE_SYMBOL() {
	    return this.getToken(VQFlowParser.INVISIBLE_SYMBOL, 0);
	};

	INVOKER_SYMBOL() {
	    return this.getToken(VQFlowParser.INVOKER_SYMBOL, 0);
	};

	IO_SYMBOL() {
	    return this.getToken(VQFlowParser.IO_SYMBOL, 0);
	};

	IPC_SYMBOL() {
	    return this.getToken(VQFlowParser.IPC_SYMBOL, 0);
	};

	ISOLATION_SYMBOL() {
	    return this.getToken(VQFlowParser.ISOLATION_SYMBOL, 0);
	};

	ISSUER_SYMBOL() {
	    return this.getToken(VQFlowParser.ISSUER_SYMBOL, 0);
	};

	JSON_SYMBOL() {
	    return this.getToken(VQFlowParser.JSON_SYMBOL, 0);
	};

	KEY_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	};

	LAST_SYMBOL() {
	    return this.getToken(VQFlowParser.LAST_SYMBOL, 0);
	};

	LEAVES_SYMBOL() {
	    return this.getToken(VQFlowParser.LEAVES_SYMBOL, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(VQFlowParser.LESS_SYMBOL, 0);
	};

	LEVEL_SYMBOL() {
	    return this.getToken(VQFlowParser.LEVEL_SYMBOL, 0);
	};

	LINESTRING_SYMBOL() {
	    return this.getToken(VQFlowParser.LINESTRING_SYMBOL, 0);
	};

	LIST_SYMBOL() {
	    return this.getToken(VQFlowParser.LIST_SYMBOL, 0);
	};

	LOCKED_SYMBOL() {
	    return this.getToken(VQFlowParser.LOCKED_SYMBOL, 0);
	};

	LOCKS_SYMBOL() {
	    return this.getToken(VQFlowParser.LOCKS_SYMBOL, 0);
	};

	LOGFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.LOGFILE_SYMBOL, 0);
	};

	LOGS_SYMBOL() {
	    return this.getToken(VQFlowParser.LOGS_SYMBOL, 0);
	};

	MASTER_AUTO_POSITION_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_AUTO_POSITION_SYMBOL, 0);
	};

	MASTER_COMPRESSION_ALGORITHM_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
	};

	MASTER_CONNECT_RETRY_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
	};

	MASTER_DELAY_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_DELAY_SYMBOL, 0);
	};

	MASTER_HEARTBEAT_PERIOD_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
	};

	MASTER_HOST_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_HOST_SYMBOL, 0);
	};

	NETWORK_NAMESPACE_SYMBOL() {
	    return this.getToken(VQFlowParser.NETWORK_NAMESPACE_SYMBOL, 0);
	};

	MASTER_LOG_FILE_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_LOG_FILE_SYMBOL, 0);
	};

	MASTER_LOG_POS_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_LOG_POS_SYMBOL, 0);
	};

	MASTER_PASSWORD_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_PASSWORD_SYMBOL, 0);
	};

	MASTER_PORT_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_PORT_SYMBOL, 0);
	};

	MASTER_PUBLIC_KEY_PATH_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
	};

	MASTER_RETRY_COUNT_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_RETRY_COUNT_SYMBOL, 0);
	};

	MASTER_SERVER_ID_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SERVER_ID_SYMBOL, 0);
	};

	MASTER_SSL_CAPATH_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CAPATH_SYMBOL, 0);
	};

	MASTER_SSL_CA_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CA_SYMBOL, 0);
	};

	MASTER_SSL_CERT_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CERT_SYMBOL, 0);
	};

	MASTER_SSL_CIPHER_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CIPHER_SYMBOL, 0);
	};

	MASTER_SSL_CRLPATH_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
	};

	MASTER_SSL_CRL_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_CRL_SYMBOL, 0);
	};

	MASTER_SSL_KEY_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_KEY_SYMBOL, 0);
	};

	MASTER_SSL_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SSL_SYMBOL, 0);
	};

	MASTER_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_SYMBOL, 0);
	};

	MASTER_TLS_CIPHERSUITES_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
	};

	MASTER_TLS_VERSION_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_TLS_VERSION_SYMBOL, 0);
	};

	MASTER_USER_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_USER_SYMBOL, 0);
	};

	MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() {
	    return this.getToken(VQFlowParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
	};

	MAX_CONNECTIONS_PER_HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
	};

	MAX_QUERIES_PER_HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
	};

	MAX_ROWS_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_ROWS_SYMBOL, 0);
	};

	MAX_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_SIZE_SYMBOL, 0);
	};

	MAX_UPDATES_PER_HOUR_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
	};

	MAX_USER_CONNECTIONS_SYMBOL() {
	    return this.getToken(VQFlowParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
	};

	MEDIUM_SYMBOL() {
	    return this.getToken(VQFlowParser.MEDIUM_SYMBOL, 0);
	};

	MEMORY_SYMBOL() {
	    return this.getToken(VQFlowParser.MEMORY_SYMBOL, 0);
	};

	MERGE_SYMBOL() {
	    return this.getToken(VQFlowParser.MERGE_SYMBOL, 0);
	};

	MESSAGE_TEXT_SYMBOL() {
	    return this.getToken(VQFlowParser.MESSAGE_TEXT_SYMBOL, 0);
	};

	MICROSECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.MICROSECOND_SYMBOL, 0);
	};

	MIGRATE_SYMBOL() {
	    return this.getToken(VQFlowParser.MIGRATE_SYMBOL, 0);
	};

	MINUTE_SYMBOL() {
	    return this.getToken(VQFlowParser.MINUTE_SYMBOL, 0);
	};

	MIN_ROWS_SYMBOL() {
	    return this.getToken(VQFlowParser.MIN_ROWS_SYMBOL, 0);
	};

	MODE_SYMBOL() {
	    return this.getToken(VQFlowParser.MODE_SYMBOL, 0);
	};

	MODIFY_SYMBOL() {
	    return this.getToken(VQFlowParser.MODIFY_SYMBOL, 0);
	};

	MONTH_SYMBOL() {
	    return this.getToken(VQFlowParser.MONTH_SYMBOL, 0);
	};

	MULTILINESTRING_SYMBOL() {
	    return this.getToken(VQFlowParser.MULTILINESTRING_SYMBOL, 0);
	};

	MULTIPOINT_SYMBOL() {
	    return this.getToken(VQFlowParser.MULTIPOINT_SYMBOL, 0);
	};

	MULTIPOLYGON_SYMBOL() {
	    return this.getToken(VQFlowParser.MULTIPOLYGON_SYMBOL, 0);
	};

	MUTEX_SYMBOL() {
	    return this.getToken(VQFlowParser.MUTEX_SYMBOL, 0);
	};

	MYSQL_ERRNO_SYMBOL() {
	    return this.getToken(VQFlowParser.MYSQL_ERRNO_SYMBOL, 0);
	};

	NAMES_SYMBOL() {
	    return this.getToken(VQFlowParser.NAMES_SYMBOL, 0);
	};

	NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.NAME_SYMBOL, 0);
	};

	NATIONAL_SYMBOL() {
	    return this.getToken(VQFlowParser.NATIONAL_SYMBOL, 0);
	};

	NCHAR_SYMBOL() {
	    return this.getToken(VQFlowParser.NCHAR_SYMBOL, 0);
	};

	NDBCLUSTER_SYMBOL() {
	    return this.getToken(VQFlowParser.NDBCLUSTER_SYMBOL, 0);
	};

	NESTED_SYMBOL() {
	    return this.getToken(VQFlowParser.NESTED_SYMBOL, 0);
	};

	NEVER_SYMBOL() {
	    return this.getToken(VQFlowParser.NEVER_SYMBOL, 0);
	};

	NEW_SYMBOL() {
	    return this.getToken(VQFlowParser.NEW_SYMBOL, 0);
	};

	NEXT_SYMBOL() {
	    return this.getToken(VQFlowParser.NEXT_SYMBOL, 0);
	};

	NODEGROUP_SYMBOL() {
	    return this.getToken(VQFlowParser.NODEGROUP_SYMBOL, 0);
	};

	NOWAIT_SYMBOL() {
	    return this.getToken(VQFlowParser.NOWAIT_SYMBOL, 0);
	};

	NO_WAIT_SYMBOL() {
	    return this.getToken(VQFlowParser.NO_WAIT_SYMBOL, 0);
	};

	NULLS_SYMBOL() {
	    return this.getToken(VQFlowParser.NULLS_SYMBOL, 0);
	};

	NUMBER_SYMBOL() {
	    return this.getToken(VQFlowParser.NUMBER_SYMBOL, 0);
	};

	NVARCHAR_SYMBOL() {
	    return this.getToken(VQFlowParser.NVARCHAR_SYMBOL, 0);
	};

	OFFSET_SYMBOL() {
	    return this.getToken(VQFlowParser.OFFSET_SYMBOL, 0);
	};

	OJ_SYMBOL() {
	    return this.getToken(VQFlowParser.OJ_SYMBOL, 0);
	};

	OLD_SYMBOL() {
	    return this.getToken(VQFlowParser.OLD_SYMBOL, 0);
	};

	ONE_SYMBOL() {
	    return this.getToken(VQFlowParser.ONE_SYMBOL, 0);
	};

	ONLY_SYMBOL() {
	    return this.getToken(VQFlowParser.ONLY_SYMBOL, 0);
	};

	OPEN_SYMBOL() {
	    return this.getToken(VQFlowParser.OPEN_SYMBOL, 0);
	};

	OPTIONAL_SYMBOL() {
	    return this.getToken(VQFlowParser.OPTIONAL_SYMBOL, 0);
	};

	OPTIONS_SYMBOL() {
	    return this.getToken(VQFlowParser.OPTIONS_SYMBOL, 0);
	};

	ORDINALITY_SYMBOL() {
	    return this.getToken(VQFlowParser.ORDINALITY_SYMBOL, 0);
	};

	ORGANIZATION_SYMBOL() {
	    return this.getToken(VQFlowParser.ORGANIZATION_SYMBOL, 0);
	};

	OTHERS_SYMBOL() {
	    return this.getToken(VQFlowParser.OTHERS_SYMBOL, 0);
	};

	OWNER_SYMBOL() {
	    return this.getToken(VQFlowParser.OWNER_SYMBOL, 0);
	};

	PACK_KEYS_SYMBOL() {
	    return this.getToken(VQFlowParser.PACK_KEYS_SYMBOL, 0);
	};

	PAGE_SYMBOL() {
	    return this.getToken(VQFlowParser.PAGE_SYMBOL, 0);
	};

	PARSER_SYMBOL() {
	    return this.getToken(VQFlowParser.PARSER_SYMBOL, 0);
	};

	PARTIAL_SYMBOL() {
	    return this.getToken(VQFlowParser.PARTIAL_SYMBOL, 0);
	};

	PARTITIONING_SYMBOL() {
	    return this.getToken(VQFlowParser.PARTITIONING_SYMBOL, 0);
	};

	PARTITIONS_SYMBOL() {
	    return this.getToken(VQFlowParser.PARTITIONS_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(VQFlowParser.PASSWORD_SYMBOL, 0);
	};

	PATH_SYMBOL() {
	    return this.getToken(VQFlowParser.PATH_SYMBOL, 0);
	};

	PHASE_SYMBOL() {
	    return this.getToken(VQFlowParser.PHASE_SYMBOL, 0);
	};

	PLUGINS_SYMBOL() {
	    return this.getToken(VQFlowParser.PLUGINS_SYMBOL, 0);
	};

	PLUGIN_DIR_SYMBOL() {
	    return this.getToken(VQFlowParser.PLUGIN_DIR_SYMBOL, 0);
	};

	PLUGIN_SYMBOL() {
	    return this.getToken(VQFlowParser.PLUGIN_SYMBOL, 0);
	};

	POINT_SYMBOL() {
	    return this.getToken(VQFlowParser.POINT_SYMBOL, 0);
	};

	POLYGON_SYMBOL() {
	    return this.getToken(VQFlowParser.POLYGON_SYMBOL, 0);
	};

	PORT_SYMBOL() {
	    return this.getToken(VQFlowParser.PORT_SYMBOL, 0);
	};

	PRECEDING_SYMBOL() {
	    return this.getToken(VQFlowParser.PRECEDING_SYMBOL, 0);
	};

	PRESERVE_SYMBOL() {
	    return this.getToken(VQFlowParser.PRESERVE_SYMBOL, 0);
	};

	PREV_SYMBOL() {
	    return this.getToken(VQFlowParser.PREV_SYMBOL, 0);
	};

	PRIVILEGES_SYMBOL() {
	    return this.getToken(VQFlowParser.PRIVILEGES_SYMBOL, 0);
	};

	PRIVILEGE_CHECKS_USER_SYMBOL() {
	    return this.getToken(VQFlowParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
	};

	PROCESSLIST_SYMBOL() {
	    return this.getToken(VQFlowParser.PROCESSLIST_SYMBOL, 0);
	};

	PROFILES_SYMBOL() {
	    return this.getToken(VQFlowParser.PROFILES_SYMBOL, 0);
	};

	PROFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.PROFILE_SYMBOL, 0);
	};

	QUARTER_SYMBOL() {
	    return this.getToken(VQFlowParser.QUARTER_SYMBOL, 0);
	};

	QUERY_SYMBOL() {
	    return this.getToken(VQFlowParser.QUERY_SYMBOL, 0);
	};

	QUICK_SYMBOL() {
	    return this.getToken(VQFlowParser.QUICK_SYMBOL, 0);
	};

	READ_ONLY_SYMBOL() {
	    return this.getToken(VQFlowParser.READ_ONLY_SYMBOL, 0);
	};

	REBUILD_SYMBOL() {
	    return this.getToken(VQFlowParser.REBUILD_SYMBOL, 0);
	};

	RECOVER_SYMBOL() {
	    return this.getToken(VQFlowParser.RECOVER_SYMBOL, 0);
	};

	REDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.REDO_BUFFER_SIZE_SYMBOL, 0);
	};

	REDUNDANT_SYMBOL() {
	    return this.getToken(VQFlowParser.REDUNDANT_SYMBOL, 0);
	};

	REFERENCE_SYMBOL() {
	    return this.getToken(VQFlowParser.REFERENCE_SYMBOL, 0);
	};

	RELAY_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAY_SYMBOL, 0);
	};

	RELAYLOG_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAYLOG_SYMBOL, 0);
	};

	RELAY_LOG_FILE_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAY_LOG_FILE_SYMBOL, 0);
	};

	RELAY_LOG_POS_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAY_LOG_POS_SYMBOL, 0);
	};

	RELAY_THREAD_SYMBOL() {
	    return this.getToken(VQFlowParser.RELAY_THREAD_SYMBOL, 0);
	};

	REMOVE_SYMBOL() {
	    return this.getToken(VQFlowParser.REMOVE_SYMBOL, 0);
	};

	REORGANIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.REORGANIZE_SYMBOL, 0);
	};

	REPEATABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPEATABLE_SYMBOL, 0);
	};

	REPLICATE_DO_DB_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_DO_DB_SYMBOL, 0);
	};

	REPLICATE_DO_TABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_DO_TABLE_SYMBOL, 0);
	};

	REPLICATE_IGNORE_DB_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
	};

	REPLICATE_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
	};

	REPLICATE_REWRITE_DB_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
	};

	REPLICATE_WILD_DO_TABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
	};

	REPLICATE_WILD_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
	};

	USER_RESOURCES_SYMBOL() {
	    return this.getToken(VQFlowParser.USER_RESOURCES_SYMBOL, 0);
	};

	RESPECT_SYMBOL() {
	    return this.getToken(VQFlowParser.RESPECT_SYMBOL, 0);
	};

	RESTORE_SYMBOL() {
	    return this.getToken(VQFlowParser.RESTORE_SYMBOL, 0);
	};

	RESUME_SYMBOL() {
	    return this.getToken(VQFlowParser.RESUME_SYMBOL, 0);
	};

	RETAIN_SYMBOL() {
	    return this.getToken(VQFlowParser.RETAIN_SYMBOL, 0);
	};

	RETURNED_SQLSTATE_SYMBOL() {
	    return this.getToken(VQFlowParser.RETURNED_SQLSTATE_SYMBOL, 0);
	};

	RETURNS_SYMBOL() {
	    return this.getToken(VQFlowParser.RETURNS_SYMBOL, 0);
	};

	REUSE_SYMBOL() {
	    return this.getToken(VQFlowParser.REUSE_SYMBOL, 0);
	};

	REVERSE_SYMBOL() {
	    return this.getToken(VQFlowParser.REVERSE_SYMBOL, 0);
	};

	ROLE_SYMBOL() {
	    return this.getToken(VQFlowParser.ROLE_SYMBOL, 0);
	};

	ROLLUP_SYMBOL() {
	    return this.getToken(VQFlowParser.ROLLUP_SYMBOL, 0);
	};

	ROTATE_SYMBOL() {
	    return this.getToken(VQFlowParser.ROTATE_SYMBOL, 0);
	};

	ROUTINE_SYMBOL() {
	    return this.getToken(VQFlowParser.ROUTINE_SYMBOL, 0);
	};

	ROW_COUNT_SYMBOL() {
	    return this.getToken(VQFlowParser.ROW_COUNT_SYMBOL, 0);
	};

	ROW_FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.ROW_FORMAT_SYMBOL, 0);
	};

	RTREE_SYMBOL() {
	    return this.getToken(VQFlowParser.RTREE_SYMBOL, 0);
	};

	SCHEDULE_SYMBOL() {
	    return this.getToken(VQFlowParser.SCHEDULE_SYMBOL, 0);
	};

	SCHEMA_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.SCHEMA_NAME_SYMBOL, 0);
	};

	SECONDARY_ENGINE_SYMBOL() {
	    return this.getToken(VQFlowParser.SECONDARY_ENGINE_SYMBOL, 0);
	};

	SECONDARY_LOAD_SYMBOL() {
	    return this.getToken(VQFlowParser.SECONDARY_LOAD_SYMBOL, 0);
	};

	SECONDARY_SYMBOL() {
	    return this.getToken(VQFlowParser.SECONDARY_SYMBOL, 0);
	};

	SECONDARY_UNLOAD_SYMBOL() {
	    return this.getToken(VQFlowParser.SECONDARY_UNLOAD_SYMBOL, 0);
	};

	SECOND_SYMBOL() {
	    return this.getToken(VQFlowParser.SECOND_SYMBOL, 0);
	};

	SECURITY_SYMBOL() {
	    return this.getToken(VQFlowParser.SECURITY_SYMBOL, 0);
	};

	SERIALIZABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.SERIALIZABLE_SYMBOL, 0);
	};

	SERIAL_SYMBOL() {
	    return this.getToken(VQFlowParser.SERIAL_SYMBOL, 0);
	};

	SERVER_SYMBOL() {
	    return this.getToken(VQFlowParser.SERVER_SYMBOL, 0);
	};

	SHARE_SYMBOL() {
	    return this.getToken(VQFlowParser.SHARE_SYMBOL, 0);
	};

	SIMPLE_SYMBOL() {
	    return this.getToken(VQFlowParser.SIMPLE_SYMBOL, 0);
	};

	SKIP_SYMBOL() {
	    return this.getToken(VQFlowParser.SKIP_SYMBOL, 0);
	};

	SLOW_SYMBOL() {
	    return this.getToken(VQFlowParser.SLOW_SYMBOL, 0);
	};

	SNAPSHOT_SYMBOL() {
	    return this.getToken(VQFlowParser.SNAPSHOT_SYMBOL, 0);
	};

	SOCKET_SYMBOL() {
	    return this.getToken(VQFlowParser.SOCKET_SYMBOL, 0);
	};

	SONAME_SYMBOL() {
	    return this.getToken(VQFlowParser.SONAME_SYMBOL, 0);
	};

	SOUNDS_SYMBOL() {
	    return this.getToken(VQFlowParser.SOUNDS_SYMBOL, 0);
	};

	SOURCE_SYMBOL() {
	    return this.getToken(VQFlowParser.SOURCE_SYMBOL, 0);
	};

	SQL_AFTER_GTIDS_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_AFTER_GTIDS_SYMBOL, 0);
	};

	SQL_AFTER_MTS_GAPS_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
	};

	SQL_BEFORE_GTIDS_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
	};

	SQL_BUFFER_RESULT_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	};

	SQL_NO_CACHE_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_NO_CACHE_SYMBOL, 0);
	};

	SQL_THREAD_SYMBOL() {
	    return this.getToken(VQFlowParser.SQL_THREAD_SYMBOL, 0);
	};

	SRID_SYMBOL() {
	    return this.getToken(VQFlowParser.SRID_SYMBOL, 0);
	};

	STACKED_SYMBOL() {
	    return this.getToken(VQFlowParser.STACKED_SYMBOL, 0);
	};

	STARTS_SYMBOL() {
	    return this.getToken(VQFlowParser.STARTS_SYMBOL, 0);
	};

	STATS_AUTO_RECALC_SYMBOL() {
	    return this.getToken(VQFlowParser.STATS_AUTO_RECALC_SYMBOL, 0);
	};

	STATS_PERSISTENT_SYMBOL() {
	    return this.getToken(VQFlowParser.STATS_PERSISTENT_SYMBOL, 0);
	};

	STATS_SAMPLE_PAGES_SYMBOL() {
	    return this.getToken(VQFlowParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
	};

	STATUS_SYMBOL() {
	    return this.getToken(VQFlowParser.STATUS_SYMBOL, 0);
	};

	STORAGE_SYMBOL() {
	    return this.getToken(VQFlowParser.STORAGE_SYMBOL, 0);
	};

	STRING_SYMBOL() {
	    return this.getToken(VQFlowParser.STRING_SYMBOL, 0);
	};

	SUBCLASS_ORIGIN_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBCLASS_ORIGIN_SYMBOL, 0);
	};

	SUBDATE_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBDATE_SYMBOL, 0);
	};

	SUBJECT_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBJECT_SYMBOL, 0);
	};

	SUBPARTITIONS_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBPARTITIONS_SYMBOL, 0);
	};

	SUBPARTITION_SYMBOL() {
	    return this.getToken(VQFlowParser.SUBPARTITION_SYMBOL, 0);
	};

	SUSPEND_SYMBOL() {
	    return this.getToken(VQFlowParser.SUSPEND_SYMBOL, 0);
	};

	SWAPS_SYMBOL() {
	    return this.getToken(VQFlowParser.SWAPS_SYMBOL, 0);
	};

	SWITCHES_SYMBOL() {
	    return this.getToken(VQFlowParser.SWITCHES_SYMBOL, 0);
	};

	TABLES_SYMBOL() {
	    return this.getToken(VQFlowParser.TABLES_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(VQFlowParser.TABLESPACE_SYMBOL, 0);
	};

	TABLE_CHECKSUM_SYMBOL() {
	    return this.getToken(VQFlowParser.TABLE_CHECKSUM_SYMBOL, 0);
	};

	TABLE_NAME_SYMBOL() {
	    return this.getToken(VQFlowParser.TABLE_NAME_SYMBOL, 0);
	};

	TEMPORARY_SYMBOL() {
	    return this.getToken(VQFlowParser.TEMPORARY_SYMBOL, 0);
	};

	TEMPTABLE_SYMBOL() {
	    return this.getToken(VQFlowParser.TEMPTABLE_SYMBOL, 0);
	};

	TEXT_SYMBOL() {
	    return this.getToken(VQFlowParser.TEXT_SYMBOL, 0);
	};

	THAN_SYMBOL() {
	    return this.getToken(VQFlowParser.THAN_SYMBOL, 0);
	};

	THREAD_PRIORITY_SYMBOL() {
	    return this.getToken(VQFlowParser.THREAD_PRIORITY_SYMBOL, 0);
	};

	TIES_SYMBOL() {
	    return this.getToken(VQFlowParser.TIES_SYMBOL, 0);
	};

	TIMESTAMP_ADD_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_ADD_SYMBOL, 0);
	};

	TIMESTAMP_DIFF_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_DIFF_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(VQFlowParser.TIMESTAMP_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(VQFlowParser.TIME_SYMBOL, 0);
	};

	TRANSACTION_SYMBOL() {
	    return this.getToken(VQFlowParser.TRANSACTION_SYMBOL, 0);
	};

	TRIGGERS_SYMBOL() {
	    return this.getToken(VQFlowParser.TRIGGERS_SYMBOL, 0);
	};

	TYPES_SYMBOL() {
	    return this.getToken(VQFlowParser.TYPES_SYMBOL, 0);
	};

	TYPE_SYMBOL() {
	    return this.getToken(VQFlowParser.TYPE_SYMBOL, 0);
	};

	UNBOUNDED_SYMBOL() {
	    return this.getToken(VQFlowParser.UNBOUNDED_SYMBOL, 0);
	};

	UNCOMMITTED_SYMBOL() {
	    return this.getToken(VQFlowParser.UNCOMMITTED_SYMBOL, 0);
	};

	UNDEFINED_SYMBOL() {
	    return this.getToken(VQFlowParser.UNDEFINED_SYMBOL, 0);
	};

	UNDOFILE_SYMBOL() {
	    return this.getToken(VQFlowParser.UNDOFILE_SYMBOL, 0);
	};

	UNDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(VQFlowParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
	};

	UNKNOWN_SYMBOL() {
	    return this.getToken(VQFlowParser.UNKNOWN_SYMBOL, 0);
	};

	UNTIL_SYMBOL() {
	    return this.getToken(VQFlowParser.UNTIL_SYMBOL, 0);
	};

	UPGRADE_SYMBOL() {
	    return this.getToken(VQFlowParser.UPGRADE_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(VQFlowParser.USER_SYMBOL, 0);
	};

	USE_FRM_SYMBOL() {
	    return this.getToken(VQFlowParser.USE_FRM_SYMBOL, 0);
	};

	VALIDATION_SYMBOL() {
	    return this.getToken(VQFlowParser.VALIDATION_SYMBOL, 0);
	};

	VALUE_SYMBOL() {
	    return this.getToken(VQFlowParser.VALUE_SYMBOL, 0);
	};

	VARIABLES_SYMBOL() {
	    return this.getToken(VQFlowParser.VARIABLES_SYMBOL, 0);
	};

	VCPU_SYMBOL() {
	    return this.getToken(VQFlowParser.VCPU_SYMBOL, 0);
	};

	VIEW_SYMBOL() {
	    return this.getToken(VQFlowParser.VIEW_SYMBOL, 0);
	};

	VISIBLE_SYMBOL() {
	    return this.getToken(VQFlowParser.VISIBLE_SYMBOL, 0);
	};

	WAIT_SYMBOL() {
	    return this.getToken(VQFlowParser.WAIT_SYMBOL, 0);
	};

	WARNINGS_SYMBOL() {
	    return this.getToken(VQFlowParser.WARNINGS_SYMBOL, 0);
	};

	WEEK_SYMBOL() {
	    return this.getToken(VQFlowParser.WEEK_SYMBOL, 0);
	};

	WEIGHT_STRING_SYMBOL() {
	    return this.getToken(VQFlowParser.WEIGHT_STRING_SYMBOL, 0);
	};

	WITHOUT_SYMBOL() {
	    return this.getToken(VQFlowParser.WITHOUT_SYMBOL, 0);
	};

	WORK_SYMBOL() {
	    return this.getToken(VQFlowParser.WORK_SYMBOL, 0);
	};

	WRAPPER_SYMBOL() {
	    return this.getToken(VQFlowParser.WRAPPER_SYMBOL, 0);
	};

	X509_SYMBOL() {
	    return this.getToken(VQFlowParser.X509_SYMBOL, 0);
	};

	XID_SYMBOL() {
	    return this.getToken(VQFlowParser.XID_SYMBOL, 0);
	};

	XML_SYMBOL() {
	    return this.getToken(VQFlowParser.XML_SYMBOL, 0);
	};

	YEAR_SYMBOL() {
	    return this.getToken(VQFlowParser.YEAR_SYMBOL, 0);
	};

	ARRAY_SYMBOL() {
	    return this.getToken(VQFlowParser.ARRAY_SYMBOL, 0);
	};

	FAILED_LOGIN_ATTEMPTS_SYMBOL() {
	    return this.getToken(VQFlowParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
	};

	MEMBER_SYMBOL() {
	    return this.getToken(VQFlowParser.MEMBER_SYMBOL, 0);
	};

	OFF_SYMBOL() {
	    return this.getToken(VQFlowParser.OFF_SYMBOL, 0);
	};

	PASSWORD_LOCK_TIME_SYMBOL() {
	    return this.getToken(VQFlowParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
	};

	RANDOM_SYMBOL() {
	    return this.getToken(VQFlowParser.RANDOM_SYMBOL, 0);
	};

	REQUIRE_ROW_FORMAT_SYMBOL() {
	    return this.getToken(VQFlowParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
	};

	REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() {
	    return this.getToken(VQFlowParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
	};

	STREAM_SYMBOL() {
	    return this.getToken(VQFlowParser.STREAM_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentifierKeywordsUnambiguous(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentifierKeywordsUnambiguous(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentifierKeywordsUnambiguous(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels;
    }

	EXECUTE_SYMBOL() {
	    return this.getToken(VQFlowParser.EXECUTE_SYMBOL, 0);
	};

	RESTART_SYMBOL() {
	    return this.getToken(VQFlowParser.RESTART_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(VQFlowParser.SHUTDOWN_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsAmbiguous2LabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = VQFlowParser.RULE_identifierKeywordsAmbiguous2Labels;
    }

	ASCII_SYMBOL() {
	    return this.getToken(VQFlowParser.ASCII_SYMBOL, 0);
	};

	BEGIN_SYMBOL() {
	    return this.getToken(VQFlowParser.BEGIN_SYMBOL, 0);
	};

	BYTE_SYMBOL() {
	    return this.getToken(VQFlowParser.BYTE_SYMBOL, 0);
	};

	CACHE_SYMBOL() {
	    return this.getToken(VQFlowParser.CACHE_SYMBOL, 0);
	};

	CHARSET_SYMBOL() {
	    return this.getToken(VQFlowParser.CHARSET_SYMBOL, 0);
	};

	CHECKSUM_SYMBOL() {
	    return this.getToken(VQFlowParser.CHECKSUM_SYMBOL, 0);
	};

	CLONE_SYMBOL() {
	    return this.getToken(VQFlowParser.CLONE_SYMBOL, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMENT_SYMBOL, 0);
	};

	COMMIT_SYMBOL() {
	    return this.getToken(VQFlowParser.COMMIT_SYMBOL, 0);
	};

	CONTAINS_SYMBOL() {
	    return this.getToken(VQFlowParser.CONTAINS_SYMBOL, 0);
	};

	DEALLOCATE_SYMBOL() {
	    return this.getToken(VQFlowParser.DEALLOCATE_SYMBOL, 0);
	};

	DO_SYMBOL() {
	    return this.getToken(VQFlowParser.DO_SYMBOL, 0);
	};

	END_SYMBOL() {
	    return this.getToken(VQFlowParser.END_SYMBOL, 0);
	};

	FLUSH_SYMBOL() {
	    return this.getToken(VQFlowParser.FLUSH_SYMBOL, 0);
	};

	FOLLOWS_SYMBOL() {
	    return this.getToken(VQFlowParser.FOLLOWS_SYMBOL, 0);
	};

	HANDLER_SYMBOL() {
	    return this.getToken(VQFlowParser.HANDLER_SYMBOL, 0);
	};

	HELP_SYMBOL() {
	    return this.getToken(VQFlowParser.HELP_SYMBOL, 0);
	};

	IMPORT_SYMBOL() {
	    return this.getToken(VQFlowParser.IMPORT_SYMBOL, 0);
	};

	INSTALL_SYMBOL() {
	    return this.getToken(VQFlowParser.INSTALL_SYMBOL, 0);
	};

	LANGUAGE_SYMBOL() {
	    return this.getToken(VQFlowParser.LANGUAGE_SYMBOL, 0);
	};

	NO_SYMBOL() {
	    return this.getToken(VQFlowParser.NO_SYMBOL, 0);
	};

	PRECEDES_SYMBOL() {
	    return this.getToken(VQFlowParser.PRECEDES_SYMBOL, 0);
	};

	PREPARE_SYMBOL() {
	    return this.getToken(VQFlowParser.PREPARE_SYMBOL, 0);
	};

	REPAIR_SYMBOL() {
	    return this.getToken(VQFlowParser.REPAIR_SYMBOL, 0);
	};

	RESET_SYMBOL() {
	    return this.getToken(VQFlowParser.RESET_SYMBOL, 0);
	};

	ROLLBACK_SYMBOL() {
	    return this.getToken(VQFlowParser.ROLLBACK_SYMBOL, 0);
	};

	SAVEPOINT_SYMBOL() {
	    return this.getToken(VQFlowParser.SAVEPOINT_SYMBOL, 0);
	};

	SIGNED_SYMBOL() {
	    return this.getToken(VQFlowParser.SIGNED_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(VQFlowParser.SLAVE_SYMBOL, 0);
	};

	START_SYMBOL() {
	    return this.getToken(VQFlowParser.START_SYMBOL, 0);
	};

	STOP_SYMBOL() {
	    return this.getToken(VQFlowParser.STOP_SYMBOL, 0);
	};

	TRUNCATE_SYMBOL() {
	    return this.getToken(VQFlowParser.TRUNCATE_SYMBOL, 0);
	};

	UNICODE_SYMBOL() {
	    return this.getToken(VQFlowParser.UNICODE_SYMBOL, 0);
	};

	UNINSTALL_SYMBOL() {
	    return this.getToken(VQFlowParser.UNINSTALL_SYMBOL, 0);
	};

	XA_SYMBOL() {
	    return this.getToken(VQFlowParser.XA_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.enterIdentifierKeywordsAmbiguous2Labels(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof VQFlowParserListener ) {
	        listener.exitIdentifierKeywordsAmbiguous2Labels(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof VQFlowParserVisitor ) {
	        return visitor.visitIdentifierKeywordsAmbiguous2Labels(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




VQFlowParser.TargetContext = TargetContext; 
VQFlowParser.QueryContext = QueryContext; 
VQFlowParser.RequirementsModuleContext = RequirementsModuleContext; 
VQFlowParser.MiniQueryContext = MiniQueryContext; 
VQFlowParser.SingleTableRefContext = SingleTableRefContext; 
VQFlowParser.SelectClauseContext = SelectClauseContext; 
VQFlowParser.FilterExprContext = FilterExprContext; 
VQFlowParser.QueryBodyContext = QueryBodyContext; 
VQFlowParser.TableContext = TableContext; 
VQFlowParser.ExpandQueryContext = ExpandQueryContext; 
VQFlowParser.ExpandEdgeContext = ExpandEdgeContext; 
VQFlowParser.ExpandEdgeBodyContext = ExpandEdgeBodyContext; 
VQFlowParser.CardinalityContext = CardinalityContext; 
VQFlowParser.ColumnsToMatchContext = ColumnsToMatchContext; 
VQFlowParser.ColumnToMatchContext = ColumnToMatchContext; 
VQFlowParser.UnionQueryContext = UnionQueryContext; 
VQFlowParser.UnionEdgeContext = UnionEdgeContext; 
VQFlowParser.DescriptionContext = DescriptionContext; 
VQFlowParser.SelectStatementContext = SelectStatementContext; 
VQFlowParser.QueryExpressionParensContext = QueryExpressionParensContext; 
VQFlowParser.QueryExpressionBodyContext = QueryExpressionBodyContext; 
VQFlowParser.QueryExpressionContext = QueryExpressionContext; 
VQFlowParser.SelectItemListContext = SelectItemListContext; 
VQFlowParser.SelectItemContext = SelectItemContext; 
VQFlowParser.ExprContext = ExprContext; 
VQFlowParser.BoolPriContext = BoolPriContext; 
VQFlowParser.CompOpContext = CompOpContext; 
VQFlowParser.SubqueryContext = SubqueryContext; 
VQFlowParser.WithClauseContext = WithClauseContext; 
VQFlowParser.CommonTableExpressionContext = CommonTableExpressionContext; 
VQFlowParser.LimitClauseContext = LimitClauseContext; 
VQFlowParser.LimitOptionsContext = LimitOptionsContext; 
VQFlowParser.LimitOptionContext = LimitOptionContext; 
VQFlowParser.QueryPrimaryContext = QueryPrimaryContext; 
VQFlowParser.TableRefContext = TableRefContext; 
VQFlowParser.QuerySpecificationContext = QuerySpecificationContext; 
VQFlowParser.GroupByClauseContext = GroupByClauseContext; 
VQFlowParser.OlapOptionContext = OlapOptionContext; 
VQFlowParser.HavingClauseContext = HavingClauseContext; 
VQFlowParser.WhereClauseContext = WhereClauseContext; 
VQFlowParser.FromClauseContext = FromClauseContext; 
VQFlowParser.TableReferenceListContext = TableReferenceListContext; 
VQFlowParser.TableReferenceContext = TableReferenceContext; 
VQFlowParser.EscapedTableReferenceContext = EscapedTableReferenceContext; 
VQFlowParser.JoinedTableContext = JoinedTableContext; 
VQFlowParser.NaturalJoinTypeContext = NaturalJoinTypeContext; 
VQFlowParser.InnerJoinTypeContext = InnerJoinTypeContext; 
VQFlowParser.OuterJoinTypeContext = OuterJoinTypeContext; 
VQFlowParser.TableFactorContext = TableFactorContext; 
VQFlowParser.SingleTableContext = SingleTableContext; 
VQFlowParser.SingleTableParensContext = SingleTableParensContext; 
VQFlowParser.IdentifierListWithParenthesesContext = IdentifierListWithParenthesesContext; 
VQFlowParser.IdentifierListContext = IdentifierListContext; 
VQFlowParser.DerivedTableContext = DerivedTableContext; 
VQFlowParser.ColumnInternalRefListContext = ColumnInternalRefListContext; 
VQFlowParser.ColumnInternalRefContext = ColumnInternalRefContext; 
VQFlowParser.TableAliasContext = TableAliasContext; 
VQFlowParser.TableReferenceListParensContext = TableReferenceListParensContext; 
VQFlowParser.UnionOptionContext = UnionOptionContext; 
VQFlowParser.NotRuleContext = NotRuleContext; 
VQFlowParser.PredicateContext = PredicateContext; 
VQFlowParser.PredicateOperationsContext = PredicateOperationsContext; 
VQFlowParser.ColumnRefContext = ColumnRefContext; 
VQFlowParser.FieldIdentifierContext = FieldIdentifierContext; 
VQFlowParser.SimpleExprContext = SimpleExprContext; 
VQFlowParser.RuntimeFunctionCallContext = RuntimeFunctionCallContext; 
VQFlowParser.DateTimeTtypeContext = DateTimeTtypeContext; 
VQFlowParser.TrimFunctionContext = TrimFunctionContext; 
VQFlowParser.TimeFunctionParametersContext = TimeFunctionParametersContext; 
VQFlowParser.SubstringFunctionContext = SubstringFunctionContext; 
VQFlowParser.FractionalPrecisionContext = FractionalPrecisionContext; 
VQFlowParser.Real_ulong_numberContext = Real_ulong_numberContext; 
VQFlowParser.WsNumCodepointsContext = WsNumCodepointsContext; 
VQFlowParser.Ulong_numberContext = Ulong_numberContext; 
VQFlowParser.ExprListWithParenthesesContext = ExprListWithParenthesesContext; 
VQFlowParser.EqualContext = EqualContext; 
VQFlowParser.QualifiedIdentifierContext = QualifiedIdentifierContext; 
VQFlowParser.UdfExprListContext = UdfExprListContext; 
VQFlowParser.UdfExprContext = UdfExprContext; 
VQFlowParser.SelectAliasContext = SelectAliasContext; 
VQFlowParser.FunctionCallContext = FunctionCallContext; 
VQFlowParser.FulltextOptionsContext = FulltextOptionsContext; 
VQFlowParser.LiteralContext = LiteralContext; 
VQFlowParser.NumLiteralContext = NumLiteralContext; 
VQFlowParser.BoolLiteralContext = BoolLiteralContext; 
VQFlowParser.NullLiteralContext = NullLiteralContext; 
VQFlowParser.TemporalLiteralContext = TemporalLiteralContext; 
VQFlowParser.TextLiteralContext = TextLiteralContext; 
VQFlowParser.SumExprContext = SumExprContext; 
VQFlowParser.TextStringContext = TextStringContext; 
VQFlowParser.InSumExprContext = InSumExprContext; 
VQFlowParser.VariableContext = VariableContext; 
VQFlowParser.ArrayCastContext = ArrayCastContext; 
VQFlowParser.ExprWithParenthesesContext = ExprWithParenthesesContext; 
VQFlowParser.ParenthesesContext = ParenthesesContext; 
VQFlowParser.OrderListContext = OrderListContext; 
VQFlowParser.OrderClauseContext = OrderClauseContext; 
VQFlowParser.OrderExpressionContext = OrderExpressionContext; 
VQFlowParser.DirectionContext = DirectionContext; 
VQFlowParser.SimpleExprWithParenthesesContext = SimpleExprWithParenthesesContext; 
VQFlowParser.UserVariableContext = UserVariableContext; 
VQFlowParser.SystemVariableContext = SystemVariableContext; 
VQFlowParser.VarIdentTypeContext = VarIdentTypeContext; 
VQFlowParser.GroupingOperationContext = GroupingOperationContext; 
VQFlowParser.ExprListContext = ExprListContext; 
VQFlowParser.CastTypeContext = CastTypeContext; 
VQFlowParser.FloatOptionsContext = FloatOptionsContext; 
VQFlowParser.StandardFloatOptionsContext = StandardFloatOptionsContext; 
VQFlowParser.PrecisionContext = PrecisionContext; 
VQFlowParser.AsciiContext = AsciiContext; 
VQFlowParser.UnicodeContext = UnicodeContext; 
VQFlowParser.TextStringLiteralContext = TextStringLiteralContext; 
VQFlowParser.CharsetNameContext = CharsetNameContext; 
VQFlowParser.TextOrIdentifierContext = TextOrIdentifierContext; 
VQFlowParser.CharsetContext = CharsetContext; 
VQFlowParser.CharsetWithOptBinaryContext = CharsetWithOptBinaryContext; 
VQFlowParser.TypeDatetimePrecisionContext = TypeDatetimePrecisionContext; 
VQFlowParser.NcharContext = NcharContext; 
VQFlowParser.RealTypeContext = RealTypeContext; 
VQFlowParser.FieldLengthContext = FieldLengthContext; 
VQFlowParser.Real_ulonglong_numberContext = Real_ulonglong_numberContext; 
VQFlowParser.IntervalTimeStampContext = IntervalTimeStampContext; 
VQFlowParser.IntervalContext = IntervalContext; 
VQFlowParser.IdentListArgContext = IdentListArgContext; 
VQFlowParser.IdentListContext = IdentListContext; 
VQFlowParser.Not2RuleContext = Not2RuleContext; 
VQFlowParser.SimpleIdentifierContext = SimpleIdentifierContext; 
VQFlowParser.DotIdentifierContext = DotIdentifierContext; 
VQFlowParser.WhenExpressionContext = WhenExpressionContext; 
VQFlowParser.ThenExpressionContext = ThenExpressionContext; 
VQFlowParser.ElseExpressionContext = ElseExpressionContext; 
VQFlowParser.BitExprContext = BitExprContext; 
VQFlowParser.TableWildContext = TableWildContext; 
VQFlowParser.PureIdentifierContext = PureIdentifierContext; 
VQFlowParser.IdentifierContext = IdentifierContext; 
VQFlowParser.IdentifierKeywordContext = IdentifierKeywordContext; 
VQFlowParser.RoleOrIdentifierKeywordContext = RoleOrIdentifierKeywordContext; 
VQFlowParser.RoleOrLabelKeywordContext = RoleOrLabelKeywordContext; 
VQFlowParser.LabelKeywordContext = LabelKeywordContext; 
VQFlowParser.IdentifierKeywordsAmbiguous4SystemVariablesContext = IdentifierKeywordsAmbiguous4SystemVariablesContext; 
VQFlowParser.IdentifierKeywordsAmbiguous3RolesContext = IdentifierKeywordsAmbiguous3RolesContext; 
VQFlowParser.IdentifierKeywordsUnambiguousContext = IdentifierKeywordsUnambiguousContext; 
VQFlowParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext = IdentifierKeywordsAmbiguous1RolesAndLabelsContext; 
VQFlowParser.IdentifierKeywordsAmbiguous2LabelsContext = IdentifierKeywordsAmbiguous2LabelsContext; 
